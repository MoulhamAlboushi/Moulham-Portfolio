var $applozic = jQuery.noConflict(true);
if (typeof $original !== 'undefined') {
    $ = $original;
    jQuery = $original;
    if (typeof $.fn.template === 'function') {
        $applozic.fn.template = $.fn.template;
        jQuery.fn.template = $.fn.template;
    } else if (typeof $applozic.fn.template === 'function') {
        $.fn.template = $applozic.fn.template;
        jQuery.fn.template = $applozic.fn.template;
    }
}
function MckCallingService(u,h,m,b,c,t,f,g,s,j){var q=this;var n=$applozic("#mck-vid-icon");var e=$applozic("#mck-sidebox");q.callStartTime=t;q.mckMessageService=f;q.identity=u;q.token=h;q.callId=m;q.isCallHost=c;q.toUserImage=g;q.toUserDisplayName=b;q.isAudioCall=s;q.disconectedByHost;q.rejectedByReceiver;q.twilioService;console.log("is AudioCall:"+s);q.ringTone=j;var r=$applozic("#mck-msg-to");var i=$applozic(".applozic-vid-container");var l=$applozic("#mck-sidebox");var k=$applozic("#mck-video-call-indicator");var a=$applozic("#mck-unmute-icon");var o=$applozic("#mck-mute-icon");var p=$applozic("#mck-microfone-mute-btn");$applozic("#mck-microfone-mute-btn").off("click").on("click",function(){var v=r.val();var y=q.twilioService.activeRoom;if(y){var x=y.localParticipant.media;if(x.isMuted){a.addClass("vis").removeClass("n-vis");o.addClass("n-vis").removeClass("vis");p.addClass("mck-unmuted").removeClass("mck-muted");x.unmute()}else{o.addClass("vis").removeClass("n-vis");a.addClass("n-vis").removeClass("vis");p.addClass("mck-muted").removeClass("mck-unmuted");x.mute()}}});$applozic("#mck-vid-disconnect").off("click").on("click",function(){var x=r.val();if(c){q.disconectedByHost=true;if(q.twilioService.callReceivedAt){var v=q.twilioService.callReceivedAt.getTime();var y=new Date().getTime()-v;alMessageService.sendVideoCallEndMessage(m,"CALL_END",102,false,y,x,function(z){f.sendMessage(z)})}else{q.ringTone.stop();alMessageService.sendVideoCallMessage(m,"CALL_MISSED",103,false,x,function(z){f.sendMessage(z)})}}q.twilioService.leaveRoomIfJoined();q.removeTracks(["#mck-vid-media > video","#mck-vid-media > audio","#local-media > video","#local-media > audio"]);i.addClass("n-vis").removeClass("vis");k.addClass("n-vis").removeClass("vis")});q.startVideoCall=function(){if(!navigator.webkitGetUserMedia&&!navigator.mozGetUserMedia){alert("WebRTC is not available in your browser. can not start video call")}if(!q.token){alert("missing token.. can not make video call");i.removeClass("vis").addClass("n-vis")}q.twilioService=new TwilioService(q.identity,q.token,q.callId,q.ringTone,q.isAudioCall,q.mckMessageService,q.isCallHost);var v=q.twilioService.InitializeVideoClient();if(c){n.html(g+"<span> Calling "+b+"</span>");n.removeClass("n-vis").addClass("vis");setTimeout(function(){if(!q.twilioService.isCallReceived&&!q.disconectedByHost&&!q.rejectedByReceiver){console.log("call is not answered....");q.ringTone.stop();alMessageService.sendVideoCallMessage(m,"CALL_MISSED",103,s,toUser,function(x){f.sendMessage(x)});alert(b+" not Available....");q.twilioService.leaveRoomIfJoined();q.removeTracks(["#mck-vid-media > video","#mck-vid-media > audio","#local-media > video","#local-media > audio"]);i.addClass("n-vis").removeClass("vis")}},70000)}window.addEventListener("beforeunload",q.twilioService.leaveRoomIfJoined);q.twilioService.attachUserMedia(c,s);q.twilioService.joinCall(s);i.removeClass("n-vis").addClass("vis");a.addClass("vis").removeClass("n-vis");o.addClass("n-vis").removeClass("vis");p.addClass("mck-unmuted").removeClass("mck-muted")};q.removeTracks=function(v){$applozic.each(v,function(x,y){$applozic(y).remove()})}}function TwilioService(t,g,l,j,s,e,c){var p=this;p.identity=t;p.token=g;p.callId=l;p.videoClient;p.activeRoom;p.previewMedia;p.ringTone=j;p.isCallReceived;p.callReceivedAt;p.isAudioCall=s;p.mckMessageService=e;p.isCallHost=c;var r=$applozic("#mck-msg-to");var m=$applozic("#mck-vid-icon");var a="#local-media";var f="#mck-vid-media";var b=$applozic("#local-media > video");var q=$applozic("#mck-vid-media > video");var o=$applozic("#local-media");var h=$applozic(".applozic-vid-container");var k=$applozic("#mck-sidebox");var i=$applozic("#mck-video-call-indicator");p.InitializeVideoClient=function(){p.videoClient=new Twilio.Video.Client(p.token)};p.joinCall=function(u){if(p.videoClient){p.videoClient.connect({to:p.callId}).then(p.roomJoined,function(v){console.log("Could not connect to Twilio: "+v.message)})}};p.attachUserMedia=function(v,u){if(!p.previewMedia){p.previewMedia=new Twilio.Video.LocalMedia();Twilio.Video.getUserMedia().then(function(x){p.previewMedia.addStream(x);if(v){p.previewMedia.attach(f);p.ringTone.play()}else{p.previewMedia.attach(a);o.removeClass("n-vis").addClass("vis")}},function(x){console.error("Unable to access local media",x);console.log("Unable to access Camera and Microphone")})}};p.roomJoined=function(u){console.log("room detail : "+u);p.activeRoom=u;if(!p.previewMedia){u.localParticipant.media.attach(f)}u.participants.forEach(function(v){console.log("Already in Room: '"+v.identity+"'");v.media.attach("#mck-vid-media")});u.on("participantConnected",function(v){console.log("participent- "+v.identity+"connected to the room- "+u);p.isCallReceived=true;p.callReceivedAt=new Date();console.log("callReceivedAt : "+p.callReceivedAt);p.ringTone.stop();m.addClass("n-vis");$applozic("#mck-vid-media > video").remove();$applozic("#mck-vid-media > audio").remove();u.localParticipant.media.attach(a);o.removeClass("n-vis").addClass("vis");v.media.attach(f)});u.on("participantDisconnected",function(v){console.log("Participant '"+v.identity+"' left the room");if(p.isCallHost){var y=r.val();var x=p.callReceivedAt.getTime();var z=new Date().getTime()-x;alMessageService.sendVideoCallEndMessage(l,"CALL_END",103,false,z,y,function(A){e.sendMessage(A)})}v.media.detach();p.leaveRoomIfJoined();h.addClass("n-vis").removeClass("vis");i.addClass("n-vis").removeClass("vis")});u.on("disconnected",function(){console.log("Left");u.localParticipant.media.detach();u.participants.forEach(function(v){v.media.detach()});p.activeRoom=null})};p.leaveRoomIfJoined=function n(){if(p.activeRoom){p.activeRoom.disconnect()}if(p.previewMedia){p.previewMedia.stop()}}}!function(a){if("object"==typeof exports&&"undefined"!=typeof module){module.exports=a()}else{if("function"==typeof define&&define.amd){define([],a)}else{var b;"undefined"!=typeof window?b=window:"undefined"!=typeof global?b=global:"undefined"!=typeof self&&(b=self),b.SockJS=a()}}}(function(){var a;return function b(e,j,g){function c(n,k){if(!j[n]){if(!e[n]){var m="function"==typeof require&&require;if(!k&&m){return m(n,!0)}if(h){return h(n,!0)}var o=new Error("Cannot find module '"+n+"'");throw o.code="MODULE_NOT_FOUND",o}var i=j[n]={exports:{}};e[n][0].call(i.exports,function(l){var p=e[n][1][l];return c(p?p:l)},i,i.exports,b,e,j,g)}return j[n].exports}for(var h="function"==typeof require&&require,f=0;f<g.length;f++){c(g[f])}return c}({1:[function(c,f){(function(g){var e=c("./transport-list");f.exports=c("./main")(e),"_sockjs_onload" in g&&setTimeout(g._sockjs_onload,1)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./main":14,"./transport-list":16}],2:[function(f,h){function j(){c.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}var g=f("inherits"),c=f("./event");g(j,c),h.exports=j},{"./event":4,inherits:54}],3:[function(f,h){function j(){c.call(this)}var g=f("inherits"),c=f("./eventtarget");g(j,c),j.prototype.removeAllListeners=function(e){e?delete this._listeners[e]:this._listeners={}},j.prototype.once=function(l,o){function p(){m.removeListener(l,p),k||(k=!0,o.apply(this,arguments))}var m=this,k=!1;this.on(l,p)},j.prototype.emit=function(i){var l=this._listeners[i];if(l){for(var m=Array.prototype.slice.call(arguments,1),k=0;k<l.length;k++){l[k].apply(this,m)}}},j.prototype.on=j.prototype.addListener=c.prototype.addEventListener,j.prototype.removeListener=c.prototype.removeEventListener,h.exports.EventEmitter=j},{"./eventtarget":5,inherits:54}],4:[function(c,f){function g(e){this.type=e}g.prototype.initEvent=function(h,i,j){return this.type=h,this.bubbles=i,this.cancelable=j,this.timeStamp=+new Date,this},g.prototype.stopPropagation=function(){},g.prototype.preventDefault=function(){},g.CAPTURING_PHASE=1,g.AT_TARGET=2,g.BUBBLING_PHASE=3,f.exports=g},{}],5:[function(c,f){function g(){this._listeners={}}g.prototype.addEventListener=function(h,i){h in this._listeners||(this._listeners[h]=[]);var j=this._listeners[h];-1===j.indexOf(i)&&(j=j.concat([i])),this._listeners[h]=j},g.prototype.removeEventListener=function(h,j){var k=this._listeners[h];if(k){var i=k.indexOf(j);return -1!==i?void (k.length>1?this._listeners[h]=k.slice(0,i).concat(k.slice(i+1)):delete this._listeners[h]):void 0}},g.prototype.dispatchEvent=function(j){var l=j.type,m=Array.prototype.slice.call(arguments,0);if(this["on"+l]&&this["on"+l].apply(this,m),l in this._listeners){for(var k=this._listeners[l],h=0;h<k.length;h++){k[h].apply(this,m)}}},f.exports=g},{}],6:[function(f,h){function j(e){c.call(this),this.initEvent("message",!1,!1),this.data=e}var g=f("inherits"),c=f("./event");g(j,c),h.exports=j},{"./event":4,inherits:54}],7:[function(f,h){function j(e){this._transport=e,e.on("message",this._transportMessage.bind(this)),e.on("close",this._transportClose.bind(this))}var g=f("json3"),c=f("./utils/iframe");j.prototype._transportClose=function(i,k){c.postMessage("c",g.stringify([i,k]))},j.prototype._transportMessage=function(e){c.postMessage("t",e)},j.prototype._send=function(e){this._transport.send(e)},j.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},h.exports=j},{"./utils/iframe":47,json3:55}],8:[function(m,j){var g=m("./utils/url"),c=m("./utils/event"),h=m("json3"),f=m("./facade"),p=m("./info-iframe-receiver"),k=m("./utils/iframe"),l=m("./location");j.exports=function(n,o){var q={};o.forEach(function(e){e.facadeTransport&&(q[e.facadeTransport.transportName]=e.facadeTransport)}),q[p.transportName]=p;var i;n.bootstrap_iframe=function(){var t;k.currentWindowId=l.hash.slice(1);var r=function(z){if(z.source===parent&&("undefined"==typeof i&&(i=z.origin),z.origin===i)){var y;try{y=h.parse(z.data)}catch(A){return}if(y.windowId===k.currentWindowId){switch(y.type){case"s":var x;try{x=h.parse(y.data)}catch(A){break}var C=x[0],B=x[1],u=x[2],e=x[3];if(C!==n.version){throw new Error('Incompatibile SockJS! Main site uses: "'+C+'", the iframe: "'+n.version+'".')}if(!g.isOriginEqual(u,l.href)||!g.isOriginEqual(e,l.href)){throw new Error("Can't connect to different domain from within an iframe. ("+l.href+", "+u+", "+e+")")}t=new f(new q[B](u,e));break;case"m":t._send(y.data);break;case"c":t&&t._close(),t=null}}}};c.attachEvent("message",r),k.postMessage("s")}}},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,debug:void 0,json3:55}],9:[function(f,j){function l(o,p){h.call(this);var q=this,m=+new Date;this.xo=new p("GET",o),this.xo.once("finish",function(s,x){var v,i;if(200===s){if(i=+new Date-m,x){try{v=k.parse(x)}catch(n){}}g.isObject(v)||(v={})}q.emit("finish",v,i),q.removeAllListeners()})}var h=f("events").EventEmitter,c=f("inherits"),k=f("json3"),g=f("./utils/object");c(l,h),l.prototype.close=function(){this.removeAllListeners(),this.xo.close()},j.exports=l},{"./utils/object":49,debug:void 0,events:3,inherits:54,json3:55}],10:[function(g,k){function m(i){var n=this;f.call(this),this.ir=new c(i,h),this.ir.once("finish",function(e,o){n.ir=null,n.emit("message",l.stringify([e,o]))})}var j=g("inherits"),f=g("events").EventEmitter,l=g("json3"),h=g("./transport/sender/xhr-local"),c=g("./info-ajax");j(m,f),m.transportName="iframe-info-receiver",m.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},k.exports=m},{"./info-ajax":9,"./transport/sender/xhr-local":37,events:3,inherits:54,json3:55}],11:[function(c,f){(function(p){function k(i,q){var n=this;h.call(this);var s=function(){var o=n.ifr=new g(m.transportName,q,i);o.once("message",function(u){if(u){var v;try{v=j.parse(u)}catch(y){return n.emit("finish"),void n.close()}var r=v[0],x=v[1];n.emit("finish",r,x)}n.close()}),o.once("close",function(){n.emit("finish"),n.close()})};p.document.body?s():e.attachEvent("load",s)}var h=c("events").EventEmitter,l=c("inherits"),j=c("json3"),e=c("./utils/event"),g=c("./transport/iframe"),m=c("./info-iframe-receiver");l(k,h),k.enabled=function(){return g.enabled()},k.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},f.exports=k}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,debug:void 0,events:3,inherits:54,json3:55}],12:[function(z,q){function j(c,f){var i=this;g.call(this),setTimeout(function(){i.doXhr(c,f)},0)}var g=z("events").EventEmitter,m=z("inherits"),h=z("./utils/url"),A=z("./transport/sender/xdr"),x=z("./transport/sender/xhr-cors"),y=z("./transport/sender/xhr-local"),v=z("./transport/sender/xhr-fake"),k=z("./info-iframe"),p=z("./info-ajax");m(j,g),j._getReceiver=function(c,f,i){return i.sameOrigin?new p(f,y):x.enabled?new p(f,x):A.enabled&&i.sameScheme?new p(f,A):k.enabled()?new k(c,f):new p(f,v)},j.prototype.doXhr=function(f,n){var l=this,c=h.addPath(f,"/info");this.xo=j._getReceiver(f,c,n),this.timeoutRef=setTimeout(function(){l._cleanup(!1),l.emit("finish")},j.timeout),this.xo.once("finish",function(i,o){l._cleanup(!0),l.emit("finish",i,o)})},j.prototype._cleanup=function(c){clearTimeout(this.timeoutRef),this.timeoutRef=null,!c&&this.xo&&this.xo.close(),this.xo=null},j.prototype.close=function(){this.removeAllListeners(),this._cleanup(!1)},j.timeout=8000,q.exports=j},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,debug:void 0,events:3,inherits:54}],13:[function(c,f){(function(e){f.exports=e.location||{origin:"http://localhost:80",protocol:"http",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(c,f){(function(D){function A(r,s,x){if(!(this instanceof A)){return new A(r,s,x)}if(arguments.length<1){throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present")}e.call(this),this.readyState=A.CONNECTING,this.extensions="",this.protocol="",x=x||{},x.protocols_whitelist&&E.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=x.transports;var p=x.sessionId||8;if("function"==typeof p){this._generateSessionId=p}else{if("number"!=typeof p){throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.")}this._generateSessionId=function(){return L.string(p)}}this._server=x.server||L.numberString(1000);var v=new z(r);if(!v.host||!v.protocol){throw new SyntaxError("The URL '"+r+"' is invalid")}if(v.hash){throw new SyntaxError("The URL must not contain a fragment")}if("http:"!==v.protocol&&"https:"!==v.protocol){throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+v.protocol+"' is not allowed.")}var h="https:"===v.protocol;if("https"===I.protocol&&!h){throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS")}s?Array.isArray(s)||(s=[s]):s=[];var m=s.sort();m.forEach(function(i,l){if(!i){throw new SyntaxError("The protocols entry '"+i+"' is invalid.")}if(l<m.length-1&&i===m[l+1]){throw new SyntaxError("The protocols entry '"+i+"' is duplicated.")}});var g=J.getOrigin(I.href);this._origin=g?g.toLowerCase():null,v.set("pathname",v.pathname.replace(/\/+$/,"")),this.url=v.href,this._urlInfo={nullOrigin:!q.hasDomain(),sameOrigin:J.isOriginEqual(this.url,I.href),sameScheme:J.isSchemeEqual(this.url,I.href)},this._ir=new O(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function G(g){return 1000===g||g>=3000&&4999>=g}c("./shims");var C,z=c("url-parse"),N=c("inherits"),t=c("json3"),L=c("./utils/random"),F=c("./utils/escape"),J=c("./utils/url"),H=c("./utils/event"),K=c("./utils/transport"),B=c("./utils/object"),q=c("./utils/browser"),E=c("./utils/log"),M=c("./event/event"),e=c("./event/eventtarget"),I=c("./location"),k=c("./event/close"),j=c("./event/trans-message"),O=c("./info-receiver");N(A,e),A.prototype.close=function(g,h){if(g&&!G(g)){throw new Error("InvalidAccessError: Invalid code")}if(h&&h.length>123){throw new SyntaxError("reason argument has an invalid length")}if(this.readyState!==A.CLOSING&&this.readyState!==A.CLOSED){var i=!0;this._close(g||1000,h||"Normal closure",i)}},A.prototype.send=function(g){if("string"!=typeof g&&(g=""+g),this.readyState===A.CONNECTING){throw new Error("InvalidStateError: The connection has not been established yet")}this.readyState===A.OPEN&&this._transport.send(F.quote(g))},A.version=c("./version"),A.CONNECTING=0,A.OPEN=1,A.CLOSING=2,A.CLOSED=3,A.prototype._receiveInfo=function(g,h){if(this._ir=null,!g){return void this._close(1002,"Cannot connect to server")}this._rto=this.countRTO(h),this._transUrl=g.base_url?g.base_url:this.url,g=B.extend(g,this._urlInfo);var i=C.filterToEnabled(this._transportsWhitelist,g);this._transports=i.main,this._connect()},A.prototype._connect=function(){for(var h=this._transports.shift();h;h=this._transports.shift()){if(h.needBody&&(!D.document.body||"undefined"!=typeof D.document.readyState&&"complete"!==D.document.readyState&&"interactive"!==D.document.readyState)){return this._transports.unshift(h),void H.attachEvent("load",this._connect.bind(this))}var m=this._rto*h.roundTrips||5000;this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),m);var l=J.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),g=new h(l,this._transUrl);return g.on("message",this._transportMessage.bind(this)),g.once("close",this._transportClose.bind(this)),g.transportName=h.transportName,void (this._transport=g)}this._close(2000,"All transports failed",!1)},A.prototype._transportTimeout=function(){this.readyState===A.CONNECTING&&this._transportClose(2007,"Transport timed out")},A.prototype._transportMessage=function(h){var m,s=this,l=h.slice(0,1),g=h.slice(1);switch(l){case"o":return void this._open();case"h":return void this.dispatchEvent(new M("heartbeat"))}if(g){try{m=t.parse(g)}catch(p){}}if("undefined"!=typeof m){switch(l){case"a":Array.isArray(m)&&m.forEach(function(i){s.dispatchEvent(new j(i))});break;case"m":this.dispatchEvent(new j(m));break;case"c":Array.isArray(m)&&2===m.length&&this._close(m[0],m[1],!0)}}},A.prototype._transportClose=function(g,h){return this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),G(g)||2000===g||this.readyState!==A.CONNECTING?void this._close(g,h):void this._connect()},A.prototype._open=function(){this.readyState===A.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=A.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new M("open"))):this._close(1006,"Server lost session")},A.prototype._close=function(h,l,m){var g=!1;if(this._ir&&(g=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===A.CLOSED){throw new Error("InvalidStateError: SockJS has already been closed")}this.readyState=A.CLOSING,setTimeout(function(){this.readyState=A.CLOSED,g&&this.dispatchEvent(new M("error"));var i=new k("close");i.wasClean=m||!1,i.code=h||1000,i.reason=l,this.dispatchEvent(i),this.onmessage=this.onclose=this.onerror=null}.bind(this),0)},A.prototype.countRTO=function(g){return g>100?4*g:300+g},f.exports=function(g){return C=K(g),c("./iframe-bootstrap")(A,g),A}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,debug:void 0,inherits:54,json3:55,"url-parse":56}],15:[function(){function I(c){var f=+c;return f!==f?f=0:0!==f&&f!==1/0&&f!==-(1/0)&&(f=(f>0||-1)*Math.floor(Math.abs(f))),f}function Z(c){return c>>>0}function P(){}var L,V=Array.prototype,N=Object.prototype,J=Function.prototype,ad=String.prototype,G=V.slice,ab=N.toString,R=function(c){return"[object Function]"===N.toString.call(c)},Y=function(c){return"[object Array]"===ab.call(c)},W=function(c){return"[object String]"===ab.call(c)},aa=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(c){return !1}}();L=aa?function(c,g,h,f){!f&&g in c||Object.defineProperty(c,g,{configurable:!0,enumerable:!1,writable:!0,value:h})}:function(c,g,h,f){!f&&g in c||(c[g]=h)};var M=function(f,g,h){for(var c in g){N.hasOwnProperty.call(g,c)&&L(f,c,g[c],h)}},F=function(c){if(null==c){throw new TypeError("can't convert "+c+" to object")}return Object(c)};M(J,{bind:function(h){var m=this;if(!R(m)){throw new TypeError("Function.prototype.bind called on incompatible "+m)}for(var l=G.call(arguments,1),g=function(){if(this instanceof p){var c=m.apply(this,l.concat(G.call(arguments)));return Object(c)===c?c:this}return m.apply(h,l.concat(G.call(arguments)))},n=Math.max(0,m.length-l.length),j=[],f=0;n>f;f++){j.push("$"+f)}var p=Function("binder","return function ("+j.join(",")+"){ return binder.apply(this, arguments); }")(g);return m.prototype&&(P.prototype=m.prototype,p.prototype=new P,P.prototype=null),p}}),M(Array,{isArray:Y});var Q=Object("a"),ac="a"!==Q[0]||!(0 in Q),A=function(c){var f=!0,g=!0;return c&&(c.call("foo",function(e,i,h){"object"!=typeof h&&(f=!1)}),c.call([1],function(){g="string"==typeof this},"x")),!!c&&f&&g};M(V,{forEach:function(f){var h=F(this),l=ac&&W(this)?this.split(""):h,g=arguments[1],c=-1,j=l.length>>>0;if(!R(f)){throw new TypeError}for(;++c<j;){c in l&&f.call(g,l[c],c,h)}}},!A(V.forEach));var X=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);M(V,{indexOf:function(g){var h=ac&&W(this)?this.split(""):F(this),f=h.length>>>0;if(!f){return -1}var c=0;for(arguments.length>1&&(c=I(arguments[1])),c=c>=0?c:Math.max(0,f+c);f>c;c++){if(c in h&&h[c]===g){return c}}return -1}},X);var D=ad.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?!function(){var c=void 0===/()??/.exec("")[1];ad.split=function(i,e){var g=this;if(void 0===i&&0===e){return[]}if("[object RegExp]"!==ab.call(i)){return D.call(this,i,e)}var y,v,x,j,p=[],m=(i.ignoreCase?"i":"")+(i.multiline?"m":"")+(i.extended?"x":"")+(i.sticky?"y":""),t=0;for(i=new RegExp(i.source,m+"g"),g+="",c||(y=new RegExp("^"+i.source+"$(?!\\s)",m)),e=void 0===e?-1>>>0:Z(e);(v=i.exec(g))&&(x=v.index+v[0].length,!(x>t&&(p.push(g.slice(t,v.index)),!c&&v.length>1&&v[0].replace(y,function(){for(var f=1;f<arguments.length-2;f++){void 0===arguments[f]&&(v[f]=void 0)}}),v.length>1&&v.index<g.length&&V.push.apply(p,v.slice(1)),j=v[0].length,t=x,p.length>=e)));){i.lastIndex===v.index&&i.lastIndex++}return t===g.length?(j||!i.test(""))&&p.push(""):p.push(g.slice(t)),p.length>e?p.slice(0,e):p}}():"0".split(void 0,0).length&&(ad.split=function(c,f){return void 0===c&&0===f?[]:D.call(this,c,f)});var B="	\n\x0B\f\r   ᠎             　\u2028\u2029\ufeff",ae="",H="["+B+"]",q=new RegExp("^"+H+H+"*"),z=new RegExp(H+H+"*$"),k=ad.trim&&(B.trim()||!ae.trim());M(ad,{trim:function(){if(void 0===this||null===this){throw new TypeError("can't convert "+this+" to object")}return String(this).replace(q,"").replace(z,"")}},k);var U=ad.substr,K="".substr&&"b"!=="0b".substr(-1);M(ad,{substr:function(c,f){return U.call(this,0>c&&(c=this.length+c)<0?0:c,f)}},K)},{}],16:[function(c,f){f.exports=[c("./transport/websocket"),c("./transport/xhr-streaming"),c("./transport/xdr-streaming"),c("./transport/eventsource"),c("./transport/lib/iframe-wrap")(c("./transport/eventsource")),c("./transport/htmlfile"),c("./transport/lib/iframe-wrap")(c("./transport/htmlfile")),c("./transport/xhr-polling"),c("./transport/xdr-polling"),c("./transport/lib/iframe-wrap")(c("./transport/xhr-polling")),c("./transport/jsonp-polling")]},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(c,f){(function(h){function e(i,s,x,l){var u=this;k.call(this),setTimeout(function(){u._start(i,s,x,l)},0)}var k=c("events").EventEmitter,g=c("inherits"),v=c("../../utils/event"),q=c("../../utils/url"),t=h.XMLHttpRequest;g(e,k),e.prototype._start=function(u,y,B,s){var z=this;try{this.xhr=new t}catch(A){}if(!this.xhr){return this.emit("finish",0,"no xhr support"),void this._cleanup()}y=q.addQuery(y,"t="+ +new Date),this.unloadRef=v.unloadAdd(function(){z._cleanup(!0)});try{this.xhr.open(u,y,!0),this.timeout&&"timeout" in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){z.emit("finish",0,""),z._cleanup(!1)})}catch(r){return this.emit("finish",0,""),void this._cleanup(!1)}if(s&&s.noCredentials||!e.supportsCORS||(this.xhr.withCredentials="true"),s&&s.headers){for(var x in s.headers){this.xhr.setRequestHeader(x,s.headers[x])}}this.xhr.onreadystatechange=function(){if(z.xhr){var i,o,C=z.xhr;switch(C.readyState){case 3:try{o=C.status,i=C.responseText}catch(l){}1223===o&&(o=204),200===o&&i&&i.length>0&&z.emit("chunk",o,i);break;case 4:o=C.status,1223===o&&(o=204),(12005===o||12029===o)&&(o=0),z.emit("finish",o,C.responseText),z._cleanup(!1)}}};try{z.xhr.send(B)}catch(r){z.emit("finish",0,""),z._cleanup(!1)}},e.prototype._cleanup=function(i){if(this.xhr){if(this.removeAllListeners(),v.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),i){try{this.xhr.abort()}catch(l){}}this.unloadRef=this.xhr=null}},e.prototype.close=function(){this._cleanup(!0)},e.enabled=!!t;var p=["Active"].concat("Object").join("X");!e.enabled&&p in h&&(t=function(){try{return new h[p]("Microsoft.XMLHTTP")}catch(i){return null}},e.enabled=!!new t);var j=!1;try{j="withCredentials" in new t}catch(m){}e.supportsCORS=j,f.exports=e}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/event":46,"../../utils/url":52,debug:void 0,events:3,inherits:54}],18:[function(c,f){(function(e){f.exports=e.EventSource}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(c,f){(function(e){f.exports=e.WebSocket||e.MozWebSocket}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],20:[function(g,k){function m(e){if(!m.enabled()){throw new Error("Transport created when disabled")}f.call(this,e,"/eventsource",l,h)}var j=g("inherits"),f=g("./lib/ajax-based"),l=g("./receiver/eventsource"),h=g("./sender/xhr-cors"),c=g("eventsource");j(m,f),m.enabled=function(){return !!c},m.transportName="eventsource",m.roundTrips=2,k.exports=m},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,eventsource:18,inherits:54}],21:[function(f,j){function l(e){if(!c.enabled){throw new Error("Transport created when disabled")}g.call(this,e,"/htmlfile",c,k)}var h=f("inherits"),c=f("./receiver/htmlfile"),k=f("./sender/xhr-local"),g=f("./lib/ajax-based");h(l,g),l.enabled=function(e){return c.enabled&&e.sameOrigin},l.transportName="htmlfile",l.roundTrips=2,j.exports=l},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,inherits:54}],22:[function(x,m){function h(l,u,o){if(!h.enabled()){throw new Error("Transport created when disabled")}g.call(this);var c=this;this.origin=q.getOrigin(o),this.baseUrl=o,this.transUrl=u,this.transport=l,this.windowId=j.string(8);var n=q.addPath(o,"/iframe.html")+"#"+this.windowId;this.iframeObj=v.createIframe(n,function(e){c.emit("close",1006,"Unable to load an iframe ("+e+")"),c.close()}),this.onmessageCallback=this._message.bind(this),p.attachEvent("message",this.onmessageCallback)}var f=x("inherits"),k=x("json3"),g=x("events").EventEmitter,y=x("../version"),q=x("../utils/url"),v=x("../utils/iframe"),p=x("../utils/event"),j=x("../utils/random");f(h,g),h.prototype.close=function(){if(this.removeAllListeners(),this.iframeObj){p.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(c){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},h.prototype._message=function(c){if(q.isOriginEqual(c.origin,this.origin)){var l;try{l=k.parse(c.data)}catch(o){return}if(l.windowId===this.windowId){switch(l.type){case"s":this.iframeObj.loaded(),this.postMessage("s",k.stringify([y,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",l.data);break;case"c":var i;try{i=k.parse(l.data)}catch(o){return}this.emit("close",i[0],i[1]),this.close()}}}},h.prototype.postMessage=function(c,i){this.iframeObj.post(k.stringify({windowId:this.windowId,type:c,data:i||""}),this.origin)},h.prototype.send=function(c){this.postMessage("m",c)},h.enabled=function(){return v.iframeEnabled},h.transportName="iframe",h.roundTrips=2,m.exports=h},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,debug:void 0,events:3,inherits:54,json3:55}],23:[function(c,f){(function(l){function j(i){if(!j.enabled()){throw new Error("Transport created when disabled")}k.call(this,i,"/jsonp",e,h)}var g=c("inherits"),k=c("./lib/sender-receiver"),h=c("./receiver/jsonp"),e=c("./sender/jsonp");g(j,k),j.enabled=function(){return !!l.document},j.transportName="jsonp-polling",j.roundTrips=1,j.needBody=!0,f.exports=j}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,inherits:54}],24:[function(f,j){function l(e){return function(t,u,q){var o={};"string"==typeof u&&(o.headers={"Content-type":"text/plain"});var p=k.addPath(t,"/xhr_send"),m=new e("POST",p,u,o);return m.once("finish",function(i){return m=null,200!==i&&204!==i?q(new Error("http status "+i)):void q()}),function(){m.close(),m=null;var i=new Error("Aborted");i.code=1000,q(i)}}}function h(n,p,o,m){g.call(this,n,p,l(m),o,m)}var c=f("inherits"),k=f("../../utils/url"),g=f("./sender-receiver");c(h,g),j.exports=h},{"../../utils/url":52,"./sender-receiver":28,debug:void 0,inherits:54}],25:[function(f,h){function j(i,k){c.call(this),this.sendBuffer=[],this.sender=k,this.url=i}var g=f("inherits"),c=f("events").EventEmitter;g(j,c),j.prototype.send=function(e){this.sendBuffer.push(e),this.sendStop||this.sendSchedule()},j.prototype.sendScheduleWait=function(){var i,k=this;this.sendStop=function(){k.sendStop=null,clearTimeout(i)},i=setTimeout(function(){k.sendStop=null,k.sendSchedule()},25)},j.prototype.sendSchedule=function(){var i=this;if(this.sendBuffer.length>0){var k="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,k,function(l){i.sendStop=null,l?(i.emit("close",l.code||1006,"Sending error: "+l),i._cleanup()):i.sendScheduleWait()}),this.sendBuffer=[]}},j.prototype._cleanup=function(){this.removeAllListeners()},j.prototype.stop=function(){this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},h.exports=j},{debug:void 0,events:3,inherits:54}],26:[function(c,f){(function(j){var g=c("inherits"),e=c("../iframe"),h=c("../../utils/object");f.exports=function(i){function k(l,m){e.call(this,i.transportName,l,m)}return g(k,e),k.enabled=function(n,m){if(!j.document){return !1}var l=h.extend({},m);return l.sameOrigin=!0,i.enabled(l)&&e.enabled()},k.transportName="iframe-"+i.transportName,k.needBody=!0,k.roundTrips=e.roundTrips+i.roundTrips-1,k.facadeTransport=i,k}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/object":49,"../iframe":22,inherits:54}],27:[function(f,h){function j(i,k,l){c.call(this),this.Receiver=i,this.receiveUrl=k,this.AjaxObject=l,this._scheduleReceiver()}var g=f("inherits"),c=f("events").EventEmitter;g(j,c),j.prototype._scheduleReceiver=function(){var i=this,k=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);k.on("message",function(l){i.emit("message",l)}),k.once("close",function(l,e){i.poll=k=null,i.pollIsClosing||("network"===e?i._scheduleReceiver():(i.emit("close",l||1006,e),i.removeAllListeners()))})},j.prototype.abort=function(){this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},h.exports=j},{debug:void 0,events:3,inherits:54}],28:[function(f,j){function l(o,q,v,p,i){var m=c.addPath(o,q),s=this;k.call(this,o,v),this.poll=new g(p,m,i),this.poll.on("message",function(e){s.emit("message",e)}),this.poll.once("close",function(n,r){s.poll=null,s.emit("close",n,r),s.close()})}var h=f("inherits"),c=f("../../utils/url"),k=f("./buffered-sender"),g=f("./polling");h(l,k),l.prototype.close=function(){this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null),this.stop()},j.exports=l},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,debug:void 0,inherits:54}],29:[function(f,h){function k(i){c.call(this);var l=this,m=this.es=new j(i);m.onmessage=function(e){l.emit("message",decodeURI(e.data))},m.onerror=function(e){var n=2!==m.readyState?"network":"permanent";l._cleanup(),l._close(n)}}var g=f("inherits"),c=f("events").EventEmitter,j=f("eventsource");g(k,c),k.prototype.abort=function(){this._cleanup(),this._close("user")},k.prototype._cleanup=function(){var e=this.es;e&&(e.onmessage=e.onerror=null,e.close(),this.es=null)},k.prototype._close=function(i){var l=this;setTimeout(function(){l.emit("close",null,i),l.removeAllListeners()},200)},h.exports=k},{debug:void 0,events:3,eventsource:18,inherits:54}],30:[function(c,f){(function(h){function e(n){p.call(this);var o=this;g.polluteGlobalNamespace(),this.id="a"+q.string(6),n=t.addQuery(n,"c="+decodeURIComponent(g.WPrefix+"."+this.id));var l=e.htmlfileEnabled?g.createHtmlfile:g.createIframe;h[g.WPrefix][this.id]={start:function(){o.iframeObj.loaded()},message:function(i){o.emit("message",i)},stop:function(){o._cleanup(),o._close("network")}},this.iframeObj=l(n,function(){o._cleanup(),o._close("permanent")})}var k=c("inherits"),g=c("../../utils/iframe"),t=c("../../utils/url"),p=c("events").EventEmitter,q=c("../../utils/random");k(e,p),e.prototype.abort=function(){this._cleanup(),this._close("user")},e.prototype._cleanup=function(){this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete h[g.WPrefix][this.id]},e.prototype._close=function(i){this.emit("close",null,i),this.removeAllListeners()},e.htmlfileEnabled=!1;var m=["Active"].concat("Object").join("X");if(m in h){try{e.htmlfileEnabled=!!new h[m]("htmlfile")}catch(j){}}e.enabled=e.htmlfileEnabled||g.iframeEnabled,f.exports=e}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:void 0,events:3,inherits:54}],31:[function(c,f){(function(p){function k(i){var o=this;m.call(this),h.polluteGlobalNamespace(),this.id="a"+l.string(6);var n=e.addQuery(i,"c="+encodeURIComponent(h.WPrefix+"."+this.id));p[h.WPrefix][this.id]=this._callback.bind(this),this._createScript(n),this.timeoutId=setTimeout(function(){o._abort(new Error("JSONP script loaded abnormally (timeout)"))},k.timeout)}var h=c("../../utils/iframe"),l=c("../../utils/random"),j=c("../../utils/browser"),e=c("../../utils/url"),g=c("inherits"),m=c("events").EventEmitter;g(k,m),k.prototype.abort=function(){if(p[h.WPrefix][this.id]){var i=new Error("JSONP user aborted read");i.code=1000,this._abort(i)}},k.timeout=35000,k.scriptErrorTimeout=1000,k.prototype._callback=function(i){this._cleanup(),this.aborting||(i&&this.emit("message",i),this.emit("close",null,"network"),this.removeAllListeners())},k.prototype._abort=function(i){this._cleanup(),this.aborting=!0,this.emit("close",i.code,i.message),this.removeAllListeners()},k.prototype._cleanup=function(){if(clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var i=this.script;i.parentNode.removeChild(i),i.onreadystatechange=i.onerror=i.onload=i.onclick=null,this.script=null}delete p[h.WPrefix][this.id]},k.prototype._scriptError=function(){var i=this;this.errorTimer||(this.errorTimer=setTimeout(function(){i.loadedOkay||i._abort(new Error("JSONP script loaded abnormally (onerror)"))},k.scriptErrorTimeout))},k.prototype._createScript=function(s){var x,v=this,q=this.script=p.document.createElement("script");if(q.id="a"+l.string(8),q.src=s,q.type="text/javascript",q.charset="UTF-8",q.onerror=this._scriptError.bind(this),q.onload=function(){v._abort(new Error("JSONP script loaded abnormally (onload)"))},q.onreadystatechange=function(){if(/loaded|closed/.test(q.readyState)){if(q&&q.htmlFor&&q.onclick){v.loadedOkay=!0;try{q.onclick()}catch(i){}}q&&v._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},"undefined"==typeof q.async&&p.document.attachEvent){if(j.isOpera()){x=this.script2=p.document.createElement("script"),x.text="try{var a = document.getElementById('"+q.id+"'); if(a)a.onerror();}catch(x){};",q.async=x.async=!1}else{try{q.htmlFor=q.id,q.event="onclick"}catch(n){}q.async=!0}}"undefined"!=typeof q.async&&(q.async=!0);var o=p.document.getElementsByTagName("head")[0];o.insertBefore(q,o.firstChild),x&&o.insertBefore(x,o.firstChild)},f.exports=k}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:void 0,events:3,inherits:54}],32:[function(f,h){function j(i,k){c.call(this);var l=this;this.bufferPosition=0,this.xo=new k("POST",i,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",function(m,o){l._chunkHandler(m,o),l.xo=null;var n=200===m?"network":"permanent";l.emit("close",null,n),l._cleanup()})}var g=f("inherits"),c=f("events").EventEmitter;g(j,c),j.prototype._chunkHandler=function(l,o){if(200===l&&o){for(var p=-1;;this.bufferPosition+=p+1){var m=o.slice(this.bufferPosition);if(p=m.indexOf("\n"),-1===p){break}var k=m.slice(0,p);k&&this.emit("message",k)}}},j.prototype._cleanup=function(){this.removeAllListeners()},j.prototype.abort=function(){this.xo&&(this.xo.close(),this.emit("close",null,"user"),this.xo=null),this._cleanup()},h.exports=j},{debug:void 0,events:3,inherits:54}],33:[function(c,f){(function(m){function k(i){try{return m.document.createElement('<iframe name="'+i+'">')}catch(o){var n=m.document.createElement("iframe");return n.name=i,n}}function h(){l=m.document.createElement("form"),l.style.display="none",l.style.position="absolute",l.method="POST",l.enctype="application/x-www-form-urlencoded",l.acceptCharset="UTF-8",j=m.document.createElement("textarea"),j.name="d",l.appendChild(j),m.document.body.appendChild(l)}var l,j,e=c("../../utils/random"),g=c("../../utils/url");f.exports=function(o,r,u){l||h();var s="a"+e.string(8);l.target=s,l.action=g.addQuery(g.addPath(o,"/jsonp_send"),"i="+s);var i=k(s);i.id=s,i.style.display="none",l.appendChild(i);try{j.value=r}catch(q){}l.submit();var p=function(n){i.onerror&&(i.onreadystatechange=i.onerror=i.onload=null,setTimeout(function(){i.parentNode.removeChild(i),i=null},500),j.value="",u(n))};return i.onerror=function(){p()},i.onload=function(){p()},i.onreadystatechange=function(n){"complete"===i.readyState&&p()},function(){p(new Error("Aborted"))}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/random":50,"../../utils/url":52,debug:void 0}],34:[function(c,f){(function(m){function k(i,p,q){var o=this;h.call(this),setTimeout(function(){o._start(i,p,q)},0)}var h=c("events").EventEmitter,l=c("inherits"),j=c("../../utils/event"),e=c("../../utils/browser"),g=c("../../utils/url");l(k,h),k.prototype._start=function(q,u,s){var p=this,v=new m.XDomainRequest;u=g.addQuery(u,"t="+ +new Date),v.onerror=function(){p._error()},v.ontimeout=function(){p._error()},v.onprogress=function(){p.emit("chunk",200,v.responseText)},v.onload=function(){p.emit("finish",200,v.responseText),p._cleanup(!1)},this.xdr=v,this.unloadRef=j.unloadAdd(function(){p._cleanup(!0)});try{this.xdr.open(q,u),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(s)}catch(n){this._error()}},k.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},k.prototype._cleanup=function(i){if(this.xdr){if(this.removeAllListeners(),j.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,i){try{this.xdr.abort()}catch(n){}}this.unloadRef=this.xdr=null}},k.prototype.close=function(){this._cleanup(!0)},k.enabled=!(!m.XDomainRequest||!e.hasDomain()),f.exports=k}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,debug:void 0,events:3,inherits:54}],35:[function(f,h){function j(i,l,m,k){c.call(this,i,l,m,k)}var g=f("inherits"),c=f("../driver/xhr");g(j,c),j.enabled=c.enabled&&c.supportsCORS,h.exports=j},{"../driver/xhr":17,inherits:54}],36:[function(f,h){function j(){var e=this;g.call(this),this.to=setTimeout(function(){e.emit("finish",200,"{}")},j.timeout)}var g=f("events").EventEmitter,c=f("inherits");c(j,g),j.prototype.close=function(){clearTimeout(this.to)},j.timeout=2000,h.exports=j},{events:3,inherits:54}],37:[function(f,h){function j(i,k,l){c.call(this,i,k,l,{noCredentials:!0})}var g=f("inherits"),c=f("../driver/xhr");g(j,c),j.enabled=c.enabled,h.exports=j},{"../driver/xhr":17,inherits:54}],38:[function(g,k){function m(i){if(!m.enabled()){throw new Error("Transport created when disabled")}h.call(this);var n=this,p=f.addPath(i,"/websocket");p="https"===p.slice(0,5)?"wss"+p.slice(5):"ws"+p.slice(4),this.url=p,this.ws=new c(this.url),this.ws.onmessage=function(e){n.emit("message",e.data)},this.unloadRef=j.unloadAdd(function(){n.ws.close()}),this.ws.onclose=function(e){n.emit("close",e.code,e.reason),n._cleanup()},this.ws.onerror=function(e){n.emit("close",1006,"WebSocket connection broken"),n._cleanup()}}var j=g("../utils/event"),f=g("../utils/url"),l=g("inherits"),h=g("events").EventEmitter,c=g("./driver/websocket");l(m,h),m.prototype.send=function(i){var n="["+i+"]";this.ws.send(n)},m.prototype.close=function(){this._cleanup(),this.ws&&this.ws.close()},m.prototype._cleanup=function(){var e=this.ws;e&&(e.onmessage=e.onclose=e.onerror=null),j.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},m.enabled=function(){return !!c},m.transportName="websocket",m.roundTrips=2,k.exports=m},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,debug:void 0,events:3,inherits:54}],39:[function(g,k){function m(e){if(!c.enabled){throw new Error("Transport created when disabled")}f.call(this,e,"/xhr",h,c)}var j=g("inherits"),f=g("./lib/ajax-based"),l=g("./xdr-streaming"),h=g("./receiver/xhr"),c=g("./sender/xdr");j(m,f),m.enabled=l.enabled,m.transportName="xdr-polling",m.roundTrips=2,k.exports=m},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,inherits:54}],40:[function(f,j){function l(e){if(!g.enabled){throw new Error("Transport created when disabled")}c.call(this,e,"/xhr_streaming",k,g)}var h=f("inherits"),c=f("./lib/ajax-based"),k=f("./receiver/xhr"),g=f("./sender/xdr");h(l,c),l.enabled=function(e){return e.cookie_needed||e.nullOrigin?!1:g.enabled&&e.sameScheme},l.transportName="xdr-streaming",l.roundTrips=2,j.exports=l},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,inherits:54}],41:[function(g,k){function m(e){if(!c.enabled&&!h.enabled){throw new Error("Transport created when disabled")}f.call(this,e,"/xhr",l,h)}var j=g("inherits"),f=g("./lib/ajax-based"),l=g("./receiver/xhr"),h=g("./sender/xhr-cors"),c=g("./sender/xhr-local");j(m,f),m.enabled=function(e){return e.nullOrigin?!1:c.enabled&&e.sameOrigin?!0:h.enabled},m.transportName="xhr-polling",m.roundTrips=2,k.exports=m},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:54}],42:[function(c,f){(function(p){function k(i){if(!g.enabled&&!e.enabled){throw new Error("Transport created when disabled")}l.call(this,i,"/xhr_streaming",j,e)}var h=c("inherits"),l=c("./lib/ajax-based"),j=c("./receiver/xhr"),e=c("./sender/xhr-cors"),g=c("./sender/xhr-local"),m=c("../utils/browser");h(k,l),k.enabled=function(i){return i.nullOrigin?!1:m.isOpera()?!1:e.enabled},k.transportName="xhr-streaming",k.roundTrips=2,k.needBody=!!p.document,f.exports=k}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:54}],43:[function(c,f){(function(e){f.exports.randomBytes=e.crypto&&e.crypto.getRandomValues?function(g){var h=new Uint8Array(g);return e.crypto.getRandomValues(h),h}:function(g){for(var h=new Array(g),i=0;g>i;i++){h[i]=Math.floor(256*Math.random())}return h}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],44:[function(c,f){(function(e){f.exports={isOpera:function(){return e.navigator&&/opera/i.test(e.navigator.userAgent)},isKonqueror:function(){return e.navigator&&/konqueror/i.test(e.navigator.userAgent)},hasDomain:function(){if(!e.document){return !0}try{return !!e.document.domain}catch(g){return !1}}}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(f,h){var k,g=f("json3"),c=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,j=function(i){var m,o={},l=[];for(m=0;65536>m;m++){l.push(String.fromCharCode(m))}return i.lastIndex=0,l.join("").replace(i,function(e){return o[e]="\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4),""}),i.lastIndex=0,o};h.exports={quote:function(i){var l=g.stringify(i);return c.lastIndex=0,c.test(l)?(k||(k=j(c)),l.replace(c,function(e){return k[e]})):l}}},{json3:55}],46:[function(c,f){(function(l){var j=c("./random"),g={},k=!1,h=l.chrome&&l.chrome.app&&l.chrome.app.runtime;f.exports={attachEvent:function(i,m){"undefined"!=typeof l.addEventListener?l.addEventListener(i,m,!1):l.document&&l.attachEvent&&(l.document.attachEvent("on"+i,m),l.attachEvent("on"+i,m))},detachEvent:function(i,m){"undefined"!=typeof l.addEventListener?l.removeEventListener(i,m,!1):l.document&&l.detachEvent&&(l.document.detachEvent("on"+i,m),l.detachEvent("on"+i,m))},unloadAdd:function(i){if(h){return null}var m=j.string(8);return g[m]=i,k&&setTimeout(this.triggerUnloadCallbacks,0),m},unloadDel:function(i){i in g&&delete g[i]},triggerUnloadCallbacks:function(){for(var i in g){g[i](),delete g[i]}}};var e=function(){k||(k=!0,f.exports.triggerUnloadCallbacks())};h||f.exports.attachEvent("unload",e)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./random":50}],47:[function(c,f){(function(j){var g=c("./event"),e=c("json3"),h=c("./browser");f.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){f.exports.WPrefix in j||(j[f.exports.WPrefix]={})},postMessage:function(i,k){j.parent!==j&&j.parent.postMessage(e.stringify({windowId:f.exports.currentWindowId,type:i,data:k||""}),"*")},createIframe:function(x,p){var n,k,y=j.document.createElement("iframe"),r=function(){clearTimeout(n);try{y.onload=null}catch(i){}y.onerror=null},v=function(){y&&(r(),setTimeout(function(){y&&y.parentNode.removeChild(y),y=null},0),g.unloadDel(k))},q=function(i){y&&(v(),p(i))},m=function(i,l){try{setTimeout(function(){y&&y.contentWindow&&y.contentWindow.postMessage(i,l)},0)}catch(o){}};return y.src=x,y.style.display="none",y.style.position="absolute",y.onerror=function(){q("onerror")},y.onload=function(){clearTimeout(n),n=setTimeout(function(){q("onload timeout")},2000)},j.document.body.appendChild(y),n=setTimeout(function(){q("timeout")},15000),k=g.unloadAdd(v),{post:m,cleanup:v,loaded:r}},createHtmlfile:function(B,q){var m,C,z,A=["Active"].concat("Object").join("X"),y=new j[A]("htmlfile"),n=function(){clearTimeout(m),z.onerror=null},v=function(){y&&(n(),g.unloadDel(C),z.parentNode.removeChild(z),z=y=null,CollectGarbage())},r=function(i){y&&(v(),q(i))},x=function(i,l){try{setTimeout(function(){z&&z.contentWindow&&z.contentWindow.postMessage(i,l)},0)}catch(o){}};y.open(),y.write('<html><script>document.domain="'+j.document.domain+'";<\/script></html>'),y.close(),y.parentWindow[f.exports.WPrefix]=j[f.exports.WPrefix];var k=y.createElement("div");return y.body.appendChild(k),z=y.createElement("iframe"),k.appendChild(z),z.src=B,z.onerror=function(){r("onerror")},m=setTimeout(function(){r("timeout")},15000),C=g.unloadAdd(v),{post:x,cleanup:v,loaded:n}}},f.exports.iframeEnabled=!1,j.document&&(f.exports.iframeEnabled=("function"==typeof j.postMessage||"object"==typeof j.postMessage)&&!h.isKonqueror())}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./browser":44,"./event":46,debug:void 0,json3:55}],48:[function(c,f){(function(e){var g={};["log","debug","warn"].forEach(function(i){var h=e.console&&e.console[i]&&e.console[i].apply;g[i]=h?function(){return e.console[i].apply(e.console,arguments)}:"log"===i?function(){}:g.log}),f.exports=g}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],49:[function(c,f){f.exports={isObject:function(g){var h=typeof g;return"function"===h||"object"===h&&!!g},extend:function(h){if(!this.isObject(h)){return h}for(var k,l,j=1,g=arguments.length;g>j;j++){k=arguments[j];for(l in k){Object.prototype.hasOwnProperty.call(k,l)&&(h[l]=k[l])}}return h}}},{}],50:[function(c,g){var h=c("crypto"),f="abcdefghijklmnopqrstuvwxyz012345";g.exports={string:function(k){for(var m=f.length,j=h.randomBytes(k),n=[],l=0;k>l;l++){n.push(f.substr(j[l]%m,1))}return n.join("")},number:function(e){return Math.floor(Math.random()*e)},numberString:function(i){var j=(""+(i-1)).length,k=new Array(j+1).join("0");return(k+this.number(i)).slice(-j)}}},{crypto:43}],51:[function(c,f){f.exports=function(e){return{filterToEnabled:function(h,i){var g={main:[],facade:[]};return h?"string"==typeof h&&(h=[h]):h=[],e.forEach(function(j){j&&("websocket"!==j.transportName||i.websocket!==!1)&&(h.length&&-1===h.indexOf(j.transportName)||j.enabled(i)&&(g.main.push(j),j.facadeTransport&&g.facade.push(j.facadeTransport)))}),g}}}},{debug:void 0}],52:[function(c,f){var g=c("url-parse");f.exports={getOrigin:function(h){if(!h){return null}var j=new g(h);if("file:"===j.protocol){return null}var i=j.port;return i||(i="https:"===j.protocol?"443":"80"),j.protocol+"//"+j.hostname+":"+i},isOriginEqual:function(h,i){var j=this.getOrigin(h)===this.getOrigin(i);return j},isSchemeEqual:function(h,i){return h.split(":")[0]===i.split(":")[0]},addPath:function(h,i){var j=h.split("?");return j[0]+i+(j[1]?"?"+j[1]:"")},addQuery:function(h,i){return h+(-1===h.indexOf("?")?"?"+i:"&"+i)}}},{debug:void 0,"url-parse":56}],53:[function(c,f){f.exports="1.0.3"},{}],54:[function(c,f){f.exports="function"==typeof Object.create?function(g,h){g.super_=h,g.prototype=Object.create(h.prototype,{constructor:{value:g,enumerable:!1,writable:!0,configurable:!0}})}:function(g,h){g.super_=h;var i=function(){};i.prototype=h.prototype,g.prototype=new i,g.prototype.constructor=g}},{}],55:[function(f,g,c){(function(h){(function(){function k(ao,aC){function au(E){if(au[E]!==av){return au[E]}var x;if("bug-string-char-index"==E){x="a"!="a"[0]}else{if("json"==E){x=au("json-stringify")&&au("json-parse")}else{var F,C='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==E){var D=aC.stringify,o="function"==typeof D&&aA;if(o){(F=function(){return 1}).toJSON=F;try{o="0"===D(0)&&"0"===D(new ap)&&'""'==D(new at)&&D(ak)===av&&D(av)===av&&D()===av&&"1"===D(F)&&"[1]"==D([F])&&"[null]"==D([av])&&"null"==D(null)&&"[null,null,null]"==D([av,ak,null])&&D({a:[F,!0,!1,null,"\x00\b\n\f\r	"]})==C&&"1"===D(null,F)&&"[\n 1,\n 2\n]"==D([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==D(new aE(-8640000000000000))&&'"+275760-09-13T00:00:00.000Z"'==D(new aE(8640000000000000))&&'"-000001-01-01T00:00:00.000Z"'==D(new aE(-62198755200000))&&'"1969-12-31T23:59:59.999Z"'==D(new aE(-1))}catch(A){o=!1}}x=o}if("json-parse"==E){var y=aC.parse;if("function"==typeof y){try{if(0===y("0")&&!y(!1)){F=y(C);var B=5==F.a.length&&1===F.a[0];if(B){try{B=!y('"	"')}catch(A){}if(B){try{B=1!==y("01")}catch(A){}}if(B){try{B=1!==y("1.")}catch(A){}}}}}catch(A){B=!1}}x=B}}}return au[E]=!!x}ao||(ao=t.Object()),aC||(aC=t.Object());var ap=ao.Number||t.Number,at=ao.String||t.String,aG=ao.Object||t.Object,aE=ao.Date||t.Date,aw=ao.SyntaxError||t.SyntaxError,aB=ao.TypeError||t.TypeError,az=ao.Math||t.Math,aD=ao.JSON||t.JSON;"object"==typeof aD&&aD&&(aC.stringify=aD.stringify,aC.parse=aD.parse);var ar,an,av,aF=aG.prototype,ak=aF.toString,aA=new aE(-3509827334573292);try{aA=-109252==aA.getUTCFullYear()&&0===aA.getUTCMonth()&&1===aA.getUTCDate()&&10==aA.getUTCHours()&&37==aA.getUTCMinutes()&&6==aA.getUTCSeconds()&&708==aA.getUTCMilliseconds()}catch(am){}if(!au("json")){var al="[object Function]",aH="[object Date]",af="[object Number]",z="[object String]",V="[object Array]",u="[object Boolean]",ay=au("bug-string-char-index");if(!aA){var ah=az.floor,X=[0,31,59,90,120,151,181,212,243,273,304,334],aj=function(l,o){return X[o]+365*(l-1970)+ah((l-1969+(o=+(o>1)))/4)-ah((l-1901+o)/100)+ah((l-1601+o)/400)}}if((ar=aF.hasOwnProperty)||(ar=function(l){var o,x={};return(x.__proto__=null,x.__proto__={toString:1},x).toString!=ak?ar=function(y){var A=this.__proto__,B=y in (this.__proto__=null,this);return this.__proto__=A,B}:(o=x.constructor,ar=function(y){var A=(this.constructor||o).prototype;return y in this&&!(y in A&&this[y]===A[y])}),x=null,ar.call(this,l)}),an=function(x,A){var C,y,l,B=0;(C=function(){this.valueOf=0}).prototype.valueOf=0,y=new C;for(l in y){ar.call(y,l)&&B++}return C=y=null,B?an=2==B?function(D,F){var G,E={},o=ak.call(D)==al;for(G in D){o&&"prototype"==G||ar.call(E,G)||!(E[G]=1)||!ar.call(D,G)||F(G)}}:function(D,F){var G,E,o=ak.call(D)==al;for(G in D){o&&"prototype"==G||!ar.call(D,G)||(E="constructor"===G)||F(G)}(E||ar.call(D,G="constructor"))&&F(G)}:(y=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],an=function(F,G){var I,E,H=ak.call(F)==al,D=!H&&"function"!=typeof F.constructor&&v[typeof F.hasOwnProperty]&&F.hasOwnProperty||ar;for(I in F){H&&"prototype"==I||!D.call(F,I)||G(I)}for(E=y.length;I=y[--E];D.call(F,I)&&G(I)){}}),an(x,A)},!au("json-stringify")){var ax={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},ab="000000",Z=function(l,o){return(ab+(o||0)).slice(-l)},K="\\u00",s=function(x){for(var B='"',D=0,A=x.length,l=!ay||A>10,C=l&&(ay?x.split(""):x);A>D;D++){var y=x.charCodeAt(D);switch(y){case 8:case 9:case 10:case 12:case 13:case 34:case 92:B+=ax[y];break;default:if(32>y){B+=K+Z(2,y.toString(16));break}B+=l?C[D]:x.charAt(D)}}return B+'"'},Q=function(H,aL,P,L,aI,O,J){var aP,G,aN,S,aJ,aM,aO,aK,F,E,U,B,T,D,A,C;try{aP=aL[H]}catch(y){}if("object"==typeof aP&&aP){if(G=ak.call(aP),G!=aH||ar.call(aP,"toJSON")){"function"==typeof aP.toJSON&&(G!=af&&G!=z&&G!=V||ar.call(aP,"toJSON"))&&(aP=aP.toJSON(H))}else{if(aP>-1/0&&1/0>aP){if(aj){for(aJ=ah(aP/86400000),aN=ah(aJ/365.2425)+1970-1;aj(aN+1,0)<=aJ;aN++){}for(S=ah((aJ-aj(aN,0))/30.42);aj(aN,S+1)<=aJ;S++){}aJ=1+aJ-aj(aN,S),aM=(aP%86400000+86400000)%86400000,aO=ah(aM/3600000)%24,aK=ah(aM/60000)%60,F=ah(aM/1000)%60,E=aM%1000}else{aN=aP.getUTCFullYear(),S=aP.getUTCMonth(),aJ=aP.getUTCDate(),aO=aP.getUTCHours(),aK=aP.getUTCMinutes(),F=aP.getUTCSeconds(),E=aP.getUTCMilliseconds()}aP=(0>=aN||aN>=10000?(0>aN?"-":"+")+Z(6,0>aN?-aN:aN):Z(4,aN))+"-"+Z(2,S+1)+"-"+Z(2,aJ)+"T"+Z(2,aO)+":"+Z(2,aK)+":"+Z(2,F)+"."+Z(3,E)+"Z"}else{aP=null}}}if(P&&(aP=P.call(aL,H,aP)),null===aP){return"null"}if(G=ak.call(aP),G==u){return""+aP}if(G==af){return aP>-1/0&&1/0>aP?""+aP:"null"}if(G==z){return s(""+aP)}if("object"==typeof aP){for(D=J.length;D--;){if(J[D]===aP){throw aB()}}if(J.push(aP),U=[],A=O,O+=aI,G==V){for(T=0,D=aP.length;D>T;T++){B=Q(T,aP,P,L,aI,O,J),U.push(B===av?"null":B)}C=U.length?aI?"[\n"+O+U.join(",\n"+O)+"\n"+A+"]":"["+U.join(",")+"]":"[]"}else{an(L||aP,function(l){var o=Q(l,aP,P,L,aI,O,J);o!==av&&U.push(s(l)+":"+(aI?" ":"")+o)}),C=U.length?aI?"{\n"+O+U.join(",\n"+O)+"\n"+A+"}":"{"+U.join(",")+"}":"{}"}return J.pop(),C}};aC.stringify=function(H,D,A){var x,C,y,F;if(v[typeof D]&&D){if((F=ak.call(D))==al){C=D}else{if(F==V){y={};for(var G,E=0,B=D.length;B>E;G=D[E++],F=ak.call(G),(F==z||F==af)&&(y[G]=1)){}}}}if(A){if((F=ak.call(A))==af){if((A-=A%1)>0){for(x="",A>10&&(A=10);x.length<A;x+=" "){}}}else{F==z&&(x=A.length<=10?A:A.slice(0,10))}}return Q("",(G={},G[""]=H,G),C,y,x,"",[])}}if(!au("json-parse")){var Y,i,aq=at.fromCharCode,ag={92:"\\",34:'"',47:"/",98:"\b",116:"	",110:"\n",102:"\f",114:"\r"},ae=function(){throw Y=i=null,aw()},ai=function(){for(var x,B,D,A,l,C=i,y=C.length;y>Y;){switch(l=C.charCodeAt(Y)){case 9:case 10:case 13:case 32:Y++;break;case 123:case 125:case 91:case 93:case 58:case 44:return x=ay?C.charAt(Y):C[Y],Y++,x;case 34:for(x="@",Y++;y>Y;){if(l=C.charCodeAt(Y),32>l){ae()}else{if(92==l){switch(l=C.charCodeAt(++Y)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:x+=ag[l],Y++;break;case 117:for(B=++Y,D=Y+4;D>Y;Y++){l=C.charCodeAt(Y),l>=48&&57>=l||l>=97&&102>=l||l>=65&&70>=l||ae()}x+=aq("0x"+C.slice(B,Y));break;default:ae()}}else{if(34==l){break}for(l=C.charCodeAt(Y),B=Y;l>=32&&92!=l&&34!=l;){l=C.charCodeAt(++Y)}x+=C.slice(B,Y)}}}if(34==C.charCodeAt(Y)){return Y++,x}ae();default:if(B=Y,45==l&&(A=!0,l=C.charCodeAt(++Y)),l>=48&&57>=l){for(48==l&&(l=C.charCodeAt(Y+1),l>=48&&57>=l)&&ae(),A=!1;y>Y&&(l=C.charCodeAt(Y),l>=48&&57>=l);Y++){}if(46==C.charCodeAt(Y)){for(D=++Y;y>D&&(l=C.charCodeAt(D),l>=48&&57>=l);D++){}D==Y&&ae(),Y=D}if(l=C.charCodeAt(Y),101==l||69==l){for(l=C.charCodeAt(++Y),(43==l||45==l)&&Y++,D=Y;y>D&&(l=C.charCodeAt(D),l>=48&&57>=l);D++){}D==Y&&ae(),Y=D}return +C.slice(B,Y)}if(A&&ae(),"true"==C.slice(Y,Y+4)){return Y+=4,!0}if("false"==C.slice(Y,Y+5)){return Y+=5,!1}if("null"==C.slice(Y,Y+4)){return Y+=4,null}ae()}}return"$"},ad=function(l){var o,x;if("$"==l&&ae(),"string"==typeof l){if("@"==(ay?l.charAt(0):l[0])){return l.slice(1)}if("["==l){for(o=[];l=ai(),"]"!=l;x||(x=!0)){x&&(","==l?(l=ai(),"]"==l&&ae()):ae()),","==l&&ae(),o.push(ad(l))}return o}if("{"==l){for(o={};l=ai(),"}"!=l;x||(x=!0)){x&&(","==l?(l=ai(),"}"==l&&ae()):ae()),(","==l||"string"!=typeof l||"@"!=(ay?l.charAt(0):l[0])||":"!=ai())&&ae(),o[l.slice(1)]=ad(ai())}return o}ae()}return l},aa=function(l,x,y){var o=ac(l,x,y);o===av?delete l[x]:l[x]=o},ac=function(o,y,A){var x,l=o[y];if("object"==typeof l&&l){if(ak.call(l)==V){for(x=l.length;x--;){aa(l,x,A)}}else{an(l,function(B){aa(l,B,A)})}}return A.call(o,y,l)};aC.parse=function(l,x){var y,o;return Y=0,i=""+l,y=ad(ai()),"$"!=ai()&&ae(),Y=i=null,x&&ak.call(x)==al?ac((o={},o[""]=y,o),"",x):y}}}return aC.runInContext=k,aC}var e="function"==typeof a&&a.amd,v={"function":!0,object:!0},r=v[typeof c]&&c&&!c.nodeType&&c,t=v[typeof window]&&window||this,q=r&&v[typeof g]&&g&&!g.nodeType&&"object"==typeof h&&h;if(!q||q.global!==q&&q.window!==q&&q.self!==q||(t=q),r&&!e){k(t,r)}else{var j=t.JSON,n=t.JSON3,m=!1,p=k(t,t.JSON3={noConflict:function(){return m||(m=!0,t.JSON=j,t.JSON3=n,j=n=null),p}});t.JSON={parse:p.parse,stringify:p.stringify}}e&&a(function(){return p})}).call(this)}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],56:[function(g,k){function m(B,s,A){if(!(this instanceof m)){return new m(B,s,A)}var y,o,r,q,x=h.test(B),i=typeof s,z=this,n=0;for("object"!==i&&"string"!==i&&(A=s,s=null),A&&"function"!=typeof A&&(A=l.parse),s=f(s);n<c.length;n++){o=c[n],y=o[0],q=o[1],y!==y?z[q]=B:"string"==typeof y?~(r=B.indexOf(y))&&("number"==typeof o[2]?(z[q]=B.slice(0,r),B=B.slice(r+o[2])):(z[q]=B.slice(r),B=B.slice(0,r))):(r=y.exec(B))&&(z[q]=r[1],B=B.slice(0,B.length-r[0].length)),z[q]=z[q]||(o[3]||"port"===q&&x?s[q]||"":""),o[4]&&(z[q]=z[q].toLowerCase())}A&&(z.query=A(z.query)),j(z.port,z.protocol)||(z.host=z.hostname,z.port=""),z.username=z.password="",z.auth&&(o=z.auth.split(":"),z.username=o[0]||"",z.password=o[1]||""),z.href=z.toString()}var j=g("requires-port"),f=g("./lolcation"),l=g("querystringify"),h=/^\/(?!\/)/,c=[["#","hash"],["?","query"],["//","protocol",2,1,1],["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/\:(\d+)$/,"port"],[NaN,"hostname",void 0,1,1]];m.prototype.set=function(p,q,r){var o=this;return"query"===p?("string"==typeof q&&(q=(r||l.parse)(q)),o[p]=q):"port"===p?(o[p]=q,j(q,o.protocol)?q&&(o.host=o.hostname+":"+q):(o.host=o.hostname,o[p]="")):"hostname"===p?(o[p]=q,o.port&&(q+=":"+o.port),o.host=q):"host"===p?(o[p]=q,/\:\d+/.test(q)&&(q=q.split(":"),o.hostname=q[0],o.port=q[1])):o[p]=q,o.href=o.toString(),o},m.prototype.toString=function(i){i&&"function"==typeof i||(i=l.stringify);var p,q=this,o=q.protocol+"//";return q.username&&(o+=q.username,q.password&&(o+=":"+q.password),o+="@"),o+=q.hostname,q.port&&(o+=":"+q.port),o+=q.pathname,q.query&&(p="object"==typeof q.query?i(q.query):q.query,o+=("?"===p.charAt(0)?"":"?")+p),q.hash&&(o+=q.hash),o},m.qs=l,m.location=f,k.exports=m},{"./lolcation":57,querystringify:58,"requires-port":59}],57:[function(c,f){(function(h){var g,e={hash:1,query:1};f.exports=function(k){k=k||h.location||{},g=g||c("./");var l,j={},i=typeof k;if("blob:"===k.protocol){j=new g(unescape(k.pathname),{})}else{if("string"===i){j=new g(k,{});for(l in e){delete j[l]}}else{if("object"===i){for(l in k){l in e||(j[l]=k[l])}}}}return j}}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./":56}],58:[function(f,h,k){function g(i){for(var m,o=/([^=?&]+)=([^&]*)/g,l={};m=o.exec(i);l[decodeURIComponent(m[1])]=decodeURIComponent(m[2])){}return l}function c(i,m){m=m||"";var o=[];"string"!=typeof m&&(m="?");for(var l in i){j.call(i,l)&&o.push(encodeURIComponent(l)+"="+encodeURIComponent(i[l]))}return o.length?m+o.join("&"):""}var j=Object.prototype.hasOwnProperty;k.stringify=c,k.parse=g},{}],59:[function(c,f){f.exports=function(g,h){if(h=h.split(":")[0],g=+g,!g){return !1}switch(h){case"http":case"ws":return 80!==g;case"https":case"wss":return 443!==g;case"ftp":return 22!==g;case"gopher":return 70!==g;case"file":return !1}return 0!==g}},{}]},{},[1])(1)}),function(){var b,f,h,c,a={}.hasOwnProperty,g=[].slice;b={LF:"\n",NULL:"\x00"},h=function(){function i(k,l,m){this.command=k,this.headers=null!=l?l:{},this.body=null!=m?m:""}var j;return i.prototype.toString=function(){var p,l,m,k,e;p=[this.command],m=this.headers["content-length"]===!1?!0:!1,m&&delete this.headers["content-length"],e=this.headers;for(l in e){a.call(e,l)&&(k=e[l],p.push(""+l+":"+k))}return this.body&&!m&&p.push("content-length:"+i.sizeOfUTF8(this.body)),p.push(b.LF+this.body),p.join(b.LF)},i.sizeOfUTF8=function(e){return e?encodeURI(e).match(/%..|./g).length:0},j=function(B){var x,E,A,t,L,q,J,D,H,F,I,z,k,C,K,e,G;for(t=B.search(RegExp(""+b.LF+b.LF)),L=B.substring(0,t).split(b.LF),A=L.shift(),q={},z=function(l){return l.replace(/^\s+|\s+$/g,"")},e=L.reverse(),k=0,K=e.length;K>k;k++){F=e[k],D=F.indexOf(":"),q[z(F.substring(0,D))]=z(F.substring(D+1))}if(x="",I=t+2,q["content-length"]){H=parseInt(q["content-length"]),x=(""+B).substring(I,I+H)}else{for(E=null,J=C=I,G=B.length;(G>=I?G>C:C>G)&&(E=B.charAt(J),E!==b.NULL);J=G>=I?++C:--C){x+=E}}return new i(A,q,x)},i.unmarshall=function(l){var k;return function(){var m,p,n,e;for(n=l.split(RegExp(""+b.NULL+b.LF+"*")),e=[],m=0,p=n.length;p>m;m++){k=n[m],(null!=k?k.length:void 0)>0&&e.push(j(k))}return e}()},i.marshall=function(m,k,e){var l;return l=new i(m,k,e),l.toString()+b.NULL},i}(),f=function(){function k(e){this.ws=e,this.ws.binaryType="arraybuffer",this.counter=0,this.connected=!1,this.heartbeat={outgoing:10000,incoming:10000},this.maxWebSocketFrameSize=16384,this.subscriptions={}}var j;return k.prototype.debug=function(i){var l;return"undefined"!=typeof window&&null!==window?(null!=(l=window.console),void 0):void 0},j=function(){return Date.now?Date.now():(new Date).valueOf},k.prototype._transmit=function(m,o,n){var l;for(l=h.marshall(m,o,n),"function"==typeof this.debug&&this.debug(">>> "+l);;){if(!(l.length>this.maxWebSocketFrameSize)){return this.ws.send(l)}this.ws.send(l.substring(0,this.maxWebSocketFrameSize)),l=l.substring(this.maxWebSocketFrameSize),"function"==typeof this.debug&&this.debug("remaining = "+l.length)}},k.prototype._setupHeartbeat=function(p){var t,q,m,i,l,r;if((l=p.version)===c.VERSIONS.V1_1||l===c.VERSIONS.V1_2){return r=function(){var o,u,s,e;for(s=p["heart-beat"].split(","),e=[],o=0,u=s.length;u>o;o++){i=s[o],e.push(parseInt(i))}return e}(),q=r[0],t=r[1],0!==this.heartbeat.outgoing&&0!==t&&(m=Math.max(this.heartbeat.outgoing,t),"function"==typeof this.debug&&this.debug("send PING every "+m+"ms"),this.pinger=c.setInterval(m,function(n){return function(){return n.ws.send(b.LF),"function"==typeof n.debug?n.debug(">>> PING"):void 0}}(this))),0!==this.heartbeat.incoming&&0!==q?(m=Math.max(this.heartbeat.incoming,q),"function"==typeof this.debug&&this.debug("check PONG every "+m+"ms"),this.ponger=c.setInterval(m,function(e){return function(){var n;return n=j()-e.serverActivity,n>2*m?("function"==typeof e.debug&&e.debug("did not receive server activity for the last "+n+"ms"),e.ws.close()):void 0}}(this))):void 0}},k.prototype._parseConnect=function(){var i,m,o,l;switch(i=1<=arguments.length?g.call(arguments,0):[],l={},i.length){case 2:l=i[0],m=i[1];break;case 3:i[1] instanceof Function?(l=i[0],m=i[1],o=i[2]):(l.login=i[0],l.passcode=i[1],m=i[2]);break;case 4:l.login=i[0],l.passcode=i[1],m=i[2],o=i[3];break;default:l.login=i[0],l.passcode=i[1],m=i[2],o=i[3],l.host=i[4]}return[l,m,o]},k.prototype.connect=function(){var n,m,i,l;return n=1<=arguments.length?g.call(arguments,0):[],l=this._parseConnect.apply(this,n),i=l[0],this.connectCallback=l[1],m=l[2],"function"==typeof this.debug&&this.debug("Opening Web Socket..."),this.ws.onmessage=function(o){return function(e){var s,D,F,B,x,z,y,A,q,E,t,C;if(B="undefined"!=typeof ArrayBuffer&&e.data instanceof ArrayBuffer?(s=new Uint8Array(e.data),"function"==typeof o.debug?o.debug("--- got data length: "+s.length):void 0,function(){var p,r,u;for(u=[],p=0,r=s.length;r>p;p++){D=s[p],u.push(String.fromCharCode(D))}return u}().join("")):e.data,o.serverActivity=j(),B===b.LF){return void ("function"==typeof o.debug&&o.debug("<<< PONG"))}for("function"==typeof o.debug&&o.debug("<<< "+B),t=h.unmarshall(B),C=[],q=0,E=t.length;E>q;q++){switch(x=t[q],x.command){case"CONNECTED":"function"==typeof o.debug&&o.debug("connected to server "+x.headers.server),o.connected=!0,o._setupHeartbeat(x.headers),C.push("function"==typeof o.connectCallback?o.connectCallback(x):void 0);break;case"MESSAGE":A=x.headers.subscription,y=o.subscriptions[A]||o.onreceive,y?(F=o,z=x.headers["message-id"],x.ack=function(p){return null==p&&(p={}),F.ack(z,A,p)},x.nack=function(p){return null==p&&(p={}),F.nack(z,A,p)},C.push(y(x))):C.push("function"==typeof o.debug?o.debug("Unhandled received MESSAGE: "+x):void 0);break;case"RECEIPT":C.push("function"==typeof o.onreceipt?o.onreceipt(x):void 0);break;case"ERROR":C.push("function"==typeof m?m(x):void 0);break;default:C.push("function"==typeof o.debug?o.debug("Unhandled frame: "+x):void 0)}}return C}}(this),this.ws.onclose=function(e){return function(){var o;return o="Whoops! Lost connection to "+e.ws.url,"function"==typeof e.debug&&e.debug(o),e._cleanUp(),"function"==typeof m?m(o):void 0}}(this),this.ws.onopen=function(e){return function(){return"function"==typeof e.debug&&e.debug("Web Socket Opened..."),i["accept-version"]=c.VERSIONS.supportedVersions(),i["heart-beat"]=[e.heartbeat.outgoing,e.heartbeat.incoming].join(","),e._transmit("CONNECT",i)}}(this)},k.prototype.disconnect=function(i,l){return null==l&&(l={}),this._transmit("DISCONNECT",l),this.ws.onclose=null,this.ws.close(),this._cleanUp(),"function"==typeof i?i():void 0},k.prototype._cleanUp=function(){return this.connected=!1,this.pinger&&c.clearInterval(this.pinger),this.ponger?c.clearInterval(this.ponger):void 0},k.prototype.send=function(i,l,m){return null==l&&(l={}),null==m&&(m=""),l.destination=i,this._transmit("SEND",l,m)},k.prototype.subscribe=function(i,m,o){var l;return null==o&&(o={}),o.id||(o.id="sub-"+this.counter++),o.destination=i,this.subscriptions[o.id]=m,this._transmit("SUBSCRIBE",o),l=this,{id:o.id,unsubscribe:function(){return l.unsubscribe(o.id)}}},k.prototype.unsubscribe=function(e){return delete this.subscriptions[e],this._transmit("UNSUBSCRIBE",{id:e})},k.prototype.begin=function(i){var l,m;return m=i||"tx-"+this.counter++,this._transmit("BEGIN",{transaction:m}),l=this,{id:m,commit:function(){return l.commit(m)},abort:function(){return l.abort(m)}}},k.prototype.commit=function(e){return this._transmit("COMMIT",{transaction:e})},k.prototype.abort=function(e){return this._transmit("ABORT",{transaction:e})},k.prototype.ack=function(i,l,m){return null==m&&(m={}),m["message-id"]=i,m.subscription=l,this._transmit("ACK",m)},k.prototype.nack=function(i,l,m){return null==m&&(m={}),m["message-id"]=i,m.subscription=l,this._transmit("NACK",m)},k}(),c={VERSIONS:{V1_0:"1.0",V1_1:"1.1",V1_2:"1.2",supportedVersions:function(){return"1.1,1.0"}},client:function(j,l){var e,k;return null==l&&(l=["v10.stomp","v11.stomp"]),e=c.WebSocketClass||WebSocket,k=new e(j,l),new f(k)},over:function(e){return new f(e)},Frame:h},"undefined"!=typeof exports&&null!==exports&&(exports.Stomp=c),"undefined"!=typeof window&&null!==window?(c.setInterval=function(i,j){return window.setInterval(j,i)},c.clearInterval=function(e){return window.clearInterval(e)},window.Stomp=c):exports||(self.Stomp=c)}.call(this);var w=window,d=document;var MCK_LABELS;var MCK_BASE_URL;var MCK_CURR_LATITIUDE=40.7324319;var MCK_CURR_LONGITUDE=-73.82480777777776;var mckUtils=new MckUtils();var mckDateUtils=new MckDateUtils();var mckContactUtils=new MckContactUtils();var mckMapUtils=new MckMapUtils();function MckUtils(){var e=this;var b=3,a=1,c=["p","div","pre","form"];e.init=function(){var f=MCK_CONTEXTPATH?MCK_CONTEXTPATH+"/v2/tab/initialize.page":"https://apps.applozic.com/v2/tab/initialize.page";var g=MCK_CONTEXTPATH?MCK_CONTEXTPATH+"/rest/ws/message/list":"https://apps.applozic.com/rest/ws/message/list";$applozic.ajax({url:f,contentType:"application/json",type:"OPTIONS"}).done(function(h){});$applozic.ajax({url:g,contentType:"application/json",type:"OPTIONS"}).done(function(h){})};e.showElement=function(f){if(typeof f!=="object"&&(typeof f!=="undefined"&&typeof f!==null)||(f&&typeof f==="object"&&f.length!==0)){f.classList.remove("n-vis");f.classList.add("vis")}};e.hideElement=function(f){if(typeof f!=="object"&&(typeof f!=="undefined"&&typeof f!==null)||(f&&typeof f==="object"&&f.length!==0)){f.classList.remove("vis");f.classList.add("n-vis")}};e.badgeCountOnLaucher=function(g,f){var h=document.getElementById("applozic-badge-count");if(g===true&&f>0){if(f<99){h.innerHTML=f}else{h.innerHTML="99+"}h.classList.add("mck-badge-count")}if(g===true&&f===0){h.innerHTML="";h.classList.remove("mck-badge-count")}};e.randomId=function(){return w.Math.random().toString(36).substring(7)};e.textVal=function(j){var h=[];var g=[];var f=function(){h.push(g.join(""));g=[]};var m=function(r){if(r.nodeType===b){g.push(r.nodeValue)}else{if(r.nodeType===a){var q=r.tagName.toLowerCase();var n=c.indexOf(q)!==-1;if(n&&g.length){f()}if(q==="img"){var s=r.getAttribute("alt")||"";if(s){g.push(s)}return}else{if(q==="style"){return}else{if(q==="br"){f()}}}var p=r.childNodes;for(var o=0;o<p.length;o++){m(p[o])}if(n&&g.length){f()}}}};var l=j.childNodes;for(var k=0;k<l.length;k++){m(l[k])}if(g.length){f()}return h.join("\n")};e.mouseX=function(f){if(f.pageX){return f.pageX}else{if(f.clientX){return f.clientX+(d.documentElement.scrollLeft?d.documentElement.scrollLeft:d.body.scrollLeft)}else{return null}}};e.mouseY=function(f){if(f.pageY){return f.pageY}else{if(f.clientY){return f.clientY+(d.documentElement.scrollTop?d.documentElement.scrollTop:d.body.scrollTop)}else{return null}}};e.startsWith=function(g,h){if(h===null||typeof g==="undefined"){return false}var f=h.length;if(g.length<f){return false}for(--f;(f>=0)&&(g[f]===h[f]);--f){continue}return f<0};e.setEndOfContenteditable=function(g){var f,h;if(document.createRange){f=document.createRange();f.selectNodeContents(g);f.collapse(false);h=window.getSelection();h.removeAllRanges();h.addRange(f)}else{if(document.selection){f=document.body.createTextRange();f.moveToElementText(g);f.collapse(false);f.select()}}};this.encryptionKey=null;this.getEncryptionKey=function(){var f;if(this.encryptionKey===null){f=ALStorage.getEncryptionKey();return f}else{return this.encryptionKey}};this.setEncryptionKey=function(f){this.encryptionKey=f};e.b64EncodeUnicode=function(f){return btoa(encodeURIComponent(f).replace(/%([0-9A-F]{2})/g,function(g,h){return String.fromCharCode("0x"+h)}))};e.b64DecodeUnicode=function(f){return decodeURIComponent(Array.prototype.map.call(atob(f),function(g){return"%"+("00"+g.charCodeAt(0).toString(16)).slice(-2)}).join(""))};e.ajax=function(j){var m=$applozic.extend({},{},j);if(!(j.skipEncryption===true)&&mckUtils.getEncryptionKey()){var l=aesjs.util.convertStringToBytes(mckUtils.getEncryptionKey());var i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];if(m.type.toLowerCase()==="post"){while(j.data&&j.data.length%16!=0){j.data+=" "}var k=new aesjs.ModeOfOperation.ecb(l);var g=aesjs.util.convertStringToBytes(j.data);var h=k.encrypt(g);var f=String.fromCharCode.apply(null,h);m.data=btoa(f)}m.success=function(s){var r=atob(s);var n=[];for(var q=0;q<r.length;q++){n.push(r.charCodeAt(q))}var p=new aesjs.ModeOfOperation.ecb(l);var t=p.decrypt(n);var o=aesjs.util.convertBytesToString(t);o=o.replace(/\\u0000/g,"").replace(/^\s*|\s*[\x00-\x10]*$/g,"");if(mckUtils.isJsonString(o)){j.success(JSON.parse(o))}else{j.success(o)}}}$applozic.ajax(m)};e.isJsonString=function(g){try{JSON.parse(g)}catch(f){return false}return true}}function MckContactUtils(){var a=this;a.getContactId=function(b){var c=b.contactId;return a.formatContactId(c)};a.formatContactId=function(b){if(b.indexOf("+")===0){b=b.substring(1)}b=decodeURIComponent(b);return $applozic.trim(b.replace(/\@/g,"AT").replace(/\./g,"DOT").replace(/\*/g,"STAR").replace(/\#/g,"HASH").replace(/\|/g,"VBAR").replace(/\+/g,"PLUS").replace(/\;/g,"SCOLON").replace(/\?/g,"QMARK").replace(/\,/g,"COMMA").replace(/\:/g,"COLON"))}}function MckMapUtils(){var a=this;a.getCurrentLocation=function(c,b){w.navigator.geolocation.getCurrentPosition(c,b)};a.getSelectedLocation=function(){return{lat:MCK_CURR_LATITIUDE,lon:MCK_CURR_LONGITUDE}}}function MckDateUtils(){var g=this;var f="mmm d, h:MM TT";var e="mmm d";var c="h:MM TT";var b=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];g.getDate=function(j){var i=new Date(parseInt(j,10));var h=new Date();return((h.getDate()===i.getDate())&&(h.getMonth()===i.getMonth())&&(h.getYear()===i.getYear()))?a(i,c,false):a(i,f,false)};g.getLastSeenAtStatus=function(j){var i=new Date(parseInt(j,10));var h=new Date();if((h.getDate()===i.getDate())&&(h.getMonth()===i.getMonth())&&(h.getYear()===i.getYear())){var k=h.getHours()-i.getHours();var l=w.Math.floor((h.getTime()-i.getTime())/60000);if(l<60){return(l<=1)?MCK_LABELS["last.seen"]+" 1 "+MCK_LABELS.min+" "+MCK_LABELS.ago:MCK_LABELS["last.seen"]+" "+l+MCK_LABELS.mins+" "+MCK_LABELS.ago}return(k===1)?MCK_LABELS["last.seen"]+" 1 "+MCK_LABELS.hour+" "+MCK_LABELS.ago:MCK_LABELS["last.seen"]+" "+k+MCK_LABELS.hours+" "+MCK_LABELS.ago}else{if(((h.getDate()-i.getDate()===1)&&(h.getMonth()===i.getMonth())&&(h.getYear()===i.getYear()))){return MCK_LABELS["last.seen.on"]+" "+MCK_LABELS.yesterday}else{return MCK_LABELS["last.seen.on"]+" "+a(i,e,false)}}};g.getTimeOrDate=function(k,j){var i=new Date(parseInt(k,10));var h=new Date();if(j){return((h.getDate()===i.getDate())&&(h.getMonth()===i.getMonth())&&(h.getYear()===i.getYear()))?a(i,c,false):a(i,e,false)}else{return a(i,f,false)}};g.getSystemDate=function(i){var h=new Date(parseInt(i,10));return a(h,f,false)};g.convertMilisIntoTime=function(k){var l;var i=parseInt((k%1000)/100),m=parseInt((k/1000)%60),j=parseInt((k/(1000*60))%60),h=parseInt((k/(1000*60*60))%24);if(h>0){l=h+" Hr "+j+" Min "+m+" Sec"}else{if(j>0){l=j+" Min "+m+" Sec"}else{l=m+" Sec "}}return l};var a=function(){var h=/d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZ]|"[^"]*"|'[^']*'/g,i=/\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g,k=/[^-+\dA-Z]/g,j=function(m,l){m=String(m);l=l||2;while(m.length<l){m="0"+m}return m};return function(r,F,A){var p=a;if(arguments.length===1&&Object.prototype.toString.call(r)==="[object String]"&&!/\d/.test(r)){F=r;r=undefined}r=r?new Date(r):new Date;if(isNaN(r)){throw SyntaxError("invalid date")}F=String(F);if(F.slice(0,4)==="UTC:"){F=F.slice(4);A=true}var C=A?"getUTC":"get",v=r[C+"Date"](),l=r[C+"Day"](),t=r[C+"Month"](),z=r[C+"FullYear"](),B=r[C+"Hours"](),u=r[C+"Minutes"](),E=r[C+"Seconds"](),x=r[C+"Milliseconds"](),n=A?0:r.getTimezoneOffset(),q={d:v,dd:j(v),ddd:p.i18n.dayNames[l],dddd:p.i18n.dayNames[l+7],m:t+1,mm:j(t+1),mmm:p.i18n.monthNames[t],mmmm:p.i18n.monthNames[t+12],yy:String(z).slice(2),yyyy:z,h:B%12||12,hh:j(B%12||12),H:B,HH:j(B),M:u,MM:j(u),s:E,ss:j(E),l:j(x,3),L:j(x>99?w.Math.round(x/10):x),t:B<12?"a":"p",tt:B<12?MCK_LABELS["time.format.am"]||"am":MCK_LABELS["time.format.pm"]||"pm",T:B<12?"A":"P",TT:B<12?MCK_LABELS["time.format.AM"]||"AM":MCK_LABELS["time.format.PM"]||"PM",Z:A?"UTC":(String(r).match(i)||[""]).pop().replace(k,""),o:(n>0?"-":"+")+j(w.Math.floor(w.Math.abs(n)/60)*100+w.Math.abs(n)%60,4),S:["th","st","nd","rd"][v%10>3?0:(v%100-v%10!==10)*v%10]};return F.replace(h,function(m){return m in q?q[m]:m.slice(1,m.length-1)})}}();a.masks={"default":"mmm d, yyyy h:MM TT",fullDateFormat:"mmm d, yyyy h:MM TT",onlyDateFormat:"mmm d",onlyTimeFormat:"h:MM TT",mailDateFormat:"mmm d, yyyy",mediumDate:"mmm d, yyyy",longDate:"mmmm d, yyyy",fullDate:"dddd, mmmm d, yyyy",shortTime:"h:MM TT",mediumTime:"h:MM:ss TT",longTime:"h:MM:ss TT Z",isoDate:"yyyy-mm-dd",isoTime:"HH:MM:ss",isoDateTime:"yyyy-mm-dd'T'HH:MM:ss",isoUtcDateTime:"UTC:yyyy-mm-dd'T'HH:MM:ss'Z'"};a.i18n={dayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],monthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","January","February","March","April","May","June","July","August","September","October","November","December"]}}(function(b){function a(){var c={};c.init=function(){};return c}if(typeof(Applozic)==="undefined"){b.Applozic=a()}else{console.log("Applozic already defined.")}})(window);var ALStorage=(function(h){var a=[];var b=[];var f=[];var c=[];var e;var g;var i;return{setEncryptionKey:function(j){if(ALStorage.isSessionStorageAvailable()){w.sessionStorage.setItem("encryptionKey",j)}else{i=j}},getEncryptionKey:function(j){return(ALStorage.isSessionStorageAvailable())?w.sessionStorage.getItem("encryptionKey"):i},removeEncryptionKey:function(){if(ALStorage.isSessionStorageAvailable()){w.sessionStorage.removeItem("encryptionKey")}},updateLatestMessage:function(k){var j=[];j.push(k);ALStorage.updateLatestMessageArray(j);ALStorage.updateMckMessageArray(j)},getLatestMessageArray:function(){return(ALStorage.isSessionStorageAvailable())?$applozic.parseJSON(w.sessionStorage.getItem("mckLatestMessageArray")):a},getFriendListGroupName:function(){return(ALStorage.isSessionStorageAvailable())?w.sessionStorage.getItem("friendListGroupName"):e},setFriendListGroupName:function(j){if(ALStorage.isSessionStorageAvailable()){w.sessionStorage.setItem("friendListGroupName",j)}else{e=j}},setFriendListGroupType:function(j){if(ALStorage.isSessionStorageAvailable()){w.sessionStorage.setItem("friendListGroupType",j)}else{g=j}},getFriendListGroupType:function(){return(ALStorage.isSessionStorageAvailable())?w.sessionStorage.getItem("friendListGroupType"):g},setLatestMessageArray:function(j){if(ALStorage.isSessionStorageAvailable()){w.sessionStorage.setItem("mckLatestMessageArray",w.JSON.stringify(j))}else{a=j}},updateLatestMessageArray:function(j){if(ALStorage.isSessionStorageAvailable()){var k=$applozic.parseJSON(w.sessionStorage.getItem("mckLatestMessageArray"));if(k!==null){k=k.concat(j);w.sessionStorage.setItem("mckLatestMessageArray",w.JSON.stringify(k))}else{w.sessionStorage.setItem("mckLatestMessageArray",w.JSON.stringify(j))}return j}else{a=a.concat(j);return a}},getMckMessageArray:function(){return(ALStorage.isSessionStorageAvailable())?$applozic.parseJSON(w.sessionStorage.getItem("mckMessageArray")):b},clearMckMessageArray:function(){if(ALStorage.isSessionStorageAvailable()){w.sessionStorage.removeItem("mckMessageArray");w.sessionStorage.removeItem("mckLatestMessageArray")}else{b.length=0;a.length=0}},clearAppHeaders:function(){if(ALStorage.isSessionStorageAvailable()){w.sessionStorage.removeItem("mckAppHeaders")}},setAppHeaders:function(j){if(ALStorage.isSessionStorageAvailable()){w.sessionStorage.setItem("mckAppHeaders",w.JSON.stringify(j))}},getAppHeaders:function(j){return(ALStorage.isSessionStorageAvailable())?$applozic.parseJSON(w.sessionStorage.getItem("mckAppHeaders")):{}},getMessageByKey:function(j){return f[j]},updateMckMessageArray:function(j){for(var k=0;k<j.length;k++){var l=j[k];f[l.key]=l}if(ALStorage.isSessionStorageAvailable()){var m=$applozic.parseJSON(w.sessionStorage.getItem("mckMessageArray"));if(m!==null){m=m.concat(j);w.sessionStorage.setItem("mckMessageArray",w.JSON.stringify(m))}else{w.sessionStorage.setItem("mckMessageArray",w.JSON.stringify(j))}return j}else{b=b.concat(j);return b}},getMckContactNameArray:function(){return(ALStorage.isSessionStorageAvailable())?$applozic.parseJSON(w.sessionStorage.getItem("mckContactNameArray")):c},setMckContactNameArray:function(j){if(ALStorage.isSessionStorageAvailable()){w.sessionStorage.setItem("mckContactNameArray",w.JSON.stringify(j))}else{c=j}},updateMckContactNameArray:function(k){if(ALStorage.isSessionStorageAvailable()){var j=$applozic.parseJSON(w.sessionStorage.getItem("mckContactNameArray"));if(j!==null){k=k.concat(j)}w.sessionStorage.setItem("mckContactNameArray",w.JSON.stringify(k));return k}else{c=c.concat(k);return c}},clearMckContactNameArray:function(){if(ALStorage.isSessionStorageAvailable()){w.sessionStorage.removeItem("mckContactNameArray")}else{c.length=0}},clearSessionStorageElements:function(){ALStorage.clearMckMessageArray();ALStorage.clearAppHeaders();ALStorage.clearMckContactNameArray();ALStorage.removeEncryptionKey()},isSessionStorageAvailable:function(){try{return typeof(w.sessionStorage)!=="undefined"}catch(j){return false}}}})(window);(function(a){function b(A){var U={};var D="";var Y=new MckUtils();var P="https://apps.applozic.com";var e="applozic.appspot.com";var u="https://applozic.appspot.com";var t="/files/upload/";var h="https://googleupload.applozic.com";var p="/v2/tab/initialize.page";var q="/rest/ws/message/list";var N="/rest/ws/message/send";var M="/rest/ws/group/create";var G="/rest/ws/group/list";var c="/rest/ws/group/v2/info";var B="/rest/ws/group/add/member";var H="/rest/ws/group/remove/member";var ag="/rest/ws/group/left";var y="/rest/ws/group/update";var aa="/rest/ws/group/check/user";var T="/rest/ws/group/user/count";var k="/rest/ws/group/";var ak="/rest/ws/user/v2/detail";var m="/rest/ws/user/update";var K="/rest/ws/user/filter";var al="/rest/ws/device/logout";var r="/rest/ws/user/v3/filter";var ac="/rest/ws/user/block";var O="/rest/ws/user/unblock";var ae="/rest/ws/user/update/password";var o="/rest/ws/message/detail";var i="/rest/ws/message/delete";var n="/rest/ws/message/read";var Q="/rest/ws/message/delivered";var aj="/rest/ws/conversation/close";var C="/rest/ws/aws/file";var x="/rest/ws/aws/file/url";var S="/rest/ws/upload/file";var R="/rest/ws/aws/file/delete";var j="/rest/ws/message/add/inbox";var V="/rest/ws/message/read/conversation";var af="/rest/ws/message/delete/conversation";var X="/rest/ws/user/chat/mute";var s="/rest/ws/group/user/update";var Z="/rest/ws/register/client";var F="/rest/ws/user/chat/mute/list";var E="/rest/ws/conversation/topicId";var v="/rest/ws/user/info";var J="/rest/ws/user/chat/status";var ad="/rest/ws/conversation/get";var f="/rest/ws/conversation/id";var S="/rest/ws/upload/file";var L="/rest/ws/upload/image";var l="/rest/ws/device/logout";var I="/rest/ws/plugin/update/sw/id";var W;var ai;var z;var g;var ab;function ah(an){var am="";for(var ao in an){am+=encodeURIComponent(ao)+"="+encodeURIComponent(an[ao])+"&"}return am.substring(0,am.length-1)}U.getFileUrl=function(){return u};U.initServerUrl=function(am){P=am};U.login=function(am){D=am.data.alUser.applicationId;P=am.data.baseUrl?am.data.baseUrl:"https://apps.applozic.com";ab=am.data.alUser.fileupload;U.ajax({url:P+p,skipEncryption:true,type:"post",async:(typeof am.async!=="undefined")?am.async:true,data:JSON.stringify(am.data.alUser),contentType:"application/json",headers:{"Application-Key":D},success:function(an){Y.setEncryptionKey(an.encryptionKey);g=btoa(an.userId+":"+an.deviceKey);ai=an.deviceKey;W=am.data.alUser.password;z=am.data.alUser.appModuleName;U.setAjaxHeaders(g,D,an.deviceKey,am.data.alUser.password,am.data.alUser.appModuleName);if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.getAttachmentHeaders=function(){var am={"UserId-Enabled":true,Authorization:"Basic "+g,"Application-User":"Basic "+g,"Application-Key":D,"Device-Key":ai};if(W){am["Access-Token"]=W}return am},U.setAjaxHeaders=function(ap,aq,am,an,ao){D=aq;g=ap;ai=am;W=an;z=ao};U.ajax=function(az){function ar(){for(var aC=1;aC<arguments.length;aC++){for(var aB in arguments[aC]){if(arguments[aC].hasOwnProperty(aB)){arguments[0][aB]=arguments[aC][aB]}}}return arguments[0]}var av=ar({},{},az);if(!(az.skipEncryption===true)&&Y.getEncryptionKey()){var aw=aesjs.util.convertStringToBytes(Y.getEncryptionKey());var ap=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];if(av.type.toLowerCase()==="post"){while(az.data&&az.data.length%16!=0){az.data+=" "}var ao=new aesjs.ModeOfOperation.ecb(aw);var aA=aesjs.util.convertStringToBytes(az.data);var ax=ao.encrypt(aA);var am=String.fromCharCode.apply(null,ax);av.data=btoa(am)}av.success=function(aG){var aF=atob(aG);var aB=[];for(var aE=0;aE<aF.length;aE++){aB.push(aF.charCodeAt(aE))}var aD=new aesjs.ModeOfOperation.ecb(aw);var aH=aD.decrypt(aB);var aC=aesjs.util.convertBytesToString(aH);aC=aC.replace(/\\u0000/g,"").replace(/^\s*|\s*[\x00-\x10]*$/g,"");if(Y.isJsonString(aC)){az.success(JSON.parse(aC))}else{az.success(aC)}}}var aq=new XMLHttpRequest();var au;var at=true;var ay;if(typeof av.async!=="undefined"||az.async){at=av.async}var an=av.type.toUpperCase();if(an==="GET"&&typeof av.data!=="undefined"){av.url=av.url+"?"+av.data}aq.open(an,av.url,at);if(an==="POST"||an==="GET"){if(typeof av.contentType==="undefined"){ay="application/x-www-form-urlencoded; charset=UTF-8"}else{ay=av.contentType}aq.setRequestHeader("Content-Type",ay)}P=P?P:"https://apps.applozic.com";if(av.url.indexOf(P)!==-1){aq.setRequestHeader("UserId-Enabled",true);if(g){aq.setRequestHeader("Authorization","Basic "+g);aq.setRequestHeader("Application-User","Basic "+g)}aq.setRequestHeader("Application-Key",D);if(ai){aq.setRequestHeader("Device-Key",ai)}if(W){aq.setRequestHeader("Access-Token",W)}if(z){aq.setRequestHeader("App-Module-Name",z)}}if(av.url.indexOf(e)!==-1){aq.setRequestHeader("Application-Key",D)}if(typeof av.data==="undefined"){aq.send()}else{aq.send(av.data)}aq.onreadystatechange=function(){if(aq.readyState===4){if(aq.status===200){var aB=aq.getResponseHeader("Content-Type");if(typeof aB==="undefined"||aB==="null"||aB===null){aB=""}if(aB.toLowerCase().indexOf("text/html")!=-1){au=aq.responseXML}else{if(aB.toLowerCase().indexOf("application/json")!=-1){au=JSON.parse(aq.responseText)}else{au=aq.responseText}}av.success(au)}else{av.error(au)}}}};U.getMessages=function(an){if(an.data.userId||an.data.groupId){if(an.data.pageSize==="undefined"){an.data.pageSize=30}}else{if(typeof an.data.mainPageSize==="undefined"){an.data.mainPageSize=60}}var ao=ah(an.data);var am=new Object();U.ajax({url:P+q+"?"+ao,async:(typeof an.async!=="undefined")?an.async:true,type:"get",success:function(ap){am.status="success";am.data=ap;if(an.success){an.success(am)}return},error:function(ar,aq,ap){am.status="error";if(an.error){an.error(am)}}})};U.sendMessage=function(am){U.ajax({type:"POST",url:P+N,global:false,data:JSON.stringify(am.data.message),async:(typeof am.async!=="undefined")?am.async:true,contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.sendDeliveryUpdate=function(am){U.ajax({url:P+Q,data:"key="+am.data.key,global:false,type:"get",async:(typeof am.async!=="undefined")?am.async:true,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.sendReadUpdate=function(am){U.ajax({url:P+n,data:"key="+am.data.key,global:false,type:"get",async:(typeof am.async!=="undefined")?am.async:true,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.deleteMessage=function(am){U.ajax({url:P+i+"?key="+am.data.key,global:false,type:"get",async:(typeof am.async!=="undefined")?am.async:true,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.updateReplyMessage=function(am){U.ajax({url:P+o+"?keys="+am.data.key,type:"get",async:(typeof am.async!=="undefined")?am.async:true,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.deleteConversation=function(am){U.ajax({url:P+af,type:"get",async:(typeof am.async!=="undefined")?am.async:true,global:false,data:ah(am.data),success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.createGroup=function(am){U.ajax({url:P+M,global:false,data:JSON.stringify(am.data.group),type:"post",async:(typeof am.async!=="undefined")?am.async:true,contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.loadGroups=function(am){if(am.baseUrl){P=am.baseUrl}U.ajax({url:P+G,type:"get",async:(typeof am.async!=="undefined")?am.async:true,global:false,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.getGroupInfo=function(am){var an=(am.data.groupId)?"?groupId="+am.data.groupId:"?clientGroupId="+am.data.clientGroupId;U.ajax({url:P+c+an,type:"get",async:(typeof am.async!=="undefined")?am.async:true,global:false,success:function(ao){if(am.success){am.success(ao)}},error:function(ao){if(am.error){am.error(ao)}}})};U.addGroupMember=function(am){U.ajax({url:P+B,type:"POST",data:JSON.stringify(am.data.group),async:(typeof am.async!=="undefined")?am.async:true,global:false,contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.removeGroupMember=function(am){U.ajax({url:P+H,type:"POST",data:JSON.stringify(am.data),async:(typeof am.async!=="undefined")?am.async:true,global:false,contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.groupLeave=function(am){U.ajax({url:P+ag,type:"POST",data:JSON.stringify(am.data),async:(typeof am.async!=="undefined")?am.async:true,global:false,contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.groupUpdate=function(am){U.ajax({url:P+y,type:"POST",data:JSON.stringify(am.data),async:(typeof am.async!=="undefined")?am.async:true,global:false,contentType:"application/json",success:function(an){if(am.success){am.success(an,am.data)}},error:function(an){if(am.error){am.error(an)}}})};U.isUserPresentInGroup=function(am){U.ajax({url:P+aa+"?userId="+am.data.userId+"&clientGroupId="+am.data.clientGroupId,type:"get",async:(typeof am.async!=="undefined")?am.async:true,global:false,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.groupUserCount=function(am){U.ajax({url:P+T+"?clientGroupIds="+am.data.clientGroupId,type:"get",async:(typeof am.async!=="undefined")?am.async:true,global:false,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.groupDelete=function(am){U.ajax({url:P+ag+"?clientGroupId="+am.data.clientGroupId,type:"GET",async:(typeof am.async!=="undefined")?am.async:true,global:false,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.createUserFriendList=function(am){U.ajax({url:P+k+am.data.group.groupName+"/add/",type:"POST",async:(typeof am.async!=="undefined")?am.async:true,global:false,data:JSON.stringify(am.data.group.groupMemberList),contentType:"application/json",success:function(an){if(am.success){am.success(an);ALStorage.setFriendListGroupName(am.data.group.groupName)}},error:function(an){if(am.error){am.error(an)}}})};U.createOpenFriendList=function(am){U.ajax({url:P+k+am.data.group.groupName+"/add/members",type:"POST",data:JSON.stringify(am.data.group),async:(typeof am.async!=="undefined")?am.async:true,global:false,contentType:"application/json",success:function(an){if(am.success){am.success(an);ALStorage.setFriendListGroupName(am.data.group.groupName);ALStorage.setFriendListGroupType(am.data.group.type)}},error:function(an){if(am.error){am.error(an)}}})};U.getFriendList=function(am){var an=(am.data.type!=="null")?"/get?groupType=9":"/get";am.data.url=am.data.url?am.data.url:an;U.ajax({url:P+k+am.data.groupName+am.data.url,type:"GET",async:(typeof am.data.async!=="undefined")?am.data.async:true,global:false,contentType:"application/json",success:function(ao){if(am.success){am.success(ao)}},error:function(ao){if(am.error){am.error(ao)}}})};U.removeUserFromFriendList=function(am){var an=(am.group.type)?"/remove?userId="+am.group.userId+"&groupType=9":"/remove?userId="+am.group.userId;U.ajax({url:P+k+am.group.groupName+an,type:"Post",contentType:"application/json",async:(typeof am.async!=="undefined")?am.async:true,global:false,success:function(ao){if(am.success){am.success(ao)}},error:function(ao){if(am.error){am.error(ao)}}})};U.deleteFriendList=function(am){var an=(am.group.type)?"/delete?groupType=9":"/delete";U.ajax({url:P+k+am.group.groupName+an,type:"GET",async:false,contentType:"application/json",async:(typeof am.async!=="undefined")?am.async:true,success:function(ao){if(am.success){am.success(ao)}},error:function(ao){if(am.error){am.error(ao)}}})};U.getUserDetail=function(am){U.ajax({url:P+ak,data:JSON.stringify({userIdList:am.data}),type:"POST",async:(typeof am.async!=="undefined")?am.async:true,global:false,contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.updateUserDetail=function(am){U.ajax({url:P+m,data:JSON.stringify(am.data),type:"POST",async:(typeof am.async!=="undefined")?am.async:true,global:false,contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.updatePassword=function(am){U.ajax({url:P+ae+"?oldPassword="+am.data.oldPassword+"&newPassword="+am.data.newPassword,type:"GET",async:(typeof am.async!=="undefined")?am.async:true,global:false,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.getContactList=function(am){var an=am.baseUrl?am.baseUrl:P;U.ajax({url:an+am.url,type:"GET",async:(typeof am.async!=="undefined")?am.async:true,global:false,success:function(ao){if(am.success){am.success(ao)}},error:function(ao){if(am.error){am.error(ao)}}})};U.userChatMute=function(am){U.ajax({url:P+X+"?userId="+am.data.userId+"&notificationAfterTime="+am.data.notificationAfterTime,type:"post",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.groupMute=function(am){var an={};an.clientGroupId=am.data.clientGroupId;an.notificationAfterTime=am.data.notificationAfterTime;U.ajax({url:P+s,type:"post",data:JSON.stringify(an),contentType:"application/json",success:function(ao){if(am.success){am.success(ao)}},error:function(ao){if(am.error){am.error(ao)}}})};U.syncMuteUserList=function(am){U.ajax({url:P+F,type:"get",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.blockUser=function(am){U.ajax({url:P+ac+"?userId="+am.data.userId+"&block="+am.data.isBlock,type:"GET",async:(typeof am.async!=="undefined")?am.async:true,global:false,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.unBlockUser=function(am){U.ajax({url:P+O+"?userId="+am.data.userId,type:"GET",async:(typeof am.async!=="undefined")?am.async:true,global:false,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.sendConversationCloseUpdate=function(am){var an="id="+am.conversationId;U.ajax({url:P+aj,data:an,global:false,type:"get",success:function(){},error:function(){}})};U.fileUpload=function(am){U.ajax({type:"GET",skipEncryption:true,url:am.data.url,global:false,data:"data="+new Date().getTime(),crosDomain:true,success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.sendAttachment=function(am){if(ab==="awsS3Server"){a.Applozic.ALApiService.sendAttachmentToAWS(am)}else{if(ab==="googleCloud"){a.Applozic.ALApiService.sendAttachmentToCloud(am)}else{a.Applozic.ALApiService.sendAttachmentToGoogleServer(am)}}};U.sendAttachmentToGoogleServer=function(am){var ao=new XMLHttpRequest();var an=u+x;U.ajax({type:"GET",skipEncryption:true,url:(typeof am.url!=="undefined")?am.url:an,global:false,data:"data="+new Date().getTime(),crosDomain:true,success:function(ap){ao.addEventListener("load",function(av){var at=JSON.parse(this.responseText);var au=am.data.messagePxy;if(at){au.fileMeta=at.fileMeta;Applozic.ALApiService.sendMessage({data:{message:au},success:function(aw){console.log(aw)},error:function(){}})}});var ar=new FormData();var aq=am.data.file;ar.append("files[]",aq);ao.open("POST",ap,true);ao.setRequestHeader("UserId-Enabled",true);ao.setRequestHeader("Authorization","Basic "+g);ao.setRequestHeader("Application-User","Basic "+g);ao.setRequestHeader("Application-Key",D);ao.setRequestHeader("Device-Key",USER_DEVICE_KEY);ao.send(ar)},error:function(ap){if(am.error){am.error(ap)}}})};U.sendAttachmentToAWS=function(am){var an=new FormData();var ap=new XMLHttpRequest();var ao=P+L;ap.addEventListener("load",function(at){var aq=this.responseText;var ar=am.data.messagePxy;if(aq){ar.fileMeta=JSON.parse(aq);Applozic.ALApiService.sendMessage({data:{message:ar},success:function(au){console.log(au)},error:function(){}})}});an.append("file",am.data.file);ap.open("post",ao,true);ap.setRequestHeader("UserId-Enabled",true);ap.setRequestHeader("Authorization","Basic "+g);ap.setRequestHeader("Application-User","Basic "+g);ap.setRequestHeader("Application-Key",D);ap.setRequestHeader("Device-Key",ai);if(W){ap.setRequestHeader("Access-Token",W)}ap.send(an)};U.sendAttachmentToCloud=function(am){var an=new FormData();var ap=new XMLHttpRequest();var ao=(typeof am.cloudUploadUrl!=="undefined")?am.cloudUploadUrl:h+t;ap.addEventListener("load",function(at){var aq=JSON.parse(this.responseText);var ar=am.data.messagePxy;if(aq){ar.fileMeta=aq.fileMeta;Applozic.ALApiService.sendMessage({data:{message:ar},success:function(au){console.log(au)},error:function(){}})}});an.append("files[]",am.data.file);ap.open("post",ao,true);ap.setRequestHeader("UserId-Enabled",true);ap.setRequestHeader("Authorization","Basic "+g);ap.setRequestHeader("Application-User","Basic "+g);ap.setRequestHeader("Application-Key",D);ap.setRequestHeader("Device-Key",ai);if(W){ap.setRequestHeader("Access-Token",W)}ap.send(an)};U.deleteFileMeta=function(am){U.ajax({url:am.data.url,skipEncryption:true,type:"post",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.addMessageInbox=function(am){U.ajax({type:"GET",url:P+j,global:false,data:"sender="+encodeURIComponent(am.data.sender)+"&messageContent="+encodeURIComponent(am.data.messageContent),contentType:"text/plain",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.conversationReadUpdate=function(am){U.ajax({url:P+V,data:am.data,global:false,type:"get",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.success(an)}}})};U.sendSubscriptionIdToServer=function(an){var am=an.data.subscriptionId;U.ajax({url:P+I,skipEncryption:true,type:"post",data:"registrationId="+am,success:function(ao){},error:function(aq,ap,ao){if(aq.status===401){ALStorage.clearSessionStorageElements();console.log("Please reload page.")}}})};U.getTopicId=function(am){var an="id="+am.data.conversationId;U.ajax({url:P+E+"?"+an,type:"get",success:function(ao){if(am.success){am.success(ao)}},error:function(ao){if(am.error){am.success(ao)}}})};U.getContactDisplayName=function(an){var am=an.data.userIdArray;if(am.length>0&&am[0]){var ar="";var aq=am.filter(function(at,au){return am.indexOf(at)===au});for(var ap=0;ap<aq.length;ap++){var ao=aq[ap];if(typeof MCK_CONTACT_NAME_MAP[ao]==="undefined"){ar+="userIds="+encodeURIComponent(ao)+"&"}}if(ar.lastIndexOf("&")===ar.length-1){ar=ar.substring(0,ar.length-1)}if(ar){U.ajax({url:P+v,data:ar,global:false,type:"get",success:function(at){if(an.success){an.success(at)}},error:function(at){if(an.error){an.success(at)}}})}}};U.getUserStatus=function(am){U.ajax({url:P+J,type:"get",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.success(an)}}})};U.fetchConversationByTopicId=function(am){var an="topic="+am.data.topicId;if(am.data.tabId){an+=(""+am.data.isGroup==="true")?"&groupId="+am.data.tabId:"&userId="+encodeURIComponent(am.data.tabId)}else{if(am.data.clientGroupId){an+="&clientGroupId="+am.data.clientGroupId}else{return false}}if(am.data.pageSize){an+="&pageSize="+am.data.pageSize}U.ajax({url:P+ad,data:an,type:"get",success:function(ao){if(am.success){am.success(ao)}},error:function(ao){if(am.error){am.success(ao)}}})};U.getConversationId=function(am){U.ajax({url:P+f,global:false,data:w.JSON.stringify(am.data),type:"post",contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.success(an)}}})};U.registerClientApi=function(am){U.ajax({url:P+Z,type:"post",data:JSON.stringify(am.data.userPxy),contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.success(an)}}})};U.logout=function(am){U.ajax({url:P+al,type:"post",async:(typeof am.async!=="undefined")?am.async:true,contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};U.getUsersByRole=function(am){var an=ah(am.data);U.ajax({url:P+r+"?"+an,global:false,type:"get",contentType:"application/json",success:function(ao){if(am.success){am.success(ao)}},error:function(ao){if(am.error){am.success(ao)}}})};U.pushNotificationLogout=function(am){U.ajax({url:P+l,type:"post",async:(typeof am.async!=="undefined")?am.async:true,contentType:"application/json",success:function(an){if(am.success){am.success(an)}},error:function(an){if(am.error){am.error(an)}}})};return U}if(typeof(ALApiService)==="undefined"){a.Applozic.ALApiService=b()}else{console.log("ALApiService already defined.")}})(window);(function(a){function b(){var h={};var c;h.events={};var m=null;h.stompClient=null;var j="";h.typingSubscriber=null;h.openGroupSubscriber=[];var k;var o;var g=[];h.mck_typing_status=0;var n;var l="";var e="https://socket.applozic.com";var i="80";h.MCK_TOKEN;h.USER_DEVICE_KEY;var f=new MckUtils();h.init=function(r,p,q){if(r){c=r}if(typeof p!=="undefined"){h.MCK_TOKEN=p.token;h.USER_DEVICE_KEY=p.deviceKey;e=p.websocketUrl;if(typeof p.websocketPort==="undefined"){i=(!f.startsWith(e,"https"))?"15674":"15675"}else{i=p.websocketPort}}h.events=q;if(typeof e!=="undefined"){if(typeof SockJS==="function"){if(!l){l=new SockJS(e+":"+i+"/stomp")}h.stompClient=Stomp.over(l);h.stompClient.heartbeat.outgoing=0;h.stompClient.heartbeat.incoming=0;h.stompClient.onclose=function(){h.disconnect()};h.stompClient.connect("guest","guest",h.onConnect,h.onError,"/");a.addEventListener("beforeunload",function(t){var s;(t.target.activeElement)&&(s=t.target.activeElement.href);if(!s||0===s.length){h.disconnect()}})}}};h.checkConnected=function(p){if(h.stompClient.connected){if(k){clearInterval(k)}if(o){clearInterval(o)}k=setInterval(function(){h.connectToSocket(p)},600000);o=setInterval(function(){h.sendStatus(1)},1200000)}else{h.connectToSocket(p)}};h.connectToSocket=function(p){if(typeof h.connectToSocket==="function"){h.events.connectToSocket(p)}};h.stopConnectedCheck=function(){if(k){clearInterval(k)}if(o){clearInterval(o)}k="";o="";h.disconnect()};h.disconnect=function(){if(h.stompClient&&h.stompClient.connected){h.sendStatus(0);h.stompClient.disconnect();l=""}};h.unsubscibeToTypingChannel=function(){if(h.stompClient&&h.stompClient.connected){if(h.typingSubscriber){if(h.mck_typing_status===1){h.sendTypingStatus(0,j)}h.typingSubscriber.unsubscribe()}}h.typingSubscriber=null};h.unsubscibeToNotification=function(){if(h.stompClient&&h.stompClient.connected){if(m){m.unsubscribe()}}m=null};h.subscibeToTypingChannel=function(p){if(h.stompClient&&h.stompClient.connected){h.typingSubscriber=h.stompClient.subscribe("/topic/typing-"+c+"-"+p,h.onTypingStatus)}else{h.reconnect()}};h.subscribeToOpenGroup=function(q){console.log("adding subscription");if(h.stompClient&&h.stompClient.connected){var p=h.stompClient.subscribe("/topic/group-"+c+"-"+q.contactId,h.onOpenGroupMessage);h.openGroupSubscriber.push(p.id);g[q.contactId]=p.id}else{h.reconnect()}};h.sendTypingStatus=function(p,s,r,q){h.mck_typing_status=s;if(h.stompClient&&h.stompClient.connected){if(p===1&&h.mck_typing_status===1){h.stompClient.send("/topic/typing-"+c+"-"+j,{"content-type":"text/plain"},c+","+r+","+p)}if(q){if(q===j&&p===h.mck_typing_status&&p===1){return}j=q;h.stompClient.send("/topic/typing-"+c+"-"+q,{"content-type":"text/plain"},c+","+r+","+p);setTimeout(function(){h.mck_typing_status=0},60000)}else{if(p===0){h.stompClient.send("/topic/typing-"+c+"-"+j,{"content-type":"text/plain"},c+","+r+","+p)}}h.mck_typing_status=p}};h.onTypingStatus=function(p){if(typeof h.events.onTypingStatus==="function"){h.events.onTypingStatus(p)}};h.reconnect=function(){h.unsubscibeToTypingChannel();h.unsubscibeToNotification();h.disconnect();var p={};p.token=h.MCK_TOKEN;p.deviceKey=h.USER_DEVICE_KEY;p.websocketUrl=e;p.websocketPort=i;h.init(c,p,h.events)};h.onError=function(p){console.log("Error in channel notification. "+p);if(typeof h.events.onConnectFailed==="function"){h.events.onConnectFailed()}};h.sendStatus=function(p){if(h.stompClient&&h.stompClient.connected){h.stompClient.send("/topic/status-v2",{"content-type":"text/plain"},h.MCK_TOKEN+","+h.USER_DEVICE_KEY+","+p)}};h.onConnect=function(){if(h.stompClient.connected){if(m){h.unsubscibeToNotification()}m=h.stompClient.subscribe("/topic/"+h.MCK_TOKEN,h.onMessage);h.sendStatus(1);h.checkConnected(true)}else{setTimeout(function(){m=h.stompClient.subscribe("/topic/"+h.MCK_TOKEN,h.onMessage);h.sendStatus(1);h.checkConnected(true)},5000)}if(typeof h.events.onConnect==="function"){h.events.onConnect()}};h.onOpenGroupMessage=function(p){if(typeof h.events.onOpenGroupMessage==="function"){h.events.onOpenGroupMessage(p)}};h.onMessage=function(v){if(m!=null&&m.id===v.headers.subscription){var x=JSON.parse(v.body);var s=x.type;if(typeof h.events.onMessage==="function"){h.events.onMessage(x)}if(s==="APPLOZIC_04"||s==="MESSAGE_DELIVERED"){h.events.onMessageDelivered(x)}else{if(s==="APPLOZIC_08"||s==="MT_MESSAGE_DELIVERED_READ"){h.events.onMessageRead(x)}else{if(s==="APPLOZIC_05"){h.events.onMessageDeleted(x)}else{if(s==="APPLOZIC_27"){h.events.onConversationDeleted(x)}else{if(s==="APPLOZIC_11"){h.events.onUserConnect(x.message)}else{if(s==="APPLOZIC_12"){var r=x.message.split(",")[1];h.events.onUserDisconnect({userId:q,lastSeenAtTime:r})}else{if(s==="APPLOZIC_29"){h.events.onConversationReadFromOtherSource(x)}else{if(s==="APPLOZIC_28"){h.events.onConversationRead(x)}else{if(s==="APPLOZIC_16"){var p=x.message.split(":")[0];var q=x.message.split(":")[1];h.events.onUserBlocked({status:p,userId:q})}else{if(s==="APPLOZIC_17"){var p=x.message.split(":")[0];var q=x.message.split(":")[1];h.events.onUserUnblocked({status:p,userId:q})}else{if(s==="APPLOZIC_18"){h.events.onUserActivated()}else{if(s==="APPLOZIC_19"){h.events.onUserDeactivated()}else{var u=x.message;if(s==="APPLOZIC_03"){h.events.onMessageSentUpdate({messageKey:u.key})}else{if(s==="APPLOZIC_01"||s==="MESSAGE_RECEIVED"){var t=alMessageService.getMessageFeed(u);h.events.onMessageReceived({message:t})}else{if(s==="APPLOZIC_02"){var t=alMessageService.getMessageFeed(u);h.events.onMessageSent({message:t})}}}}}}}}}}}}}}}}};return h}if(typeof(ALSocket)==="undefined"){a.Applozic.ALSocket=b()}else{console.log("ALSocket already defined.")}})(window);var mckNotificationUtils=new MckNotificationUtils();var alNotificationService=new AlNotificationService();function AlNotificationService(){var i=this;var a;var c;var f;var e;var h;var b="/rest/ws/plugin/update/sw/id";var g=true;i.init=function(j){a=(typeof j.swNotification==="boolean")?j.swNotification:false;c=j.contactDisplayImage;f=j.notificationIconLink;e=(typeof j.desktopNotification==="boolean")?j.desktopNotification:false};i.unsubscribeToServiceWorker=function(){if(h){navigator.serviceWorker.ready.then(function(j){h.unsubscribe().then(function(k){h=null;console.log("Unsubscribed to notification successfully")})})}};i.sendSubscriptionIdToServer=function(){if(h){var j=h.endpoint.split("/").slice(-1)[0];if(j){window.Applozic.ALApiService.sendSubscriptionIdToServer({data:{subscriptionId:j},success:function(k){},error:function(){}})}}};i.subscribeToServiceWorker=function(){if(a){if("serviceWorker" in navigator){navigator.serviceWorker.register("./service-worker.js",{scope:"./"});navigator.serviceWorker.ready.then(function(j){j.pushManager.subscribe({userVisibleOnly:true}).then(function(k){console.log("The reg ID is:: ",k.endpoint.split("/").slice(-1));h=k;i.sendSubscriptionIdToServer()})})}}}}function MckNotificationUtils(){var i=this;var k=window.top;var j="default",b="granted",h="denied",f=[b,j,h],e=(function(){var n=false;try{n=!!(k.Notification||k.webkitNotifications||navigator.mozNotification||(k.external&&k.external.msIsSiteMode()!==undefined))}catch(o){}return n}()),g=function(n){return(n&&(n).constructor===Function)},c=function(n){return(n&&(n).constructor===String)},m=function(n){return(n&&(n).constructor===Object)},a=Math.floor((Math.random()*10)+1),l=function(){};i.permissionLevel=function(){var n;if(!e){return}if(k.Notification&&k.Notification.permissionLevel){n=k.Notification.permissionLevel()}else{if(k.webkitNotifications&&k.webkitNotifications.checkPermission){n=f[k.webkitNotifications.checkPermission()]}else{if(k.Notification&&k.Notification.permission){n=k.Notification.permission}else{if(navigator.mozNotification){n=b}else{if(k.external&&(k.external.msIsSiteMode()!==undefined)){n=k.external.msIsSiteMode()?b:j}}}}}return n};i.requestPermission=function(o){var n=g(o)?o:l;if(k.webkitNotifications&&k.webkitNotifications.checkPermission){k.webkitNotifications.requestPermission(n)}else{if(k.Notification&&k.Notification.requestPermission){k.Notification.requestPermission(n)}}};i.isChrome=function(){return/chrom(e|ium)/.test(k.navigator.userAgent.toLowerCase())};i.getNotification=function(n,o,s,r){if(r){r.play();setTimeout(function(){r.stop()},1000)}var q;if(k.Notification){var p={icon:o,body:s};q=new k.Notification(n,p);q.onclick=function(){k.focus();this.close()}}else{if(k.webkitNotifications){q=k.webkitNotifications.createNotification(o,n,s);if(r){q.show()}if(i.isChrome()){q.onclick=function(){k.focus();this.cancel()}}q.show();setTimeout(function(){q.cancel()},30000)}else{if(navigator.mozNotification){q=navigator.mozNotification.createNotification(n,s,o);q.show()}else{if(k.external&&k.external.msIsSiteMode()){k.external.msSiteModeClearIconOverlay();k.external.msSiteModeSetIconOverlay(o,n);k.external.msSiteModeActivate();q={ieVerification:a+1}}}}}return q};i.sendDesktopNotification=function(n,o,s,r){if(i.permissionLevel()!==b){k.Notification.requestPermission()}if(i.permissionLevel()===b){var q;if(r){q=i.getNotification(n,o,s,r)}else{q=i.getNotification(n,o,s)}var p=i.getWrapper(q);if(q&&!q.ieVerification&&q.addEventListener){q.addEventListener("show",function(){var t=p;k.setTimeout(function(){t.close()},30000)})}}};i.getWrapper=function(n){return{close:function(){if(n){if(n.close){n.close()}else{if(n.cancel){n.cancel()}else{if(k.external&&k.external.msIsSiteMode()){if(n.ieVerification===a){k.external.msSiteModeClearIconOverlay()}}}}}}}}}var mckGroupUtils=new MckGroupUtils;var mckGroupService=new MckGroupService();function MckGroupUtils(){var a=this;a.getGroup=function(b){if(typeof MCK_GROUP_MAP[b]==="object"){return MCK_GROUP_MAP[b]}else{return}};a.getGroupByClientGroupId=function(b){if(typeof MCK_CLIENT_GROUP_MAP[b]==="object"){return MCK_CLIENT_GROUP_MAP[b]}else{return}};a.addGroup=function(f){var e=(f.name)?f.name:f.id;var g=[];$applozic.each(f.groupUsers,function(j,h){if(h.userId){g[h.userId]=h}});var c=(typeof f.removedMembersId!=="undefined")?f.removedMembersId:[];var b={contactId:f.id.toString(),htmlId:mckContactUtils.formatContactId(""+f.id),displayName:e,value:f.id.toString(),adminName:f.adminId?f.adminId:f.adminName,type:f.type,members:f.membersId?f.membersId:f.membersName,imageUrl:f.imageUrl,users:g,userCount:f.userCount,removedMembersId:c,clientGroupId:f.clientGroupId,isGroup:true,deletedAtTime:f.deletedAtTime,metadata:f.metadata,};MCK_GROUP_MAP[f.id]=b;if(f.clientGroupId){MCK_CLIENT_GROUP_MAP[f.clientGroupId]=b}return b};a.createGroup=function(b){var c={contactId:b.toString(),htmlId:mckContactUtils.formatContactId(""+b),displayName:b.toString(),value:b.toString(),type:2,adminName:"",imageUrl:"",userCount:"",users:[],removedMembersId:[],clientGroupId:"",isGroup:true,deletedAtTime:""};MCK_GROUP_MAP[b]=c;return c}}function MckGroupService(){var j=this;var i;var h;var m;var k=[];var f=[];var g="/rest/ws/group/list";var a="/rest/ws/group/info";var l="/rest/ws/group/left";var e="/rest/ws/group/update";var c="/rest/ws/group/add/member";var b="/rest/ws/group/remove/member";MCK_GROUP_ARRAY=new Array();j.init=function(n){i=n.visitor;h=(i)?"guest":$applozic.trim(n.userId);m=n.openGroupSettings};j.loadGroups=function(o){var n=new Object();window.Applozic.ALApiService.loadGroups({baseUrl:MCK_BASE_URL,success:function(p){if(p.status==="success"){n.status="success";n.data=p.response;if(o.apzCallback){o.apzCallback(n)}}else{n.status="error"}if(o.callback){o.callback(n)}},error:function(){console.log("Unable to load groups. Please reload page.");n.status="error";if(o.callback){o.callback(n)}if(o.apzCallback){o.apzCallback(n)}}})};j.getGroupFeed=function(p){var o={};if(typeof p.callback==="function"||typeof p.apzCallback==="function"){var n=new Object()}else{return}if(p.groupId){o.groupId=p.groupId}else{if(p.clientGroupId){o.clientGroupId=p.clientGroupId}else{if(typeof p.callback==="function"){n.status="error";n.errorMessage="GroupId or Client GroupId Required";p.callback(n)}return}}if(p.conversationId){o.conversationId=p.conversationId}Applozic.ALApiService.getGroupInfo({data:o,success:function(q){if(q.status==="success"){var r=q.response;if(r+""==="null"||typeof r!=="object"){q.status="error";q.errorMessage="GroupId not found"}else{var s=mckGroupUtils.addGroup(r);q.status="success";q.data=s}}else{if(q.status==="error"){q.status="error";q.errorMessage=q.errorResponse[0].description}}if(p.callback){p.callback(q)}if(p.apzCallback){if(q.status==="success"){q.data=r}p.apzCallback(q,p)}},error:function(){console.log("Unable to load group. Please reload page.");n.status="error";n.errorMessage="Please reload page.";if(p.callback){p.callback(n)}if(p.apzCallback){p.apzCallback(n,p)}}})};j.leaveGroup=function(p){var o={};var n=new Object();if(p.groupId){o.groupId=p.groupId}else{if(p.clientGroupId){o.clientGroupId=p.clientGroupId}else{n.status="error";n.errorMessage="GroupId or Client GroupId Required";if(p.callback){p.callback(n)}return}}Applozic.ALApiService.groupLeave({data:o,success:function(r){if(r.status==="success"){if(p.clientGroupId){var q=mckGroupUtils.getGroupByClientGroupId(p.clientGroupId);if(typeof q==="object"){p.groupInfo=q.contactId}}n.status="success";n.data={groupId:p.groupId}}else{n.status="error";n.errorMessage=r.errorResponse[0].description}if(p.callback){p.callback(n)}if(p.apzCallback){p.apzCallback(n,{groupId:p.groupId})}},error:function(){console.log("Unable to process your request. Please reload page.");n.status="error";n.errorMessage="";if(p.callback){p.callback(n)}if(p.apzCallback){p.apzCallback(n)}}})};j.removeGroupMemberFromChat=function(p){var o={};var n=new Object();if(p.groupId){o.groupId=p.groupId}else{if(p.clientGroupId){o.clientGroupId=p.clientGroupId}else{n.status="error";n.errorMessage="GroupId or Client GroupId Required";if(typeof p.callback==="function"){p.callback(n)}return}}o.userId=p.userId;Applozic.ALApiService.removeGroupMember({data:o,success:function(q){if(q.status==="success"){if(p.clientGroupId){var r=mckGroupUtils.getGroupByClientGroupId(p.clientGroupId);if(typeof r==="object"){p.groupId=r.contactId}}q.status="success"}else{q.status="error";q.errorMessage=data.errorResponse[0].description}if(p.callback){p.callback(q)}if(p.apzCallback){p.apzCallback(q,p)}},error:function(){console.log("Unable to process your request. Please reload page.");n.status="error";n.errorMessage="";if(p.callback){p.callback(n)}if(p.apzCallback){p.apzCallback(n)}p.apzCallback(n)}})};j.addGroupMember=function(p){var o={};var n=new Object();if(p.groupId){o.groupId=p.groupId}else{if(p.clientGroupId){o.clientGroupId=p.clientGroupId}else{if(typeof p.callback==="function"){p.callback(n)}return}}o.userId=p.userId;if(typeof p.role!=="undefined"){o.role=p.role}Applozic.ALApiService.addGroupMember({data:{group:o},success:function(q){if(q.status==="success"){if(p.clientGroupId){var r=mckGroupUtils.getGroupByClientGroupId(p.clientGroupId);if(typeof r==="object"){p.groupId=r.contactId}}n.status="success";n.data=q.response}else{n.status="error";n.errorMessage=q.errorResponse[0].description}if(p.callback){p.callback(n)}if(p.apzCallback){p.apzCallback(n,p)}},error:function(){console.log("Unable to process your request. Please reload page.");n.status="error";n.errorMessage="";if(p.callback){p.callback(n)}if(p.apzCallback){p.apzCallback(n)}}})};j.updateGroupInfo=function(p){var o={};var n=new Object();if(p.groupId){o.groupId=p.groupId}else{if(p.clientGroupId){o.clientGroupId=p.clientGroupId}else{if(typeof p.callback==="function"){n.status="error";n.errorMessage="GroupId or Client GroupId Required";p.callback(n)}return}}if(p.name){o.newName=p.name}if(p.imageUrl){o.imageUrl=p.imageUrl}if(p.users&&p.users.length>0){o.users=p.users}Applozic.ALApiService.groupUpdate({data:o,success:function(q,r){if(q.status==="success"){if(p.clientGroupId){var r=mckGroupLayout.getGroupByClientGroupId(p.clientGroupId);if(typeof r==="object"){p.groupId=r.contactId}}n.status="success";n.data=q.response}else{n.status="error";n.errorMessage=q.errorResponse[0].description}if(p.callback){p.callback(n)}if(p.apzCallback){p.apzCallback(n,{groupId:p.groupId,groupInfo:r,users:p.users})}},error:function(){console.log("Unable to process your request. Please reload page.");n.status="error";n.errorMessage="Unable to process your request. Please reload page.";if(p.callback){p.callback(n)}if(p.apzCallback){p.apzCallback(n)}}})};j.sendGroupMessage=function(q){if(typeof q==="object"){q=$applozic.extend(true,{},message_default_options,q);var o=q.message;if(!q.groupId&&!q.clientGroupId){return"groupId or clientGroupId required"}if(typeof o==="undefined"||o===""){return"message field required"}if(q.type>12){return"invalid message type"}o=$applozic.trim(o);var n={type:q.messageType,contentType:q.type,message:o};if(q.groupId){n.groupId=$applozic.trim(q.groupId)}else{if(q.clientGroupId){var p=mckGroupUtils.getGroupByClientGroupId(q.clientGroupId);if(typeof p==="undefined"){return"group not found"}n.clientGroupId=$applozic.trim(q.clientGroupId)}}mckMessageService.sendMessage(n);return"success"}else{return"Unsupported format. Please check format"}};j.getContactFromGroupOfTwo=function(p,q){var n;for(var o=0;o<p.members.length;o++){n=""+p.members[o];if(h===n){continue}if(typeof q==="function"){q(n)}return n}};j.addGroupFromMessage=function(o,r,q){var n=o.groupId;var p=mckGroupUtils.getGroup(""+n);if(typeof p==="undefined"){p=mckGroupUtils.createGroup(n);mckGroupService.loadGroups({apzCallback:mckGroupLayout.loadGroups})}if(typeof q==="function"){q(p,o,r)}};j.isGroupDeleted=function(o,p){if(p){var n=mckGroupLayout.getDeletedAtTime(o);return(typeof n!=="undefined"&&n>0)}return false};j.loadGroupsCallback=function(o){var n=o.data;MCK_GROUP_ARRAY.length=0;$applozic.each(n,function(p,q){if((typeof q.id!=="undefined")){var q=mckGroupUtils.addGroup(q);MCK_GROUP_ARRAY.push(q)}})};j.getGroupDisplayName=function(q){if(typeof MCK_GROUP_MAP[q]==="object"){var s=MCK_GROUP_MAP[q];var o=s.displayName;var r=[];if(s.type===7){var n=j.getContactFromGroupOfTwo(s);if(typeof n!=="undefined"){if(!alUserService.MCK_USER_DETAIL_MAP[n]){r.push(n);window.Applozic.ALApiService.getUserDetail({data:r,success:function(t){if(t.response.length>0){$applozic.each(t.response,function(u,v){alUserService.MCK_USER_DETAIL_MAP[v.userId]=v;if(alUserService.MCK_USER_DETAIL_MAP[n]&&alUserService.MCK_USER_DETAIL_MAP[n].displayName){o=alUserService.MCK_USER_DETAIL_MAP[n].displayName}})}}})}else{if(alUserService.MCK_USER_DETAIL_MAP[n]&&alUserService.MCK_USER_DETAIL_MAP[n].displayName){o=alUserService.MCK_USER_DETAIL_MAP[n].displayName}}}}if(s.type===3){if(o.indexOf(h)!==-1){o=o.replace(h,"").replace(":","");if(typeof(MCK_GETUSERNAME)==="function"){var p=(MCK_GETUSERNAME(o));o=(p)?p:o}}}if(!o&&s.type===5){o="Broadcast"}if(!o){o=s.contactId}return o}else{return q}};j.getGroupImage=function(n){return(n)?'<img src="'+n+'"/>':'<img src="'+MCK_BASE_URL+'/resources/sidebox/css/app/images/mck-icon-group.png"/>'};j.getGroupDefaultIcon=function(){return'<div class="mck-group-icon-default"></div>'};j.addMemberToGroup=function(o,n){if(typeof o.members==="object"){if(o.members.indexOf(n)===-1){o.members.push(n)}if(typeof o.removedMembersId==="object"&&(o.removedMembersId.indexOf(n)!==-1)){o.removedMembersId.splice(o.removedMembersId.indexOf(n),1)}MCK_GROUP_MAP[o.contactId]=o}return o};j.removeMemberFromGroup=function(o,n){if(typeof o.removedMembersId!=="object"||o.removedMembersId.length<1){o.removedMembersId=[];o.removedMembersId.push(n)}else{if(o.removedMembersId.indexOf(n)===-1){o.removedMembersId.push(n)}}MCK_GROUP_MAP[o.contactId]=o;return o};j.authenticateGroupUser=function(p){var o=mckGroupService.isGroupLeft(p);var q=false;if(!o&&p.members.length>0){for(var n=0;n<p.members.length;n++){if(h===""+p.members[n]){q=true;return true}}}return q};j.isAppendOpenGroupContextMenu=function(n){if(m.deleteChatAccess===0){return false}var o=mckGroupService.authenticateGroupUser(n);if(!o){return false}if(n.adminName===h){return true}if(m.deleteChatAccess===2){return true}return false};j.isGroupLeft=function(o){var n=false;if(o.removedMembersId&&o.removedMembersId.length>0){$applozic.each(o.removedMembersId,function(p,q){if(q===h){n=true}})}return n}}var alUserService=new AlUserService();function AlUserService(){var f=this;f.MCK_USER_DETAIL_MAP=[];f.MCK_BLOCKED_TO_MAP=[];var c=new Array();var b="/rest/ws/user/block";var e="/rest/ws/user/v2/detail";var a="/rest/ws/user/chat/status";f.updateUserStatus=function(i,j){if(typeof alUserService.MCK_USER_DETAIL_MAP[i.userId]==="object"){var h=alUserService.MCK_USER_DETAIL_MAP[i.userId];if(i.status===0){h.connected=false;h.lastSeenAtTime=i.lastSeenAtTime}else{if(i.status===1){h.connected=true}}}else{var g=new Array();g.push(i.userId);if(typeof j==="function"){j(g)}}};f.getUserDetail=function(g){if(typeof alUserService.MCK_USER_DETAIL_MAP[g]==="object"){return alUserService.MCK_USER_DETAIL_MAP[g]}else{return}};f.checkUserConnectedStatus=function(i){var g=new Array();var h=new Array();$applozic(".mck-user-ol-status").each(function(){var k=$applozic(this).data("mck-id");if(typeof k!=="undefined"&&k!==""){g.push(k);var j=mckContactUtils.formatContactId(""+k);$applozic(this).addClass(j);$applozic(this).next().addClass(j)}});if(g.length>0){$applozic.each(g,function(k,j){if(typeof alUserService.MCK_USER_DETAIL_MAP[j]==="undefined"){h.push(j)}});if(typeof i==="function"){i(h)}}};f.loadUserProfile=function(i){if(typeof i!=="undefined"){typeof i!=="string"&&(i=String(i));var h=[];var g=""+i.split(",")[0];h.push(g);f.loadUserProfiles(h)}};f.loadUserProfiles=function(h,i){var g=[];if(typeof i==="function"){i(h,g)}};f.getUserStatus=function(h,i){var g=new Object();window.Applozic.ALApiService.getUserStatus({success:function(j){if(j.users.length>0){c=[];if(typeof i==="function"){i(j)}}g.status="success";g.data=j;if(h.callback){h.callback(g)}return},error:function(){g.status="error";if(h.callback){h.callback(g)}}})};f.blockUser=function(h,g,j){if(!h||typeof g==="undefined"){return}var i="userId="+h+"&block="+g;mckUtils.ajax({url:MCK_BASE_URL+b,type:"get",data:i,success:function(k){if(typeof k==="object"){if(k.status==="success"){alUserService.MCK_BLOCKED_TO_MAP[h]=g;if(typeof j==="function"){j(h)}}}},error:function(){}})}}var alFileService=new AlFileService();function AlFileService(){var q=this;var o=1024;var h=1048576;var l=["CREATE","UPDATE"];var g="/rest/ws/aws/file/";var j="/rest/ws/aws/file/url";var m="/rest/ws/upload/file";var r="/rest/ws/aws/file/delete";var n="www.googleapis.com";var e;var s;var p;var i;var b;var t;var a;var c;var f;var k;q.init=function(u){s=u.fileBaseUrl;t=btoa(u.userId+":"+u.deviceKey);a=u.deviceKey};q.get=function(u){b=u.appId;e=u.customUploadUrl;i=u.fileupload;p=u.mapStaticAPIkey;c=u.accessToken;f=u.appModuleName;k=u.genereateCloudFileUrl};q.deleteFileMeta=function(u){window.Applozic.ALApiService.deleteFileMeta({data:{blobKey:u,url:s+r+"?key="+u,},success:function(v){console.log(v)},error:function(){}})};q.getFilePreviewPath=function(u){return(typeof u==="object")?'<a href="'+s+g+u.blobKey+'" target="_blank">'+u.name+"</a>":""};q.getFilePreviewSize=function(u){if(u){if(u>h){return"("+parseInt(u/h)+" MB)"}else{if(u>o){return"("+parseInt(u/o)+" KB)"}else{return"("+parseInt(u)+" B)"}}}return""};q.getFileurl=function(v){if(typeof v.fileMeta==="object"){if((v.fileMeta).hasOwnProperty("url")){if(((v.fileMeta.url).indexOf(n)!==-1)){var u;q.generateCloudUrl(v.fileMeta.blobKey,function(x){u=x});return u}else{return""+v.fileMeta.url}}else{if((v.fileMeta.thumbnailUrl==="thumbnail_"+v.fileMeta.name)){return e+"/files/"+v.fileMeta.name}else{return s+g+v.fileMeta.blobKey}}}return""};q.generateCloudUrl=function(v,y){var u=k.replace("{key}",v);var x=window.Applozic.ALApiService.getAttachmentHeaders();mckUtils.ajax({type:"get",async:false,skipEncryption:true,headers:x,url:u,success:function(z){if(typeof y==="function"){y(z)}},error:function(z){console.log("error while getting token"+z)}})};q.getFilePath=function(z){if(z.contentType===2){try{var u=$applozic.parseJSON(z.message);if(u.lat&&u.lon){return'<a href="http://maps.google.com/maps?z=17&t=m&q=loc:'+u.lat+","+u.lon+'" target="_blank"><img src="https://maps.googleapis.com/maps/api/staticmap?zoom=17&size=200x150&center='+u.lat+","+u.lon+"&maptype=roadmap&markers=color:red|"+u.lat+","+u.lon+"&key="+p+'"/></a>'}}catch(x){if(z.message.indexOf(",")!==-1){return'<a href="http://maps.google.com/maps?z=17&t=m&q=loc:'+z.message+'" target="_blank"><img src="https://maps.googleapis.com/maps/api/staticmap?zoom=17&size=200x150&center='+z.message+"&maptype=roadmap&markers=color:red|"+z.message+"&key="+p+'" /></a>'}}}if(typeof z.fileMeta==="object"){if(z.fileMeta.contentType.indexOf("image")!==-1){if(z.fileMeta.contentType.indexOf("svg")!==-1){return'<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="'+z.fileMeta.contentType+'" data-url="'+q.getFileurl(z)+'" data-name="'+z.fileMeta.name+'"><img src="'+q.getFileurl(z)+'" area-hidden="true"></img></a>'}else{if(z.contentType===5){return'<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="'+z.fileMeta.contentType+'" data-url="'+z.fileMeta.blobKey+'" data-name="'+z.fileMeta.name+'"><img src="'+z.fileMeta.blobKey+'" area-hidden="true"></img></a>'}else{if((z.fileMeta).hasOwnProperty("url")){if((z.fileMeta.url).indexOf(n)!==-1){var y;q.generateCloudUrl(z.fileMeta.thumbnailBlobKey,function(A){y=A});return'<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="'+z.fileMeta.contentType+'" data-url="" data-blobKey="'+z.fileMeta.blobKey+'" data-name="'+z.fileMeta.name+'"><img src="'+y+'" area-hidden="true"></img></a>'}else{return'<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="'+z.fileMeta.contentType+'" data-url="'+q.getFileurl(z)+'" data-name="'+z.fileMeta.name+'"><img src="'+z.fileMeta.thumbnailUrl+'" area-hidden="true"></img></a>'}}else{if((z.fileMeta.thumbnailUrl==="thumbnail_"+z.fileMeta.name)){return'<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="'+z.fileMeta.contentType+'" data-url="'+q.getFileurl(z)+'" data-name="'+z.fileMeta.name+'"><img src="'+e+"/files/thumbnail_"+z.fileMeta.name+'" area-hidden="true"></img></a>'}else{return'<a href="#" role="link" target="_self" class="file-preview-link fancybox-media imageview" data-type="'+z.fileMeta.contentType+'" data-url="'+q.getFileurl(z)+'" data-name="'+z.fileMeta.name+'"><img src="'+z.fileMeta.thumbnailUrl+'" area-hidden="true"></img></a>'}}}}}else{if(z.fileMeta.contentType.indexOf("video")!==-1){if(((z.fileMeta).hasOwnProperty("url"))&&((z.fileMeta.url).indexOf(n)!==-1)){var v;q.generateCloudUrl(z.fileMeta.blobKey,function(A){v=A});return'<a href="#" target="_self"><video controls class="mck-video-player" onplay="alFileService.updateAudVidUrl(this);" data-cloud-service="google_cloud" data-blobKey="'+z.fileMeta.blobKey+'"><source src="'+v+'" type="video/mp4"><source src="'+v+'" type="video/ogg"></video>'}else{return'<a href= "#" target="_self"><video controls class="mck-video-player"><source src="'+q.getFileurl(z)+'" type="video/mp4"><source src="'+q.getFileurl(z)+'" type="video/ogg"></video></a>'}}else{if(z.fileMeta.contentType.indexOf("audio")!==-1){if(((z.fileMeta).hasOwnProperty("url"))&&((z.fileMeta.url).indexOf(n)!==-1)){var v;q.generateCloudUrl(z.fileMeta.blobKey,function(A){v=A});return'<a href="#" target="_self"><audio controls class="mck-audio-player" onplay="alFileService.updateAudVidUrl(this);" data-cloud-service="google_cloud" data-blobKey="'+z.fileMeta.blobKey+'"><source src="'+v+'" type="audio/ogg"><source src="'+v+'" type="audio/mpeg"></audio><p class="mck-file-tag"></p></a>'}else{return'<a href="#" target="_self"><audio controls class="mck-audio-player"><source src="'+q.getFileurl(z)+'" type="audio/ogg"><source src="'+q.getFileurl(z)+'" type="audio/mpeg"></audio><p class="mck-file-tag"></p></a>'}}else{return'<a href="#" role="link" class="file-preview-link" target="_self"></a>'}}}}return""};q.updateAudVidUrl=function(y){var x=y.dataset.blobkey;var z=new Date().getTime();var u=y.currentSrc;var v=q.fetchQueryString("Expires",u);if(z>=(v*1000)){q.generateCloudUrl(x,function(A){getUrl=A});y.src=getUrl}};this.fetchQueryString=function(y,x){y=y.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var v=new RegExp("[\\?&]"+y+"=([^&#]*)");var u=v.exec(x);if(u==null){console.log("The parameter is null for the searchedquery")}return(u[1])};q.getFileAttachment=function(u){if(typeof u.fileMeta==="object"){if(u.fileMeta.contentType.indexOf("image")!==-1||(u.fileMeta.contentType.indexOf("audio")!==-1)||(u.fileMeta.contentType.indexOf("video")!==-1)){if((u.fileMeta).hasOwnProperty("url")&&((u.fileMeta.url).indexOf(n)!==-1)){return'<a href="javascript:void(0);" role="link" target="_self"  class="file-preview-link" data-blobKey="'+u.fileMeta.blobKey+'" data-cloud-service="google_cloud"><span class="file-detail mck-image-download"><span class="mck-file-name"><span class="mck-attachement-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><g data-name="Group 122"><path fill="none" d="M0 0h24v24H0z" data-name="Rectangle 1"/><path d="M19.00483767 16.29529691l-11.90272845-.0417193a4.358 4.358 0 0 1-4.32607928-4.32607929A4.259 4.259 0 0 1 7.0483691 7.65515915l10.48639356.03394113v.70710678L7.07241074 8.3382243a3.61826547 3.61826547 0 1 0 .00141421 7.2365308l11.89990002.03889087a2.647 2.647 0 0 0 2.68700577-2.68700576 2.688 2.688 0 0 0-2.70680476-2.70680476l-10.15476048-.0615183a1.774 1.774 0 0 0-1.75998878 1.75998879 1.8 1.8 0 0 0 1.76776695 1.76776695l8.82681395.02899138v.70710678l-8.81832866-.02333453a2.491 2.491 0 0 1-2.47840927-2.47840926 2.46 2.46 0 0 1 2.46426713-2.46426714l10.18375186.0311127a3.462 3.462 0 0 1 3.4400745 3.4400745 3.424 3.424 0 0 1-3.4202755 3.3679496z" data-name="Path 1"/></g></svg></span>&nbsp;'+u.fileMeta.name+'</span>&nbsp;<span class="file-size">'+alFileService.getFilePreviewSize(u.fileMeta.size)+"</span></span></a>"}else{return'<a href="'+q.getFileurl(u)+'" role="link" target="_self"  class="file-preview-link"><span class="file-detail mck-image-download"><span class="mck-file-name"><span class="mck-attachement-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><g data-name="Group 122"><path fill="none" d="M0 0h24v24H0z" data-name="Rectangle 1"/><path d="M19.00483767 16.29529691l-11.90272845-.0417193a4.358 4.358 0 0 1-4.32607928-4.32607929A4.259 4.259 0 0 1 7.0483691 7.65515915l10.48639356.03394113v.70710678L7.07241074 8.3382243a3.61826547 3.61826547 0 1 0 .00141421 7.2365308l11.89990002.03889087a2.647 2.647 0 0 0 2.68700577-2.68700576 2.688 2.688 0 0 0-2.70680476-2.70680476l-10.15476048-.0615183a1.774 1.774 0 0 0-1.75998878 1.75998879 1.8 1.8 0 0 0 1.76776695 1.76776695l8.82681395.02899138v.70710678l-8.81832866-.02333453a2.491 2.491 0 0 1-2.47840927-2.47840926 2.46 2.46 0 0 1 2.46426713-2.46426714l10.18375186.0311127a3.462 3.462 0 0 1 3.4400745 3.4400745 3.424 3.424 0 0 1-3.4202755 3.3679496z" data-name="Path 1"/></g></svg></span>&nbsp;'+u.fileMeta.name+'</span>&nbsp;<span class="file-size">'+alFileService.getFilePreviewSize(u.fileMeta.size)+"</span></span></a>"}}else{return'<a href="'+q.getFileurl(u)+'" role="link" target="_self"  class="file-preview-link"><span class="file-detail mck-image-download"><span class="mck-file-name"><span class="mck-attachement-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><g data-name="Group 122"><path fill="none" d="M0 0h24v24H0z" data-name="Rectangle 1"/><path d="M19.00483767 16.29529691l-11.90272845-.0417193a4.358 4.358 0 0 1-4.32607928-4.32607929A4.259 4.259 0 0 1 7.0483691 7.65515915l10.48639356.03394113v.70710678L7.07241074 8.3382243a3.61826547 3.61826547 0 1 0 .00141421 7.2365308l11.89990002.03889087a2.647 2.647 0 0 0 2.68700577-2.68700576 2.688 2.688 0 0 0-2.70680476-2.70680476l-10.15476048-.0615183a1.774 1.774 0 0 0-1.75998878 1.75998879 1.8 1.8 0 0 0 1.76776695 1.76776695l8.82681395.02899138v.70710678l-8.81832866-.02333453a2.491 2.491 0 0 1-2.47840927-2.47840926 2.46 2.46 0 0 1 2.46426713-2.46426714l10.18375186.0311127a3.462 3.462 0 0 1 3.4400745 3.4400745 3.424 3.424 0 0 1-3.4202755 3.3679496z" data-name="Path 1"/></g></svg></span>&nbsp;'+u.fileMeta.name+'</span>&nbsp;<span class="file-size">'+alFileService.getFilePreviewSize(u.fileMeta.size)+"</span></span></a>"}return""}};q.getFileIcon=function(u){if(u.fileMetaKey&&typeof u.fileMeta==="object"){if(u.fileMeta.contentType.indexOf("image")!==-1){return'<span class="mck-icon--camera"><svg xmlns="http://www.w3.org/2000/svg" width="17" height="17" viewBox="0 0 24 24"><circle cx="12" cy="12" r="3.2" fill="rgba(38,50,56,.52)"/><path d="M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z" fill="rgba(38,50,56,.52)"/><path d="M0 0h24v24H0z" fill="none"/></svg></span>&nbsp;<span>Image</span>'}else{if(u.fileMeta.contentType.indexOf("audio")!==-1){return'<span class="mck-attachement-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><g data-name="Group 122"><path fill="none" d="M0 0h24v24H0z" data-name="Rectangle 1"/><path d="M19.00483767 16.29529691l-11.90272845-.0417193a4.358 4.358 0 0 1-4.32607928-4.32607929A4.259 4.259 0 0 1 7.0483691 7.65515915l10.48639356.03394113v.70710678L7.07241074 8.3382243a3.61826547 3.61826547 0 1 0 .00141421 7.2365308l11.89990002.03889087a2.647 2.647 0 0 0 2.68700577-2.68700576 2.688 2.688 0 0 0-2.70680476-2.70680476l-10.15476048-.0615183a1.774 1.774 0 0 0-1.75998878 1.75998879 1.8 1.8 0 0 0 1.76776695 1.76776695l8.82681395.02899138v.70710678l-8.81832866-.02333453a2.491 2.491 0 0 1-2.47840927-2.47840926 2.46 2.46 0 0 1 2.46426713-2.46426714l10.18375186.0311127a3.462 3.462 0 0 1 3.4400745 3.4400745 3.424 3.424 0 0 1-3.4202755 3.3679496z" data-name="Path 1"/></g></svg></span>&nbsp;<span>Audio</span>'}else{if(u.fileMeta.contentType.indexOf("video")!==-1){return'<span class="mck-icon--video"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="22" height="22"><path fill="rgba(38,50,56,.52)" d="M17 10.5V7c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v10c0 .55.45 1 1 1h12c.55 0 1-.45 1-1v-3.5l2.29 2.29c.63.63 1.71.18 1.71-.71V8.91c0-.89-1.08-1.34-1.71-.71L17 10.5z"/></svg></span>&nbsp;<span class="mck-icon-video-text">Video</span>'}else{return'<span class="mck-attachement-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="20" height="20"><g data-name="Group 122"><path fill="none" d="M0 0h24v24H0z" data-name="Rectangle 1"/><path d="M19.00483767 16.29529691l-11.90272845-.0417193a4.358 4.358 0 0 1-4.32607928-4.32607929A4.259 4.259 0 0 1 7.0483691 7.65515915l10.48639356.03394113v.70710678L7.07241074 8.3382243a3.61826547 3.61826547 0 1 0 .00141421 7.2365308l11.89990002.03889087a2.647 2.647 0 0 0 2.68700577-2.68700576 2.688 2.688 0 0 0-2.70680476-2.70680476l-10.15476048-.0615183a1.774 1.774 0 0 0-1.75998878 1.75998879 1.8 1.8 0 0 0 1.76776695 1.76776695l8.82681395.02899138v.70710678l-8.81832866-.02333453a2.491 2.491 0 0 1-2.47840927-2.47840926 2.46 2.46 0 0 1 2.46426713-2.46426714l10.18375186.0311127a3.462 3.462 0 0 1 3.4400745 3.4400745 3.424 3.424 0 0 1-3.4202755 3.3679496z" data-name="Path 1"/></g></svg></span>&nbsp;<span>File</span>'}}}}else{return""}};q.downloadfile=function(){var u=q.getFileurl(msg);var x=document.createElement("a");x.download=thefilename;x.setAttribute("href",u);var v="data:text/csv;charset=utf-8;base64,"+someb64data;x.href=v;document.body.appendChild(x);x.click();document.body.removeChild(x)}}(function(b){function a(){var c={};c.logout=function(){if(typeof b.Applozic.ALSocket!=="undefined"){b.Applozic.ALApiService.setAjaxHeaders("","","","","");b.Applozic.ALSocket.disconnect();ALStorage.clearSessionStorageElements()}};return c}if(typeof(AlCustomService)==="undefined"){b.Applozic.AlCustomService=a()}else{console.log("ALCustomService already defined.")}})(window);var alMessageService=new AlMessageService();function AlMessageService(){var i=this;var g;var c;var k;var n="/rest/ws/conversation/topicId";var a="/rest/ws/conversation/id";var l="/rest/ws/conversation/get";var h="/rest/ws/message/add/inbox";var b="/rest/ws/conversation/close";var m="/rest/ws/message/delete/conversation";var j="/rest/ws/message/read/conversation";var f='<div id="mck-ofl-blk" class="mck-m-b"><div class="mck-clear"><div class="blk-lg-12 mck-text-light mck-text-muted mck-test-center">${userIdExpr} is offline now</div></div></div>';var e;i.init=function(o){k=o.fileBaseUrl;g=o.visitor;c=(g)?"guest":$applozic.trim(o.userId)};i.addMessageToTab=function(p,o,r){var q={to:p.to,groupId:p.groupId,deviceKey:p.deviceKey,contentType:p.contentType,message:p.message,conversationId:p.conversationId,topicId:p.topicId,sendToDevice:true,createdAtTime:new Date().getTime(),key:p.key,storeOnDevice:true,sent:false,read:true,metadata:(p.metadata)?p.metadata:""};q.type=(p.type)?p.type:5;if(p.fileMeta){q.fileMeta=p.fileMeta}if(typeof r==="function"){r(q,o)}};i.getMessages=function(p){var o={};if(p.startTime){o.endTime=p.startTime}if(typeof p.userId!=="undefined"&&p.userId!==""){if(p.isGroup){o.groupId=p.userId}else{o.userId=p.userId}o.pageSize=30;if((IS_MCK_TOPIC_HEADER||IS_MCK_TOPIC_BOX)&&p.conversationId){o.conversationId=p.conversationId;if(typeof MCK_TAB_CONVERSATION_MAP[p.userId]==="undefined"){o.conversationReq=true}}}else{o.mainPageSize=100}window.Applozic.ALApiService.getMessages({data:o,success:p.callback,error:p.callback})};i.getMessageList=function(r,s){var o=r.id;var p={};var q={};if(r.startTime){p.endTime=r.startTime}if(typeof r.clientGroupId!=="undefined"&&r.clientGroupId!==""){if(r.pageSize){p.pageSize=r.pageSize}else{p.pageSize=50}p.clientGroupId=r.clientGroupId;q={clientGroupId:r.clientGroupId}}else{if(typeof o!=="undefined"&&o!==""){if(r.pageSize){p.pageSize=r.pageSize}else{p.pageSize=50}if(""+r.isGroup==="true"){p.groupId=o}else{p.userId=o}q={id:o}}else{if(r.mainPageSize){p.mainPageSize=r.pageSize}else{p.mainPageSize=50}q={id:""}}}if(r.topicId&&(o||r.clientGroupId)){if(r.conversationId){p.conversationId=r.conversationId}if(r.topicId){q.topicId=r.topicId}}window.Applozic.ALApiService.getMessages({data:p,success:function(t){var x=t.data;q.status="success";if(typeof x.message==="undefined"||x.message.length===0){q.messages=[]}else{var v=x.message;var u=new Array();$applozic.each(v,function(y,z){if(typeof s==="function"){s(z)}});q.messages=u}if(x.groupFeeds.length>0){q.id=x.groupFeeds[0].id}r.callback(x)},error:function(t){q.status="error";r.callback(q)}})};i.getReplyMessageByKey=function(o){var p=ALStorage.getMessageByKey(o);if(typeof p==="undefined"){window.Applozic.ALApiService.updateReplyMessage({data:{key:o},async:false,success:function(q){ALStorage.updateMckMessageArray(q)}})}return ALStorage.getMessageByKey(o)};i.sendDeliveryUpdate=function(o){window.Applozic.ALApiService.sendDeliveryUpdate({data:{key:o.pairedMessageKey},success:function(){},error:function(){}})};i.sendReadUpdate=function(o){if(typeof o!=="undefined"&&o!==""){window.Applozic.ALApiService.sendReadUpdate({data:{key:o},success:function(){},error:function(){}})}};i.fetchConversationByTopicId=function(o,p){window.Applozic.ALApiService.fetchConversationByTopicId({data:o,success:function(r){if(typeof r==="object"&&r.status==="success"){var q=r.response;if(q.length>0){$applozic.each(q,function(v,x){MCK_CONVERSATION_MAP[x.id]=x;MCK_TOPIC_CONVERSATION_MAP[x.topicId]=[x.id];if(x.topicDetail){try{MCK_TOPIC_DETAIL_MAP[x.topicId]=$applozic.parseJSON(x.topicDetail)}catch(u){w.console.log("Incorect Topic Detail!")}}if(params.tabId&&typeof MCK_TAB_CONVERSATION_MAP[params.tabId]!=="undefined"){var t=MCK_TAB_CONVERSATION_MAP[params.tabId];t.push(x);MCK_TAB_CONVERSATION_MAP[params.tabId]=t}})}if(params.isExtMessageList){if(q.length>0){params.conversationId=q[0].id;params.pageSize=50;if(typeof p==="function"){p(params)}}else{if(typeof params.callback==="function"){var s={};if(params.tabId){s.id=params.tabId;s.isGroup=params.isGroup}else{if(params.clientGroupId){s.clientGroupId=params.clientGroupId}}s.topicId=params.topicId;s.status="success";s.messages=[];params.callback(s)}}}}else{if(params.isExtMessageList&&typeof params.callback==="function"){var s={};if(params.tabId){s.id=params.tabId}else{if(params.clientGroupId){s.clientGroupId=params.clientGroupId}}s.topicId=params.topicId;s.status="error";s.errorMessage="Unable to process request. Please try again.";params.callback(s)}}},error:function(){if(typeof params.callback==="function"){var q={};if(params.tabId){q.id=params.tabId}else{if(params.clientGroupId){q.clientGroupId=params.clientGroupId}}q.topicId=params.topicId;q.status="error";q.errorMessage="Unable to process request. Please try again.";params.callback(q)}}})};i.getTopicId=function(p,q){if(p.conversationId){var o="id="+p.conversationId;window.Applozic.ALApiService.getTopicId({data:{conversationId:p.conversationId},success:function(r){if(typeof o==="object"&&o.status==="success"){var v=o.response;if(typeof v==="object"){MCK_TOPIC_CONVERSATION_MAP[v.topicId]=[p.conversationId];MCK_CONVERSATION_MAP[p.conversationId]=v;if(v.topicDetail){try{MCK_TOPIC_DETAIL_MAP[v.topicId]=$applozic.parseJSON(v.topicDetail)}catch(u){w.console.log("Incorect Topic Detail!")}}if(typeof(MCK_PRICE_DETAIL)==="function"&&p.priceText){MCK_PRICE_DETAIL({custId:c,suppId:p.suppId,productId:v.topicId,price:p.priceText});i.sendConversationCloseUpdate(p.conversationId)}if(p.messageType&&typeof p.message==="object"){var t=(p.message.groupId)?p.message.groupId:p.message.to;if(typeof MCK_TAB_CONVERSATION_MAP[t]!=="undefined"){var s=MCK_TAB_CONVERSATION_MAP[t];s.push(v);MCK_TAB_CONVERSATION_MAP[t]=s}if(typeof p.populate!=="undefined"?p.populate:true){if(typeof q==="function"){q(p)}}}if(typeof p.callback==="function"){p.callback(v)}}}},error:function(){}})}};i.sendConversationCloseUpdate=function(p){if(p){var o="id="+p;window.Applozic.ALApiService.sendConversationCloseUpdate({conversationId:p,success:function(q){},error:function(){}})}};i.dispatchMessage=function(s){if(s.messagePxy==="object"){var o=s.messagePxy;if(s.topicId){var r=MCK_TOPIC_DETAIL_MAP[s.topicId];if(typeof r==="object"&&r.title!=="undefined"){if(!o.message){o.message=$applozic.trim(r.title)}if(s.conversationId){o.conversationId=s.conversationId}else{if(s.topicId){var q={topicId:s.topicId};if(typeof r==="object"){q.topicDetail=w.JSON.stringify(r)}o.conversationPxy=q}}}if(!o.message&&r.link){var p={blobKey:$applozic.trim(r.link),contentType:"image/png"};o.fileMeta=p;o.contentType=5;FILE_META=[];FILE_META.push(p)}}if(s.isGroup){o.groupId=s.tabId}else{o.to=s.tabId}mckMessageService.sendMessage(o)}};i.sendVideoCallMessage=function(r,q,u,p,s,v){var x=(q=="CALL_MISSED")?"Missed Call":(q=="CALL_REJECTED")?"Call Rejected":"";if(x==""||x==undefined){x="video message"}var t={MSG_TYPE:q,CALL_ID:r,CALL_AUDIO_ONLY:p};var o={to:s,type:5,contentType:u,message:x,metadata:t,senderName:c};v(o);return o};i.sendVideoCallEndMessage=function(t,s,x,q,r,u,y){var p="";if(r){p=mckDateUtils.convertMilisIntoTime(r)}var z=(s=="CALL_MISSED")?"Missed Call":(s=="CALL_REJECTED")?"Call Rejected":(s=="CALL_END")?"Call End \n Duration: "+p:"video message";if(z==""||z==undefined){z="video message"}var v={MSG_TYPE:s,CALL_ID:t,CALL_AUDIO_ONLY:q,CALL_DURATION:r};var o={to:u,type:5,contentType:x,message:z,metadata:v};y(o);return o};i.getMessageFeed=function(q){var p={};k=window.Applozic.ALApiService.getFileUrl();p.key=q.key;p.contentType=q.contentType;p.timeStamp=q.createdAtTime;p.message=q.message;p.from=(q.type===4)?q.to:c;if(q.groupId){p.to=q.groupId}else{p.to=(q.type===5)?q.to:c}p.status="read";p.type=(q.type===4)?"inbox":"outbox";if(q.type===5){if(q.status===3){p.status="sent"}else{if(q.status===4){p.status="delivered"}}}if(typeof q.fileMeta==="object"){var o=Object.assign({},q.fileMeta);if(typeof o.url==="undefined"||o.url===""){o.url=k+"/rest/ws/aws/file/"+q.fileMeta.blobKey}delete o.blobKey;p.file=o}p.source=q.source;p.metadata=q.metadata;return p}};

var MCK_GROUP_MAP = [];
var MCK_CLIENT_GROUP_MAP = [];
window.onload = function() {
	var Viewer = window.Viewer;
}
(function($applozic, w, d) {
    "use strict";
    var default_options = {
        baseUrl: MCK_BASE_URL? MCK_BASE_URL :'https://apps.applozic.com',
        fileBaseUrl: 'https://applozic.appspot.com',
				customFileUrl:'https://googleupload.applozic.com', // google cloud file upload url
				genereateCloudFileUrl: "https://googleupload.applozic.com/files/url?key={key}", // generate viewable link for a file incase of file upload on google cloud
        notificationIconLink: '',
        notificationSoundLink: '',
        mapStaticAPIkey :'AIzaSyCWRScTDtbt8tlXDr6hiceCsU83aS2UuZw',
        launcher: 'applozic-launcher',
				howlerScriptLoaded: false, // true if your app already loaded howler script
				emojilibrary: true, // true if you want to load emoticons in chat
        userId: null,
        appId: null,
        userName: null,
        contactNumber: null,
        email: null,
        supportId: null,
        mode: 'standard',
        visitor: false,
        olStatus: false,
        groupUserCount: false,
        desktopNotification: false,
        locShare: false,
        maxAttachmentSize: 25, // default size is 25MB
        notification: true,
        launchOnUnreadMessage: false,
        loadOwnContacts: false,
        maxGroupSize: 100,
        authenticationTypeId: 0,
        userCreatedInSearchEnabled: true,
		//	isAnonymousChat: true,
        labels: {
            'conversations.title': 'Conversations',
            'start.new': 'Start New',
            'search.contacts': 'Contacts',
            'search.groups': 'Groups',
            'empty.groups': 'No groups yet!',
            'empty.contacts': 'No contacts yet!',
            'empty.messages': 'No messages yet!',
            'no.more.messages': 'No more messages!',
            'empty.conversations': 'No conversations yet!',
            'no.more.conversations': 'No more conversations!',
            'search.placeholder': 'Search...',
            'location.placeholder': 'Enter a location',
            'create.group.title': 'Create Group',
            'members.title': 'Members',
            'add.members.title': 'Add Member',
            'remove.member': 'Remove Member',
            'change.role': 'Change Role',
            'group.info.update': 'Update',
            'group.info.updating': 'Updating...',
            'add.group.icon': 'Add Group Icon',
            'group.deleted': 'Group has been deleted',
            'change.group.icon': 'Change Group Icon',
            'group.title': 'Group Title',
            'group.type': 'Group Type',
            'group.create.submit': 'Creating Group...',
            'blocked': 'You have blocked this user',
            'group.chat.disabled': 'You are no longer part of this group!',
            'block.user.alert': 'Are you sure you want to block this user?',
            'unblock.user.alert': 'Are you sure you want to unblock this user?',
            'exit.group.alert': 'Are you sure you want to exit this group?',
            'remove.member.alert': 'Are you sure you want to remove this member?',
            'clear.messages.alert': 'Are you sure you want to delete all the conversation?',
            'typing': 'typing...',
            'is.typing': 'is typing...',
            'online': 'Online',
            'clear.messages': 'Clear Messages',
            'delete': 'Delete',
            'reply': 'Reply',
            'forward': 'Forward',
            'copy': 'Copy',
            'block.user': 'Block User',
            'unblock.user': 'Unblock User',
            'group.info.title': 'Group Info',
            'exit.group': 'Exit Group',
            'location.share.title': 'Location Sharing',
            'my.location': 'My Location',
            'send': 'Send',
            'send.message': 'Send Message',
            'smiley': 'Smiley',
            'close': 'Close',
            'edit': 'Edit',
            'save': 'Save',
            'file.attachment': 'Files & Photos',
            'file.attach.title': 'Attach File',
            'last.seen': 'Last seen',
            'last.seen.on': 'Last seen on',
						'hour':' hour',
            'min':' min',
            'yesterday':'yesterday',
            'hours':' hours',
            'mins':' mins',
            'time.format.AM':'AM',
            'time.format.PM':'PM',
            'time.format.am':'am',
            'time.format.pm':'pm',
            'user.delete':'This user has been deleted',
            'ago': 'ago',
						'admin':'Admin',
            'user':'User',
            'moderator':'Moderator',
            'member':'Member',
            'public':'Public',
            'private':'Private',
            'open':'Open',
            'you':'You',
            'charsNotAllowedMessage':'Following characters are not allowed: !$%^&*()',
            'group.metadata': {
                'CREATE_GROUP_MESSAGE': ':adminName created group :groupName',
                'REMOVE_MEMBER_MESSAGE': ':adminName removed :userName',
                'ADD_MEMBER_MESSAGE': ':adminName added :userName',
                'JOIN_MEMBER_MESSAGE': ':userName joined',
                'GROUP_NAME_CHANGE_MESSAGE': 'Group name changed to :groupName',
                'GROUP_ICON_CHANGE_MESSAGE': 'Group icon changed',
                'GROUP_LEFT_MESSAGE': ':userName left',
                'DELETED_GROUP_MESSAGE': ':adminName deleted group',
                'GROUP_USER_ROLE_UPDATED_MESSAGE': ':userName is :role now',
                'GROUP_META_DATA_UPDATED_MESSAGE': '',
                'ALERT': '',
                'HIDE': ''
            }
        },
        openGroupSettings: {
            'deleteChatAccess': 0, // NONE(0), ADMIN(1), ALL_GROUP_MEMBER(2)
            'allowInfoAccessGroupMembers': true,
            'disableChatForNonGroupMember': false,
            'defaultChatDisabledMessage': 'Chat Disabled!'
        }
    };
    var message_default_options = {
        'messageType': 5,
        'type': 0
    };
    $applozic.fn.applozic = function(appOptions, params) {
        var $mck_sidebox = $applozic('#mck-sidebox');
        if ($applozic.type(appOptions) === 'object') {
            appOptions = $applozic.extend(true, {}, default_options, appOptions);
        }
        var oInstance = undefined;
        if (typeof($mck_sidebox.data('applozic_instance')) !== 'undefined') {
            oInstance = $mck_sidebox.data('applozic_instance');
            if ($applozic.type(appOptions) === 'string') {
                switch (appOptions) {
                    case 'reInitialize':
                        return oInstance.reInit(params);
                        break;
                    case 'loadConvTab':
                        oInstance.loadConvTab(params);
                        break;
                    case 'loadTab':
                        oInstance.loadTab(params);
                        break;
                    case "uploadFile":
                        oInstance.uploadFile(params);
                        break;
                    case 'loadTabView':
                        oInstance.loadTabView(params);
                        break;
                    case 'loadChat':
                        oInstance.loadChat(params);
                        break;
                    case 'loadContextualTab':
                        return oInstance.loadTabWithTopic(params);
                        break;
                    case "audioAttach":
                        oInstance.audioAttach(params);
                        break;
                    case 'addWelcomeMessage':
                        oInstance.addWelcomeMessage(params);
                        break;
                    case 'loadContacts':
                        oInstance.loadContacts(params);
                        break;
										case 'loadContactsForContactList':
                        oInstance.loadContactsForContactList(params);
                        break;
                    case 'sendMessage':
                        return oInstance.sendMessage(params);
                        break;
                    case 'sendGroupMessage':
                        return oInstance.sendGroupMessage(params);
                        break;
                    case 'createGroup':
                        return oInstance.createGroup(params);
                        break;
                    case 'loadBroadcastTab':
                        params.groupName = (params.groupName) ? params.groupName : 'Broadcast';
                        params.type = 5;
                        return oInstance.initGroupTab(params);
                        break;
                    case 'initBroadcastTab':
                        params.groupName = (params.groupName) ? params.groupName : 'Broadcast';
                        params.type = 5;
                        return oInstance.initGroupTab(params);
                        break;
                    case 'initGroupTab':
                        return oInstance.initGroupTab(params);
                        break;
                    case 'loadGroupTab':
                        return oInstance.loadGroupTab(params);
                        break;
                    case 'loadGroupTabByClientGroupId':
                        return oInstance.loadGroupTabByClientGroupId(params);
                        break;
                    case 'setOffline':
                        oInstance.setOffline();
                        return 'success';
                        break;
                    case 'setOnline':
                        oInstance.setOnline();
                        return 'success';
                        break;
                   case 'reset':
                         oInstance.reset(params);
                         break;
                    case 'logout':
                        oInstance.logout();
                        return 'success';
                        break;
                    case 'createFriendContactList':
                        return oInstance.createFriendContactList(params);
                        break;
                    case 'getFriendContactList':
                        return oInstance.getFriendContactList(params);
                        break;
                    case 'removeUserFromFriendContactList':
                        return oInstance.removeUserFromFriendContactList(params);
                        break;
                    case 'deleteFriendContactList':
                        return oInstance.deleteFriendContactList(params);
                          break;
                    case 'getUserDetail':
                        oInstance.getUserStatus(params);
                        return 'success';
                        break;
                    case 'getGroupList':
                        oInstance.getGroupList(params);
                        return 'success';
                        break;
                    case 'leaveGroup':
                        return oInstance.leaveGroup(params);
                        break;
                    case 'addGroupMember':
                        return oInstance.addGroupMember(params);
                        break;
                    case 'removeGroupMember':
                        return oInstance.removeGroupMember(params);
                        break;
                    case 'updateGroupInfo':
                        return oInstance.updateGroupInfo(params);
                        break;
                    case 'getMessages':
                        oInstance.getMessages(params);
                        break;
                    case 'messageList':
                        return oInstance.getMessageList(params);
                        break;
                    case 'getMessageListByTopicId':
                        return oInstance.getMessageListByTopicId(params);
                        break;
                    case 'getTotalUnreadCount':
                        return oInstance.getTotalUnreadCount();
                        break;
                    case 'subscribeToEvents':
                        return oInstance.subscribeToEvents(params);
                        break;
                    case 'getConversation':
                        return oInstance.getConversation(params);
                        break;
                }
            } else if ($applozic.type(appOptions) === 'object') {
                oInstance.reInit(appOptions);
            }
        } else if ($applozic.type(appOptions) === 'object') {
            if (appOptions.userId && appOptions.appId && $applozic.trim(appOptions.userId) !== '' && $applozic.trim(appOptions.appId) !== '') {
                if (typeof($mck_sidebox.data('applozic_instance')) !== 'undefined') {
                    oInstance = $mck_sidebox.data('applozic_instance');
                    oInstance.reInit(appOptions);
                } else {
                    if (typeof appOptions.ojq !== 'undefined') {
                        $ = appOptions.ojq;
                        jQuery = appOptions.ojq;
                    } else {
                        $ = $applozic;
                        jQuery = $applozic;
                    }
                    if (typeof appOptions.obsm === 'function') {
                        $.fn.modal = appOptions.obsm;
                        jQuery.fn.modal = appOptions.obsm;
                    } else if (typeof $applozic.fn.modal === 'function') {
                        var oModal = $applozic.fn.modal.noConflict();
                        $.fn.modal = oModal;
                        jQuery.fn.modal = oModal;
                    } else if (typeof $.fn.modal === 'function') {
                        var oModal = $.fn.modal.noConflict();
                        $.fn.modal = oModal;
                        jQuery.fn.modal = oModal;
                    }
                    if (typeof appOptions.omckm === 'function') {
                        $applozic.fn.mckModal = appOptions.omckm;
                    } else if (typeof $applozic.fn.mckModal === 'function') {
                        $applozic.fn.mckModal = $applozic.fn.mckModal.noConflict();
                    } else if (typeof $.fn.mckModal === 'function') {
                        $applozic.fn.mckModal = $.fn.mckModal.noConflict();
                    }
                    if (typeof $.fn.linkify === 'function') {
                        $applozic.fn.linkify = $.fn.linkify;
                        jQuery.fn.linkify = $.fn.linkify;
                    } else if (typeof $applozic.fn.linkify === 'function') {
                        $.fn.linkify = $applozic.fn.linkify;
                        jQuery.fn.linkify = $applozic.fn.linkify;
                    }
                    if (typeof $.fn.emojiarea === 'function') {
                        $applozic.fn.emojiarea = $.fn.emojiarea;
                    } else if (typeof $applozic.fn.emojiarea === 'function') {
                        $.fn.emojiarea = $applozic.fn.emojiarea;
                        jQuery.fn.emojiarea = $applozic.fn.emojiarea;
                    }
                    if (typeof $.fn.locationpicker === 'function') {
                        $applozic.fn.locationpicker = $.fn.locationpicker;
                    } else if (typeof $applozic.fn.locationpicker === 'function') {
                        $.fn.locationpicker = $applozic.fn.locationpicker;
                        jQuery.fn.locationpicker = $applozic.fn.locationpicker;
                    }
                    var applozic = new Applozic(appOptions);
                    $mck_sidebox.data('applozic_instance', applozic);
                    applozic.init();
                }
            } else {
                alert('Oops! looks like incorrect application id or user Id.');
            }
        }
    };
    $applozic.fn.applozic.defaults = default_options;


    function Applozic(appOptions) {
        var _this = this;
				var IS_REINITIALIZE = false;
        var MCK_TOKEN;
        var AUTH_CODE;
        MCK_GROUP_MAP = [];
        var FILE_META = [];
        var USER_DEVICE_KEY;
        var USER_COUNTRY_CODE;
        var MCK_WEBSOCKET_URL = appOptions.websocketUrl;
        var MCK_WEBSOCKET_PORT = appOptions.websocketPort;
        var IS_LOGGED_IN = true;
        var MCK_CONTACT_MAP = [];
        var MCK_TYPING_STATUS = 0;
        MCK_CLIENT_GROUP_MAP = [];
        var CONTACT_SYNCING = false;
        var MCK_USER_TIMEZONEOFFSET;
        var MCK_BLOCKED_TO_MAP = [];
        var MCK_BLOCKED_BY_MAP = [];
        var MCK_IDLE_TIME_LIMIT = 90;
        var MCK_USER_DETAIL_MAP = [];
        var MCK_TOPIC_DETAIL_MAP = [];
        var MCK_LAST_SEEN_AT_MAP = [];
        var MCK_CONVERSATION_MAP = [];
        var IS_MCK_TAB_FOCUSED = true;
        var MCK_TOTAL_UNREAD_COUNT = 0;
        var MCK_MODE = appOptions.mode;
        MCK_LABELS = appOptions.labels;
        MCK_BASE_URL = appOptions.baseUrl;
        var EMOJI_LIBRARY = appOptions.emojilibrary;
				var MCK_CUSTOM_URL = appOptions.customFileUrl;
				var MCK_STORAGE_URL = appOptions.customUploadUrl;
        var MCK_APP_ID = appOptions.appId;
        var OPEN_GROUP_SUBSCRIBER_MAP = [];
        var MCK_CONNECTED_CLIENT_COUNT = 0;
        var GROUP_ROLE_MAP = [0, 1, 2, 3];
        var GROUP_TYPE_MAP = [1, 2, 5, 6, 7, 9, 10];
        var MCK_TOPIC_CONVERSATION_MAP = [];
        var IS_MCK_USER_DEACTIVATED = false;
        var MCK_LAUNCHER = appOptions.launcher;
        var IS_MCK_VISITOR = appOptions.visitor;
        var MCK_USER_NAME = appOptions.userName;
        var IS_MCK_LOCSHARE = appOptions.locShare;
        var IS_CALL_ENABLED = appOptions.video;
        var MCK_FILE_URL = appOptions.fileBaseUrl;
				var MCK_CUSTOM_UPLOAD_SETTINGS = appOptions.fileupload;
				var MCK_GENERATE_CLOUD_FILE_URL = appOptions.genereateCloudFileUrl;
        var MCK_ON_PLUGIN_INIT = appOptions.onInit;
        var MCK_ON_TOPIC_DETAILS = appOptions.onTopicDetails;
        var AUTHENTICATION_TYPE_ID_MAP = [0, 1, 2];
				var CUSTOM_CHAT_LAUNCHER = appOptions.chatLauncherHtml;
        var MCK_ON_PLUGIN_CLOSE = appOptions.onClose;
        var MCK_DISPLAY_TEXT = appOptions.displayText;
        var MCK_ACCESS_TOKEN = appOptions.accessToken;
        var MCK_CALLBACK = appOptions.readConversation;
        var MCK_GROUPMAXSIZE = appOptions.maxGroupSize;
        var MCK_ON_TAB_CLICKED = appOptions.onTabClicked;
        var MCK_CONTACT_NUMBER = appOptions.contactNumber;
        var MCK_FILEMAXSIZE = appOptions.maxAttachmentSize;
        var MCK_APP_MODULE_NAME = appOptions.appModuleName;
        var MCK_GETTOPICDETAIL = appOptions.getTopicDetail;
        var MCK_GETUSERNAME = appOptions.contactDisplayName;
        var MCK_MSG_VALIDATION = appOptions.validateMessage;
        var MCK_PRICE_DETAIL = appOptions.finalPriceResponse;
        var MCK_GETUSERIMAGE = appOptions.contactDisplayImage;
        var MCK_PRICE_WIDGET_ENABLED = appOptions.priceWidget;
        var MCK_OPEN_GROUP_SETTINGS = appOptions.openGroupSettings;
        var MCK_OFFLINE_MESSAGE_DETAIL = appOptions.offlineMessageDetail;
        var MCK_INIT_AUTO_SUGGESTION = appOptions.initAutoSuggestions;
        var MCK_AUTHENTICATION_TYPE_ID = appOptions.authenticationTypeId;
        var MCK_GETCONVERSATIONDETAIL = appOptions.getConversationDetail;
        var MCK_NOTIFICATION_ICON_LINK = appOptions.notificationIconLink;
        var MCK_MAP_STATIC_API_KEY = appOptions.mapStaticAPIkey;
				var MCK_ENABLE_BADGE_COUNT = appOptions.unreadCountOnchatLauncher;
        var MCK_SELF_CHAT_DISABLE = (appOptions.disableSelfChat)?appOptions.disableSelfChat :false;
        var MCK_NOTIFICATION_TONE_LINK = (appOptions.notificationSoundLink) ? appOptions.notificationSoundLink : '';
        var MCK_USER_ID = (IS_MCK_VISITOR) ? 'guest' : $applozic.trim(appOptions.userId);
        var MCK_GOOGLE_API_KEY = (IS_MCK_LOCSHARE) ? appOptions.googleApiKey : 'NO_ACCESS';
        var MCK_SOURCE = (typeof appOptions.source === 'undefined') ? 1 : appOptions.source;
        var IS_MCK_TOPIC_BOX = (typeof appOptions.topicBox === 'boolean') ? (appOptions.topicBox) : false;
        var IS_MCK_OL_STATUS = (typeof appOptions.olStatus === 'boolean') ? (appOptions.olStatus) : false;
        var MESSAGE_BUBBLE_AVATOR_ENABLED = (typeof appOptions.messageBubbleAvator === "boolean") ? (appOptions.messageBubbleAvator) : false;
        var IS_OFFLINE_MESSAGE_ENABLED = (typeof appOptions.showOfflineMessage === 'boolean') ? (appOptions.showOfflineMessage) : false;
        var IS_GROUP_SUBTITLE_HIDDEN = (typeof appOptions.hideGroupSubtitle === 'boolean') ? (appOptions.hideGroupSubtitle) : false;
        var MCK_DEFAULT_MESSAGE_METADATA = (typeof appOptions.defaultMessageMetaData === 'undefined') ? {} : appOptions.defaultMessageMetaData;
        var IS_MCK_GROUPUSERCOUNT = (typeof appOptions.groupUserCount === "boolean") ? appOptions.groupUserCount : false;
        var MCK_CHECK_USER_BUSY_STATUS = (typeof appOptions.checkUserBusyWithStatus === 'boolean') ? (appOptions.checkUserBusyWithStatus) : false;
        var IS_RESET_USER_STATUS = (typeof appOptions.resetUserStatus === 'boolean') ? (appOptions.resetUserStatus) : false;
        var IS_MCK_TOPIC_HEADER = (typeof appOptions.topicHeader === 'boolean') ? (appOptions.topicHeader) : false;
        var MCK_SUPPORT_ID_DATA_ATTR = (appOptions.supportId) ? ('data-mck-id="' + appOptions.supportId + '"') : '';
        var IS_MCK_OWN_CONTACTS = (typeof appOptions.loadOwnContacts === "boolean") ? (appOptions.loadOwnContacts) : false;
        var IS_MCK_NOTIFICATION = (typeof appOptions.desktopNotification === "boolean") ? appOptions.desktopNotification : false;
        var IS_NOTIFICATION_ENABLED = (typeof appOptions.notification === "boolean") ? appOptions.notification : true;
        var IS_SW_NOTIFICATION_ENABLED = (typeof appOptions.swNotification === "boolean") ? appOptions.swNotification : false;
        var IS_AUTO_TYPE_SEARCH_ENABLED = (typeof appOptions.autoTypeSearchEnabled === "boolean") ? appOptions.autoTypeSearchEnabled : true;
        var IS_LAUNCH_TAB_ON_NEW_MESSAGE = (typeof appOptions.launchOnNewMessage === "boolean") ? appOptions.launchOnNewMessage : false;
        var IS_LAUNCH_ON_UNREAD_MESSAGE_ENABLED = (typeof appOptions.launchOnUnreadMessage === "boolean") ? appOptions.launchOnUnreadMessage : false;
        var IS_USER_CREATED_IN_SEARCH_ENABLED = (typeof appOptions.userCreatedInSearchEnabled === "boolean") ? appOptions.userCreatedInSearchEnabled : true;
        var USER_TYPE_ID = (typeof appOptions.userTypeId === "number") ? appOptions.userTypeId : false;
        var CONVERSATION_STATUS_MAP = ["DEFAULT", "NEW", "OPEN"];
        var BLOCK_STATUS_MAP = ["BLOCKED_TO", "BLOCKED_BY", "UNBLOCKED_TO", "UNBLOCKED_BY"];
        var TAB_FILE_DRAFT = new Object();
        var MCK_GROUP_ARRAY = new Array();
        var MCK_CONTACT_ARRAY = new Array();
        var TAB_MESSAGE_DRAFT = new Object();
        var MCK_CONTACT_NAME_MAP = new Array();
        var MCK_UNREAD_COUNT_MAP = new Array();
		var mck_sidebox = document.getElementById("mck-sidebox");
		var mck_tab_title = document.getElementById("mck-tab-title");
		var mck_typing_box = document.getElementsByClassName('mck-typing-box')[0];
		var mck_tab_status = document.getElementById("mck-tab-status");
		var mck_offline_message_box = document.getElementById("mck-offline-message-box");
		var mck_typing_label = document.getElementById("mck-typing-label");
        //var mck_message_inner = document.getElementById("mck-message-cell").getElementsByClassName("mck-message-inner")[0];
        var mck_message_inner = $applozic("#mck-message-cell .mck-message-inner");
        var MCK_GROUP_MEMBER_SEARCH_ARRAY = new Array();
        var MCK_TAB_CONVERSATION_MAP = new Array();
        var mckInit = new MckInit();
				var mckUtils = new MckUtils();
        var mckMapLayout = new MckMapLayout();
        var mckUserUtils = new MckUserUtils();
		var subscriber = window.Applozic.ALSocket.subscriber;
		var stompClient = window.Applozic.ALSocket.stompClient;
		var TYPING_TAB_ID = window.Applozic.ALSocket.TYPING_TAB_ID;
		var typingSubscriber = window.Applozic.ALSocket.typingSubscriber;
		var openGroupSubscriber = window.Applozic.ALSocket.openGroupSubscriber;
		var checkConnectedIntervalId = window.Applozic.ALSocket.checkConnectedIntervalId;
		var sendConnectedStatusIntervalId = window.Applozic.ALSocket.sendConnectedStatusIntervalId;
				var mckGroupService = new MckGroupService();
				var mckGroupUtils = new MckGroupUtils();
				var mckMapService = new MckMapService();
        var mckGroupLayout = new MckGroupLayout();
        var mckFileService = new MckFileService();
        var mckMessageLayout = new MckMessageLayout();
        var mckMessageService = new MckMessageService();
        var mckContactService = new MckContactService();
        var mckNotificationService = new MckNotificationService();
				var alMessageService = new AlMessageService();
				var alFileService = new AlFileService();
				var mckNotificationUtils = new MckNotificationUtils();
				var alNotificationService = new AlNotificationService();
				var alUserService = new AlUserService();
        var $mckChatLauncherIcon = $applozic('.chat-launcher-icon');
        var mckCallService = new MckCallService();
        var mckNotificationTone = null;
				var notificationtoneoption = {};
        var ringToneService;
        var lastFetchTime;
        var latestSeenContactTime;
        var isUserDeleted = false;
        var mckVideoCallringTone = null;
        w.MCK_OL_MAP = new Array();
        var events = {
            'onConnectFailed': function() {},
            'onConnect': function() {},
            'onMessageDelivered': function() {},
            'onMessageRead': function() {},
            'onMessageDeleted': function() {},
            'onConversationDeleted': function() {},
            'onUserConnect': function() {},
            'onUserDisconnect': function() {},
            'onConversationReadFromOtherSource': function() {},
            'onConversationRead': function() {},
            'onMessageReceived': function() {},
            'onMessageSentUpdate': function() {},
            'onMessageSent': function() {},
            'onUserBlocked': function() {},
            'onUserUnblocked': function() {},
            'onUserActivated': function() {},
            'onUserDeactivated': function() {},
			'onTypingStatus': function(resp) {
                typingSubscriber =window.Applozic.ALSocket.typingSubscriber
				if (typingSubscriber != null && typingSubscriber.id === resp.headers.subscription) {
                    var message = resp.body;
                    var publisher = message.split(",")[1];
                    var status = Number(message.split(",")[2]);
                    var tabId = resp.headers.destination.substring(resp.headers.destination.lastIndexOf("-") + 1, resp.headers.destination.length);
                    var currTabId = mck_message_inner.data('mck-id');
                    var isGroup = mck_message_inner.data('isgroup');
                    var group = mckGroupUtils.getGroup(currTabId);
                    if (!alUserService.MCK_BLOCKED_TO_MAP[publisher] && !MCK_BLOCKED_BY_MAP[publisher]) {
                        if (status === 1) {
                            if ((MCK_USER_ID !== publisher || !isGroup) && (currTabId === publisher || currTabId === tabId)) {
                                var isGroup = mck_message_inner.data('isgroup');
                                if (isGroup) {
                                    if (publisher !== MCK_USER_ID) {
                                        if (mckGroupService.authenticateGroupUser(group) || (group.type === 6 && !MCK_OPEN_GROUP_SETTINGS.disableChatForNonGroupMember)) {
                                            mck_tab_title.classList.add('mck-tab-title-w-typing');
                                            mck_tab_status.classList.remove('vis');
                                            mck_tab_status.classList.add('n-vis');
                                            var displayName = mckMessageLayout.getTabDisplayName(publisher, false);
                                            displayName = displayName.split(' ')[0];
                                            mck_typing_label.innerHTML = displayName + ' ' + MCK_LABELS['is.typing'];
                                        }
                                        if (group.type === 7) {
                                            mck_tab_title.classList.add('mck-tab-title-w-typing');
                                            mck_typing_label.innerHTML = MCK_LABELS['is.typing'];
                                            mck_tab_status.innerHTML = '';
                                        }
                                    }
                                } else {
                                    mck_tab_title.classList.add('mck-tab-title-w-typing');
                                    mck_tab_status.classList.remove('vis');
                                    mck_tab_status.classList.add('n-vis');
                                    mck_typing_label.innerHTML = MCK_LABELS['typing'];
                                }
                                mck_typing_box.classList.remove('n-vis');
                                mck_typing_box.classList.add('vis');
                                setTimeout(function() {
                                    mck_tab_title.classList.remove("mck-tab-title-w-typing");
                                    mck_typing_box.classList.remove('vis');
                                    mck_typing_box.classList.add('n-vis');
                                    if (mck_tab_title.classList.contains("mck-tab-title-w-status" && (typeof group === "undefined" || group.type != 7))) {
                                        mck_tab_status.classList.remove('n-vis');
                                        mck_tab_status.classList.add('vis');
                                    }
                                    mck_typing_label.innerHTML = MCK_LABELS['typing'];
                                }, 60000);
                            }
                        } else {
                            mck_tab_title.classList.remove("mck-tab-title-w-typing");
                            mck_typing_box.classList.remove('vis');
                            mck_typing_box.classList.add('n-vis');
                            if (mck_tab_title.classList.contains("mck-tab-title-w-status") && (typeof group === "undefined" || group.type != 7)) {
                                mck_tab_status.classList.remove('n-vis')
                                mck_tab_status.classList.add('vis');
                            }
                            mck_typing_label.innerHTML = MCK_LABELS['typing'];
                        }
                    }
                }
            },
			'onOpenGroupMessage': function(obj){
				if (openGroupSubscriber.indexOf(obj.headers.subscription) !== -1) {
                    var resp = JSON.parse(obj.body);
                    var messageType = resp.type;
                    var message = resp.message;
                    // var userIdArray =
                    // mckMessageLayout.getUserIdFromMessage(message);
                    // mckContactService.getContactDisplayName(userIdArray);
                    // mckMessageLayout.openConversation();
                    if (messageType === "APPLOZIC_03") {
                        ALStorage.updateLatestMessage(message);
                        if (message.type !== 0 && message.type !== 4) {
                            var msg = document.getElementById(message.key).getElementsByClassName("mck-message-status")[0];
                            msg.classList.remove('mck-icon-time');
                            msg.classList.add('mck-icon-sent');
                            mckMessageLayout.addTooltip(message.key);
                        }
                        events.onMessageSentUpdate({
                            'messageKey': message.key
                        });
                    } else if (messageType === "APPLOZIC_01" || messageType === "APPLOZIC_02" || messageType === "MESSAGE_RECEIVED") {
                        ALStorage.updateLatestMessage(message);
                        var contact = (message.groupId) ? mckGroupUtils.getGroup(message.groupId) : mckMessageLayout.getContact(message.to);
                        var mck_sidebox_content = document.getElementById("mck-sidebox-content");
                        var tabId = mck_message_inner.data('mck-id');
                        if (messageType === "APPLOZIC_01" || messageType === "MESSAGE_RECEIVED") {
                            var messageFeed = alMessageService.getMessageFeed(message);
                            events.onMessageReceived({
                                'message': messageFeed
                            });
                        } else if (messageType === "APPLOZIC_02") {
                            var messageFeed = alMessageService.getMessageFeed(message);
                            events.onMessageSent({
                                'message': messageFeed
                            });
                        }
                        if (message.conversationId) {
                            var conversationPxy = MCK_CONVERSATION_MAP[message.conversationId];
                            if ((IS_MCK_TOPIC_HEADER || IS_MCK_TOPIC_BOX) && ((typeof conversationPxy !== 'object') || (typeof(MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId]) !== 'object'))) {
                                alMessageService.getTopicId({
                                    'conversationId': message.conversationId,
                                    'messageType': messageType,
                                    'message': message,
                                    'notifyUser': resp.notifyUser,
                                    'async': false,
                                    'populate': false
                                }, function(params){
																	mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
																});
                            }
                        }

                        if (typeof contact === 'undefined') {
                            var params = {
                                'message': message,
                                'messageType': messageType,
                                'notifyUser': resp.notifyUser
                            };
                            if (message.groupId) {
                                mckGroupLayout.getGroupFeedFromMessage(params);
                            } else {
                                var userIdArray = [];
                                userIdArray.push(message.to);
                                mckContactService.getUsersDetail(userIdArray, params);
                            }
                            return;
                        }

                        mckMessageLayout.populateMessage(messageType, message, resp.notifyUser);
                    }
                }
			},
			'connectToSocket': function(isFetchMessages){
                stompClient =window.Applozic.ALSocket.stompClient
				if (!stompClient.connected) {
                    if (isFetchMessages && mck_sidebox.style.display === 'block') {
                        var currTabId = mck_message_inner.data('mck-id');
                        if (currTabId) {
                            var isGroup = mck_message_inner.data('isgroup');
                            var conversationId = mck_message_inner.data('mck-conversationid');
                            var topicId = mck_message_inner.data('mck-topicid');
                            ALStorage.clearMckMessageArray();
                            mckMessageLayout.loadTab({
                                'tabId': currTabId,
                                'isGroup': isGroup,
                                'conversationId': conversationId,
                                'topicId': topicId
                            });
                        } else {
                            ALStorage.clearMckMessageArray();
                            mckMessageLayout.loadTab({
                                'tabId': '',
                                'isGroup': false
                            });
                        }
                    }
                    window.Applozic.ALSocket.init();
                }
			},
			'onMessage': function(resp) {
                var messageType = resp.type;
                if (messageType === "APPLOZIC_04" || messageType === "MESSAGE_DELIVERED") {
                    if(document.getElementById(resp.message.split(",")[0])){
                    var msg = document.getElementById(resp.message.split(",")[0]).getElementsByClassName("mck-message-status")[0];
                    msg.classList.remove('mck-icon-time');
                    msg.classList.remove('mck-icon-sent');
                    msg.classList.add('mck-icon-delivered');
                    }
                    mckMessageLayout.addTooltip(resp.message.split(",")[0]);
                    events.onMessageDelivered({
                        'messageKey': resp.message.split(",")[0]
                    });
                } else if (messageType === 'APPLOZIC_08' || messageType === "MT_MESSAGE_DELIVERED_READ") {
                    if(document.getElementById(resp.message.split(",")[0])){
                    var msg = document.getElementById(resp.message.split(",")[0]).getElementsByClassName("mck-message-status")[0];
                    msg.classList.remove('mck-icon-time');
                    msg.classList.remove('mck-icon-sent');
                    msg.classList.remove('mck-icon-delivered');
                    msg.classList.add('mck-icon-read');
                    }
                    mckMessageLayout.addTooltip(resp.message.split(",")[0]);
                    events.onMessageRead({
                        'messageKey': resp.message.split(",")[0]
                    });
                } else if (messageType === "APPLOZIC_05") {
                    var key = resp.message.split(",")[0];
                    var tabId = resp.message.split(",")[1];
                    var isGroup = (resp.message.split(",")[2] === "1") ? true : false;
                    mckMessageLayout.removedDeletedMessage(key, tabId, isGroup);
                    var eventResponse = {
                        'messageKey': resp.message.split(",")[0]
                    };
                    (isGroup) ? eventResponse['groupId'] = tabId: eventResponse['userKey'] = tabId;
                    console.log(eventResponse);
                    events.onMessageDeleted(eventResponse);
                } else if (messageType === 'APPLOZIC_27') {
                    var userId = resp.message.split(",")[0];
                    var topicId = resp.message.split(",")[1];
                    if (typeof userId !== 'undefined') {
                        mckMessageLayout.removeConversationThread(userId, false);
                        mckMessageLayout.updateUnreadCount('user_' + userId, 0, true);
                        var response = {
                            'userId': userId
                        };
                        if (topicId) {
                            response['topicId'] = topicId;
                        }
                        events.onConversationDeleted(response);
                    }
                } else if (messageType === 'APPLOZIC_11') {
                    var userId = resp.message;
                    var contact = mckMessageLayout.fetchContact(userId);
                    var tabId = mck_message_inner.data('mck-id');
                    if (!alUserService.MCK_BLOCKED_TO_MAP[userId] && !MCK_BLOCKED_BY_MAP[userId]) {
                        if (tabId === contact.contactId && !mck_message_inner.data('isgroup')) {
                            document.querySelector('#mck-tab-status').innerHTML = MCK_LABELS['online'];
                            if (IS_OFFLINE_MESSAGE_ENABLED) {
                                mckMessageLayout.hideOfflineMessage();
                            }
                        } else {
                            var htmlId = mckContactUtils.formatContactId(userId);
                            mckUtils.showElement(document.querySelector("#li-user-" + htmlId + " .mck-ol-status"));
                        }
                        mckUtils.hideElement(document.querySelector('.mck-user-ol-status.' + htmlId));
                        if (document.querySelector('.mck-user-ol-status.' + htmlId)) {
                            document.querySelector('.mck-user-ol-status.' + htmlId).nextElementSibling().innerHTML = '(' + MCK_LABELS['online'] + ')';
                        }
                        w.MCK_OL_MAP[userId] = true;
                        alUserService.updateUserStatus({
                            'userId': resp.message,
                            'status': 1
                        },function(userIdArray){
													mckContactService.getUsersDetail(userIdArray, {});
												});
                    }
                    events.onUserConnect({
                        'userId': resp.message
                    });
                } else if (messageType === 'APPLOZIC_12') {
                    var userId = resp.message.split(",")[0];
                    var lastSeenAtTime = resp.message.split(",")[1];
                    var contact = mckMessageLayout.fetchContact(userId);
                    w.MCK_OL_MAP[userId] = false;
                    if (lastSeenAtTime) {
                        MCK_LAST_SEEN_AT_MAP[userId] = lastSeenAtTime;
                    }
                    if (!alUserService.MCK_BLOCKED_TO_MAP[userId] && !MCK_BLOCKED_BY_MAP[userId]) {
                        var tabId = mck_message_inner.data('mck-id');
                        if (tabId === contact.contactId && !mck_message_inner.data('isgroup')) {
                            document.getElementById("mck-tab-status").innerHTML = mckDateUtils.getLastSeenAtStatus(lastSeenAtTime);
                            if (IS_OFFLINE_MESSAGE_ENABLED) {
                                mckInit.manageOfflineMessageTime(tabId);
                            }
                        }
                        mckUtils.hideElement(document.querySelector(".mck-user-ol-status." + contact.htmlId));
                        if (document.querySelector(".mck-user-ol-status." + contact.htmlId)) {
                            document.querySelector(".mck-user-ol-status." + contact.htmlId).nextElementSibling.innerHTML = '(Offline)';
                        }
                        mckUtils.hideElement(document.querySelector("#li-user-" + htmlId + " .mck-ol-status"));
                        alUserService.updateUserStatus({
                            'userId': userId,
                            'status': 0,
                            'lastSeenAtTime': lastSeenAtTime
                        },function(userIdArray){
													mckContactService.getUsersDetail(userIdArray, {});
												});
                    }
                    events.onUserDisconnect({
                        'userId': userId,
                        'lastSeenAtTime': lastSeenAtTime
                    });
                } else if (messageType === "APPLOZIC_29") {
                    var userId = resp.message.split(",")[0];
                    var topicId = resp.message.split(",")[1];
                    var contact = mckMessageLayout.fetchContact(userId);
                    mckMessageLayout.updateUnreadCount('user_' + contact.contactId, 0, true);
                    var tabId = mck_message_inner.data('mck-id');
                    if ((typeof tabId === "undefined") || tabId === '') {
                        document.querySelector(".li-user-" + contact.htmlId + " .mck-unread-count-text").innerHTML = mckMessageLayout.getUnreadCount('user_' + contact.contactId);
                        mckUtils.hideElement(document.querySelector("#li-user-" + contact.htmlId + " .mck-unread-count-box"));
                    }
                    var response = {
                        'userId': userId
                    };
                    if (topicId) {
                        response['topicId'] = topicId;
                    }
                    events.onConversationReadFromOtherSource(response);
                } else if (messageType === 'APPLOZIC_34') {
                    $applozic("#mck-msg-error").html(MCK_LABELS['user.delete']).removeClass('n-vis').addClass('vis');
                    $applozic("#mck-tab-status").removeClass('vis').addClass('n-vis');
                    $applozic("#mck-msg-form").removeClass('vis').addClass('n-vis');
                    $applozic("#li-mck-block-user").removeClass('vis').addClass('n-vis');
                    isUserDeleted = true;
                    return;
                } else if (messageType === 'APPLOZIC_28') {
                    var userId = resp.message.split(",")[0];
                    var topicId = resp.message.split(",")[1];
                    var tabId = mck_message_inner.data('mck-id');
                    if (tabId === userId) {
                        var list= document.querySelectorAll(".mck-msg-right .mck-message-status");
                        for (var i = 0; i < list.length; ++i) {
                            list[i].classList.remove('mck-icon-time');
                            list[i].classList.remove('mck-icon-sent');
                            list[i].classList.remove('mck-icon-delivered');
                            list[i].classList.add('mck-icon-read');
                        }
                        $applozic(".mck-msg-right .mck-icon-delivered").attr('title', 'delivered and read');
                        var contact = mckMessageLayout.getContact(userId);
                        if (typeof contact === 'undefined') {
                            var userIdArray = [];
                            userIdArray.push(userId);
                            mckContactService.getUsersDetail(userIdArray, {});
                        }
                    }
                    var response = {
                        'userId': userId
                    };
                    if (topicId) {
                        response['topicId'] = topicId;
                    }
                    events.onConversationRead(response);
                } else if (messageType === "APPLOZIC_16") {
                    var status = resp.message.split(":")[0];
                    var userId = resp.message.split(":")[1];
                    var contact = mckMessageLayout.fetchContact(userId);
                    var tabId = mck_message_inner.data('mck-id');
                    if (tabId === contact.contactId) {
                        if (status === BLOCK_STATUS_MAP[0]) {
                            alUserService.MCK_BLOCKED_TO_MAP[contact.contactId] = true;
                            mckUserUtils.toggleBlockUser(tabId, true);
                        } else {
                            MCK_BLOCKED_BY_MAP[contact.contactId] = true;
                            mck_tab_title.classList.remove('mck-tab-title-w-status');
                            mck_tab_status.classList.remove('vis');
                            mck_tab_status.classList.add('n-vis');
                            mck_typing_box.classList.remove('vis');
                            mck_typing_box.classList.add('n-vis');
                        }
                    } else {
                        mckUtils.hideElement(document.querySelector("#li-user-" + contact.htmlId + " .mck-ol-status"));
                    }
                    events.onUserBlocked({
                        'status': status,
                        'userId': userId
                    });
                } else if (messageType === 'APPLOZIC_17') {
                    var status = resp.message.split(":")[0];
                    var userId = resp.message.split(":")[1];
                    var contact = mckMessageLayout.fetchContact(userId);
                    var tabId = mck_message_inner.data('mck-id');
                    if (tabId === contact.contactId) {
                        if (status === BLOCK_STATUS_MAP[2]) {
                            alUserService.MCK_BLOCKED_TO_MAP[contact.contactId] = false;
                            mckUserUtils.toggleBlockUser(tabId, false);
                        } else if (w.MCK_OL_MAP[tabId] || MCK_LAST_SEEN_AT_MAP[tabId]) {
                            MCK_BLOCKED_BY_MAP[contact.contactId] = false;
                            if (!alUserService.MCK_BLOCKED_TO_MAP[tabId]) {
                                if (w.MCK_OL_MAP[tabId]) {
                                    mck_tab_status.innerHTML = MCK_LABELS['online'];
                                } else if (MCK_LAST_SEEN_AT_MAP[tabId]) {
                                    mck_tab_status.innerHTML = mckDateUtils.getLastSeenAtStatus(MCK_LAST_SEEN_AT_MAP[tabId]);
                                }
                                mck_tab_title.classList.add('mck-tab-title-w-status');
                                mck_tab_status.classList.remove('n-vis');
                                mck_tab_status.classList.add('vis');
                            }
                        }
                    } else if (w.MCK_OL_MAP[tabId]) {
                        mckUtils.showElement(document.querySelector('#li-user-' + contact.htmlId + ' .mck-ol-status'));
                    }
                    events.onUserUnblocked({
                        'status': status,
                        'userId': userId
                    });
                } else if (messageType === 'APPLOZIC_18') {
                    IS_MCK_USER_DEACTIVATED = false;
                    events.onUserActivated();
                } else if (messageType === 'APPLOZIC_19') {
                    IS_MCK_USER_DEACTIVATED = true;
                    events.onUserDeactivated();
                } else {
                    var message = resp.message;
                    // var userIdArray =
                    // mckMessageLayout.getUserIdFromMessage(message);
                    // mckContactService.getContactDisplayName(userIdArray);
                    // mckMessageLayout.openConversation();
                    if (messageType === "APPLOZIC_03") {
                        ALStorage.updateLatestMessage(message);
                        if (message.type !== 0 && message.type !== 4) {
                            document.querySelector("." + message.key + " .mck-message-status").classList.remove('mck-icon-time');
                            document.querySelector("." + message.key + " .mck-message-status").classList.add('mck-icon-sent');
                            mckMessageLayout.addTooltip(message.key);
                        }
                        events.onMessageSentUpdate({
                            'messageKey': message.key
                        });
                    } else if (messageType === "APPLOZIC_01" || messageType === "APPLOZIC_02" || messageType === "MESSAGE_RECEIVED") {
                        ALStorage.updateLatestMessage(message);
                        var contact = (message.groupId) ? mckGroupUtils.getGroup(message.groupId) : mckMessageLayout.getContact(message.to);
                        var mck_sidebox_content = document.getElementById("mck-sidebox-content");
                        var tabId = mck_message_inner.data('mck-id');
                        if (messageType === "APPLOZIC_01" || messageType === "MESSAGE_RECEIVED") {
                            var messageFeed = alMessageService.getMessageFeed(message);
                            events.onMessageReceived({
                                'message': messageFeed
                            });
                        } else if (messageType === "APPLOZIC_02") {
                            var messageFeed = alMessageService.getMessageFeed(message);
                            events.onMessageSent({
                                'message': messageFeed
                            });
                        }
                        if (message.conversationId) {
                            var conversationPxy = MCK_CONVERSATION_MAP[message.conversationId];
                            if ((IS_MCK_TOPIC_HEADER || IS_MCK_TOPIC_BOX) && ((typeof conversationPxy !== 'object') || (typeof(MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId]) !== 'object'))) {
                                alMessageService.getTopicId({
                                    'conversationId': message.conversationId,
                                    'messageType': messageType,
                                    'message': message,
                                    'notifyUser': resp.notifyUser,
                                    'async': false,
                                    'populate': false
                                }, function(params){
																	mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
																});
                            }
                        }
                        if (typeof contact === 'undefined') {
                            var params = {
                                'message': message,
                                'messageType': messageType,
                                'notifyUser': resp.notifyUser
                            };

                            if (message.groupId) {
                                mckGroupLayout.getGroupFeedFromMessage(params);
                            } else {
                                var userIdArray = [];
                                userIdArray.push(message.to);
                                mckContactService.getUsersDetail(userIdArray, params);
                            }
                            return;
                        }
                        if (message.contentType == 102 && IS_CALL_ENABLED) {
                            //video message Received...
                            //dont show notification for 102 messages
                            resp.notifyUser = false;
                            if (message.type == 4 && message.metadata.MSG_TYPE == "CALL_DIALED") {
                                //its a call dialed Message.. Show Receive/Reject option on screen
                                var contact = mckMessageLayout.fetchContact(message.to);
                                var displayName = mckMessageLayout.getTabDisplayName(contact.contactId, false);

                                var imgSource = mckMessageLayout.getContactImageLink(contact, displayName);
                                document.querySelector("#mck-video-call-indicator").setAttribute("data-call-id", message.metadata.CALL_ID);
                                document.querySelector("#mck-video-call-indicator").setAttribute("data-isAudioCall", message.metadata.CALL_AUDIO_ONLY);
                                document.querySelector("#mck-video-call-indicator-txt").innerHTML = displayName + " calling...";
                                document.querySelector("#mck-video-call-icon").innerHTML = imgSource;
                                document.querySelector("#mck-video-call-indicator").classList.remove("n-vis");
                                document.querySelector("#mck-video-call-indicator").classList.add("vis");
                                mckVideoCallringTone.play();
                                //timer if user not receive call in 1 minute....
                                setTimeout(function() {
                                    var callReceived = document.querySelector("#mck-video-call-indicator").getAttribute("data-callReceived");
                                    if (!callReceived) {
                                        console.log("call is not answered");
                                        //no need to notify server... sender is doing this...thank you sender.
                                        //alMessageService.sendVideoCallMessage(callId,"CALL_MISSED",102,false);
                                        mckVideoCallringTone.stop();
                                        document.querySelector("#mck-video-call-indicator").classList.add("n-vis");
                                        document.querySelector("#mck-video-call-indicator").classList.remove("vis");

                                    }
                                }, 60000);
                            } else if (message.type == 4 && message.metadata.MSG_TYPE == "CALL_REJECTED") {
                                //notify server.. content type 103 msgType CALL_REJECTED
                                //check is this device is call host
                                if (document.querySelector("#mck-btn-video-call").getAttribute("data-isCallHost")) {
																		var toUser = $mck_msg_to.val();
                                    alMessageService.sendVideoCallMessage(message.metadata.CALL_ID, "CALL_REJECTED", 103, false, toUser, function(messagePxy){
																			mckMessageService.sendMessage(messagePxy);
																		});
                                    mckCallService.ringToneForHost.stop();
                                    mckCallService.outgoingCallServices.twilioService.leaveRoomIfJoined();
                                    mckCallService.hideVideoBox();
                                    if (mckCallService.outgoingCallServices) {
                                        mckCallService.outgoingCallServices.rejectedByReceiver = true;
                                    }
                                }
                            }
                        }

                        if (message.contentType == 103) {
                            if (message.type == 4 && message.metadata.MSG_TYPE == "CALL_MISSED") {
                                //stop ringtone and hide vid-call-indicator
                                document.querySelector("#mck-video-call-indicator").classList.add("n-vis");
                                document.querySelector("#mck-video-call-indicator").classList.remove("vis");
                                if (mckVideoCallringTone) {
                                    mckVideoCallringTone.stop();
                                }
                                }
                            // no nedd to handle  message.type==4 and metadata.MSG_TYPE=="CALL_Rejected AND contnetType 103"
                        } else {
                            mckMessageLayout.populateMessage(messageType, message, resp.notifyUser);
                        }
                    }
                }
			}
        };
        _this.getOptions = function() {
            return appOptions;
        };
        _this.init = function() {
						window.Applozic.ALApiService.initServerUrl(MCK_BASE_URL);
						alFileService.get(appOptions);
						alMessageService.init(appOptions);
						alNotificationService.init(appOptions);
						mckGroupService.init(appOptions);
            mckMessageService.init();
            mckFileService.init();
            mckInit.initializeApp(appOptions, false);
            mckNotificationService.init();
            mckMapLayout.init();
						if(EMOJI_LIBRARY) { // EMOJI_LIBRARY = true -> if we want to include the emoticons and the emoticon library
	           mckMessageLayout.initEmojis();
	        	}
	        	else {              // EMOJI_LIBRARY = false ->hide emoticon from chat widget
	           document.getElementById('mck-textbox-container').getElementsByTagName('div')[0].setAttribute('class', 'n-vis');
	           document.getElementById('mck-text-box').classList.add('mck-text-box-width-increase');
						}
            notificationtoneoption.loop = false;
            if (IS_CALL_ENABLED) {
             ringToneService = new RingToneService();
             notificationtoneoption.loop = true;
             mckVideoCallringTone = ringToneService.loadRingTone(MCK_BASE_URL + "/resources/sidebox/audio/applozic_video_call_ring_tone.mp3",notificationtoneoption);
             mckCallService.init();
            }
        };
        _this.reInit = function(optns) {
            if ($applozic.type(optns) === 'object') {
                optns = $applozic.extend(true, {}, default_options, optns);
            } else {
                return;
            }
           $applozic.fn.applozic("reset",optns);
            if (optns.userId && optns.appId && $applozic.trim(optns.userId) !== '' && $applozic.trim(optns.appId) !== '') {
                mckInit.initializeApp(optns, true);
                appOptions = optns;
            } else {
                w.console("Oops! looks like incorrect application id or user Id.");
                return;
            }
        };
        _this.loadTabView = function(params) {
            if (typeof params.isGroup === 'undefined') {
                params.isGroup = false;
            }
            mckMessageLayout.loadTab(params);
            $applozic('#mck-search').val('');
        };
        _this.loadTab = function(tabId) {
            mckMessageLayout.loadTab({
                'tabId': tabId,
                'isGroup': false
            });
            $applozic('#mck-search').val('');
        };
        _this.loadChat = function(optns) {
            if ((typeof optns.userId === 'undefined' || optns.userId === '') && (typeof optns.groupId === 'undefined' || optns.groupId === '') && (typeof optns.clientGroupId === 'undefined' || optns.clientGroupId === '')) {
                return 'UserId or groupId or clientGroupId required';
            }
            var params = {
                'tabId': optns.userId,
                'isGroup': false
            }
            var params = {};
            if (optns.userId) {
                params.tabId = userId;
                params.isGroup = false;

            }
            if (optns.displayName) {
                params.userName = optns.displayName;
            }
            if (optns.convId) {
                params.conversationId = optns.convId;
            }
            if (optns.groupId || optns.clientGroupId) {
                params.isGroup = true;
                if (optns.clientGroupId) {
                    params.clientGroupId = optns.clientGroupId;
                    var group = mckGroupUtils.getGroupByClientGroupId(optns.clientGroupId);
                    if (typeof group === 'object') {
                        params.tabId = group.contactId;
                    } else {
                        mckGroupService.getGroupFeed({
                            'clientGroupId': params.clientGroupId,
                            'apzCallback': mckGroupLayout.onGroupFeed,
                            'callback': mckGroupLayout.loadGroupTab
                        });
                        $applozic('#mck-search').val('');
                        return;
                    }
                } else {
                    var group = mckGroupUtils.getGroup(optns.groupId);
                    if (typeof group === 'object') {
                        params.tabId = optns.groupId;
                    } else {
                        mckGroupService.getGroupFeed({
                            'groupId': optns.groupId,
                            'apzCallback': mckGroupLayout.onGroupFeed,
                            'callback': mckGroupLayout.loadGroupTab
                        });
                        $applozic('#mck-search').val('');
                        return;
                    }
                }
            }
            mckMessageLayout.loadTab(params);
            $applozic('#mck-search').val('');
        };
        _this.uploadFile = function(file) {
            mckFileService.uploadFile(file);
        };


        _this.audioAttach = function(file) {
            mckFileService.audioRecoder(file);
        };
        _this.loadGroupTab = function(tabId) {
            if (typeof tabId === 'undefined' || tabId === '') {
                return 'GroupId required';
            }
            var group = mckGroupUtils.getGroup(tabId);
            if (typeof group === 'object') {
                mckMessageLayout.loadTab({
                    tabId: tabId,
                    'isGroup': true
                });
                $applozic('#mck-search').val('');
            } else {
                mckGroupService.getGroupFeed({
                    'groupId': tabId,
                    'apzCallback': mckGroupLayout.onGroupFeed,
                    'callback': mckGroupLayout.loadGroupTab
                });
            }
        };
        _this.loadGroupTabByClientGroupId = function(params) {
            if ((typeof params.clientGroupId === 'undefined' || params.clientGroupId === '')) {
                return 'Client Group Id Required';
            }
            var group = mckGroupUtils.getGroupByClientGroupId(params.clientGroupId);
            if (typeof group === 'object') {
                mckMessageLayout.loadTab({
                    tabId: group.contactId,
                    'isGroup': true
                });
                $applozic('#mck-search').val('');
            } else {
                mckGroupService.getGroupFeed({
                    'clientGroupId': params.clientGroupId,
                    'apzCallback': mckGroupLayout.onGroupFeed,
                    'callback': mckGroupLayout.loadGroupTab
                });
            }
        };
        _this.loadConvTab = function(optns) {
            if (typeof optns === 'object' && optns.userId && optns.convId) {
                mckMessageLayout.loadTab({
                    tabId: optns.userId,
                    conversationId: optns.convId,
                    'isGroup': false
                });
            }
        };
        _this.loadTabWithTopic = function (optns) {
            if (typeof optns === 'object' && (optns.userId || optns.groupId) && optns.topicId) {
                var params = {
                    'tabId': optns.userId,
                    'topicId': optns.topicId
                }
                if (optns.userName) {
                    params.userName = optns.userName;
                }
                if (optns.topicStatus) {
                    params.topicStatus = (CONVERSATION_STATUS_MAP.indexOf(optns.topicStatus) === -1) ? CONVERSATION_STATUS_MAP[0] : optns.topicStatus.toString();
                } else {
                    params.topicStatus = CONVERSATION_STATUS_MAP[0];
                }
                if (typeof (MCK_GETTOPICDETAIL) === 'function' || optns.topicDetail) {
                    var topicDetail = (optns.topicDetail) ? (optns.topicDetail) : MCK_GETTOPICDETAIL(optns.topicId);
                    if (typeof topicDetail === 'object' && topicDetail.title !== 'undefined') {
                        MCK_TOPIC_DETAIL_MAP[optns.topicId] = topicDetail;
                    }
                }
                if (optns.message) {
                    var messagePxy = {
                        "type": 5,
                        "contentType": 0,
                        "message": message
                    };
                    params.messagePxy = messagePxy;
                    params.isMessage = true;
                } else {
                    params.isMessage = false;
                }
                if (optns.groupId) {
                    params.isGroup = true;
                    params.groupId = optns.groupId;
                    // params.supportId = optns.supportId;
                } else {
                    params.isGroup = false;
                    params.userId = optns.userId;
                }
                mckMessageService.getConversationId(params);
            } else {
                if (!optns.userId || !optns.groupId) {
                    return 'UserId or groupId required';
                } else if (!optns.topicId) {
                    return 'TopicId required';
                }
            }
        };

        _this.loadContacts = function(contacts) {
            mckMessageLayout.loadContacts(contacts);
        };

				_this.loadContactsForContactList = function (contacts) {
            mckMessageLayout.loadContactsForContactList(contacts);
        };

        _this.setOffline = function() {
            if (typeof window.Applozic.ALSocket !== 'undefined') {
                window.Applozic.ALSocket.sendStatus(0);
            }
        };
        _this.reset = function(optns) {
           ALStorage.clearSessionStorageElements();
           window.Applozic.ALSocket.MCK_TOKEN = '';
           AUTH_CODE = '';
           FILE_META = [];
					 IS_REINITIALIZE = false;
           MCK_GROUP_MAP = [];
           IS_LOGGED_IN = true;
           MCK_CONTACT_MAP = [];
           window.Applozic.ALSocket.USER_DEVICE_KEY = '';
           MCK_MODE = optns.mode;
           USER_COUNTRY_CODE = '';
           MCK_BLOCKED_TO_MAP = [];
           MCK_BLOCKED_BY_MAP = [];
           CONTACT_SYNCING = false;
           MCK_IDLE_TIME_LIMIT = 90;
           MCK_APP_ID = optns.appId;
           MCK_LAST_SEEN_AT_MAP = [];
           MCK_CONVERSATION_MAP = [];
           MCK_TOPIC_DETAIL_MAP = [];
           MCK_CLIENT_GROUP_MAP = [];
           IS_MCK_TAB_FOCUSED = true;
           MCK_LABELS = optns.labels;
           MCK_TOTAL_UNREAD_COUNT = 0;
           MCK_BASE_URL = optns.baseUrl;
					 MCK_CUSTOM_URL = optns.customFileUrl;
					 MCK_STORAGE_URL = optns.customUploadUrl;
           TAB_FILE_DRAFT = new Object();
           MCK_GROUP_ARRAY = new Array();
           MCK_LAUNCHER = optns.launcher;
           MCK_CONNECTED_CLIENT_COUNT = 0;
           OPEN_GROUP_SUBSCRIBER_MAP = [];
           MCK_USER_NAME = optns.userName;
           IS_MCK_VISITOR = optns.visitor;
           MCK_TOPIC_CONVERSATION_MAP = [];
           MCK_CONTACT_ARRAY = new Array();
           TAB_MESSAGE_DRAFT = new Object();
           MCK_FILE_URL = optns.fileBaseUrl;
					 MCK_CUSTOM_UPLOAD_SETTINGS = optns.fileupload;
					 MCK_GENERATE_CLOUD_FILE_URL = optns.genereateCloudFileUrl;
           IS_MCK_LOCSHARE = optns.locShare;
           IS_CALL_ENABLED = appOptions.video;
           MCK_ON_PLUGIN_INIT = optns.onInit;
           MCK_ON_TOPIC_DETAILS = optns.onTopicDetails;
           MCK_CONTACT_NAME_MAP = new Array();
           MCK_UNREAD_COUNT_MAP = new Array();
           MCK_ON_PLUGIN_CLOSE = optns.onClose;
           MCK_ACCESS_TOKEN = optns.accessToken;
           MCK_DISPLAY_TEXT = optns.displayText;
           MCK_CALLBACK = optns.readConversation;
           MCK_GROUPMAXSIZE = optns.maxGroupSize;
           MCK_TAB_CONVERSATION_MAP = new Array();
           MCK_ON_TAB_CLICKED = optns.onTabClicked;
           MCK_CONTACT_NUMBER = optns.contactNumber;
           MCK_APP_MODULE_NAME = optns.appModuleName;
           MCK_GETTOPICDETAIL = optns.getTopicDetail;
           MCK_FILEMAXSIZE = optns.maxAttachmentSize;
           MCK_MSG_VALIDATION = optns.validateMessage;
           MCK_GETUSERNAME = optns.contactDisplayName;
           MCK_GROUP_MEMBER_SEARCH_ARRAY = new Array();
           MCK_PRICE_DETAIL = optns.finalPriceResponse;
           MCK_GETUSERIMAGE = optns.contactDisplayImage;
           MCK_PRICE_WIDGET_ENABLED = optns.priceWidget;
           MCK_OPEN_GROUP_SETTINGS = appOptions.openGroupSettings;
           MCK_OFFLINE_MESSAGE_DETAIL = optns.offlineMessageDetail;
           MCK_INIT_AUTO_SUGGESTION = optns.initAutoSuggestions;
           MCK_GETCONVERSATIONDETAIL = optns.getConversationDetail;
           MCK_AUTHENTICATION_TYPE_ID = optns.authenticationTypeId;
           MCK_USER_ID = (IS_MCK_VISITOR) ? 'guest' : $applozic.trim(optns.userId);
           MCK_GOOGLE_API_KEY = (IS_MCK_LOCSHARE) ? optns.googleApiKey : "NO_ACCESS";
           IS_MCK_OL_STATUS = (typeof optns.olStatus === 'boolean') ? (optns.olStatus) : false;
           IS_MCK_TOPIC_BOX = (typeof optns.topicBox === 'boolean') ? (optns.topicBox) : false;
           IS_OFFLINE_MESSAGE_ENABLED = (typeof optns.showOfflineMessage === "boolean") ? (optns.showOfflineMessage) : false;
           IS_MCK_TOPIC_HEADER = (typeof optns.topicHeader === 'boolean') ? (optns.topicHeader) : false;
           IS_NOTIFICATION_ENABLED = (typeof optns.notification === 'boolean') ? optns.notification : true;
           IS_SW_NOTIFICATION_ENABLED = (typeof optns.swNotification === "boolean") ? optns.swNotification : false;
           MCK_SUPPORT_ID_DATA_ATTR = (optns.supportId) ? ('data-mck-id="' + optns.supportId + '"') : '';
           IS_GROUP_SUBTITLE_HIDDEN = (typeof optns.hideGroupSubtitle === "boolean") ? (optns.hideGroupSubtitle) : false;
           MCK_DEFAULT_MESSAGE_METADATA = (typeof optns.defaultMessageMetaData === 'undefined') ? {} : optns.defaultMessageMetaData;
           IS_MCK_GROUPUSERCOUNT = (typeof optns.groupUserCount === "boolean") ? optns.groupUserCount : false;
           IS_MCK_NOTIFICATION = (typeof optns.desktopNotification === "boolean") ? optns.desktopNotification : false;
           IS_MCK_OWN_CONTACTS = (typeof optns.loadOwnContacts === 'boolean') ? (optns.loadOwnContacts) : false;
           MESSAGE_BUBBLE_AVATOR_ENABLED = (typeof optns.messageBubbleAvator === "boolean") ? (optns.messageBubbleAvator) : false;
           IS_RESET_USER_STATUS = (typeof optns.resetUserStatus === 'boolean') ? (optns.resetUserStatus) : false;
           IS_LAUNCH_TAB_ON_NEW_MESSAGE = (typeof optns.launchOnNewMessage === "boolean") ? optns.launchOnNewMessage : false;
           IS_AUTO_TYPE_SEARCH_ENABLED = (typeof optns.autoTypeSearchEnabled === "boolean") ? optns.autoTypeSearchEnabled : true;
           MCK_CHECK_USER_BUSY_STATUS = (typeof optns.checkUserBusyWithStatus === "boolean") ? (optns.checkUserBusyWithStatus) : false;
           IS_LAUNCH_ON_UNREAD_MESSAGE_ENABLED = (typeof optns.launchOnUnreadMessage === "boolean") ? optns.launchOnUnreadMessage : false;

       }

       _this.logout = function() {
          if (typeof window.Applozic.ALSocket !== 'undefined') {
              window.Applozic.ALSocket.disconnect();
              window.Applozic.AlCustomService && window.Applozic.AlCustomService.logout();
              $applozic.fn.applozic("reset",appOptions);
              $applozic("#mck-sidebox").hide();
              $applozic("#mck-sidebox-launcher").hide();
							window.Applozic.ALSocket.MCK_TOKEN = "";
        			window.Applozic.ALSocket.USER_DEVICE_KEY = "";
          }
          IS_LOGGED_IN = false;
					IS_REINITIALIZE = false;
      };

      _this.createFriendContactList = function(params) {
          mckContactService.createFriendList(params);
      };
      _this.getFriendContactList = function(params) {
        var friendListGroupName;
        if (typeof params.groupName !== 'undefined') {
          friendListGroupName = params.groupName;
        };
        var friendListGroupType;
        if (params.groupType) {
          friendListGroupType = params.groupType;
        };
           mckContactService.getFriendList(friendListGroupName,friendListGroupType);
      };
      _this.removeUserFromFriendContactList = function(param) {
           mckContactService.removeUserFromFriendList(param);
     };
     _this.deleteFriendContactList = function(param) {
           mckContactService.deleteFriendList(param);
      };
        _this.setOnline = function() {
            if (typeof window.Applozic.ALSocket !== 'undefined') {
                window.Applozic.ALSocket.sendStatus(1);
            }
        };
      _this.getUserStatus = function(params) {
            if (typeof params.callback === 'function') {
                if (typeof params.userIds !== 'undefined') {
                    mckContactService.getUsersDetail(params.userIds, params);
                } else {
                    alUserService.getUserStatus(params, function(data){
											$applozic.each(data.users, function (i, user) {
	                     var contact = mckMessageLayout.getContact('' + user.userId);
	                     contact = (typeof contact === 'undefined') ? mckMessageLayout.createContactWithDetail(user) : mckMessageLayout.updateContactDetail(contact, user);
	                        MCK_GROUP_MEMBER_SEARCH_ARRAY.push(contact.contactId);
	                    });
										});
                }
            }
        };
        _this.getGroupList = function(params) {
            if (typeof params.callback === 'function') {
                params.apzCallback = mckGroupLayout.loadGroups;
                mckGroupService.loadGroups(params);
                return 'success';
            } else {
                return 'Callback Function Required';
            }
        };
        _this.leaveGroup = function(params) {
            if (typeof params !== 'object') {
                return 'Unsupported Format. Please check format';
            }
            if (typeof params.callback === 'function') {
                if ((typeof params.groupId === 'undefined' || params.groupId === '') && (typeof params.clientGroupId === 'undefined' || params.clientGroupId === '')) {
                    params.callback({
                        'status': 'error',
                        'errorMessage': 'GroupId or Client GroupId Required'
                    });
                    return;
                }
                params.apzCallback = mckGroupLayout.onGroupLeft;
                mckGroupService.leaveGroup(params);
                return "success";
            } else {
                return "Callback Function Required";
            }
        };

        _this.addGroupMember = function(params) {
            if (typeof params !== 'object') {
                return "Unsupported Format. Please check format";
            }
            if (typeof params.callback === 'function') {
                if ((typeof params.groupId === 'undefined' || params.groupId === '') && (typeof params.clientGroupId === 'undefined' || params.clientGroupId === '')) {
                    params.callback({
                        'status': 'error',
                        'errorMessage': "GroupId or clientGroupId required"
                    });
                    return;
                }
                if (typeof params.userId === 'undefined' || params.userId === '') {
                    params.callback({
                        'status': 'error',
                        'errorMessage': 'UserId required'
                    });
                    return;
                }
                if (typeof params.role !== 'undefined' && GROUP_ROLE_MAP.indexOf(params.role) === -1) {
                    params.callback({
                        'status': 'error',
                        'errorMessage': 'Incorrect member role'
                    });
                    return;
                }

                alUserService.loadUserProfile(params.userId);

                params.apzCallback = mckGroupLayout.onAddedGroupMember;
                mckGroupService.addGroupMember(params);
                return 'success';
            } else {
                return 'Callback function required';
            }
        };

       _this.removeGroupMember = function(params) {
            if (typeof params !== 'object') {
                return 'Unsupported Format. Please check format';
            }
            if (typeof params.callback === 'function') {
                if ((typeof params.groupId === 'undefined' || params.groupId === '') && (typeof params.clientGroupId === 'undefined' || params.clientGroupId === '')) {
                    params.callback({
                        'status': 'error',
                        'errorMessage': 'GroupId or clientGroupId required'
                    });
                    return;
                }
                if (typeof params.userId === 'undefined' || params.userId === '') {
                    params.callback({
                        'status': 'error',
                        'errorMessage': 'UserId required'
                    });
                    return;
                }
                params.apzCallback = mckGroupLayout.onRemovedGroupMember;
                mckGroupService.removeGroupMemberFromChat(params);
                return 'success';
            } else {
                return 'Callback function required';
            }
        };

        _this.updateGroupInfo = function(params) {
            if (typeof params !== 'object') {
                return 'Unsupported format. Please check format';
            }
            if (typeof params.callback === 'function') {
                if ((typeof params.groupId === 'undefined' || params.groupId === '') && (typeof params.clientGroupId === 'undefined' || params.clientGroupId === '')) {
                    params.callback({
                        'status': 'error',
                        'errorMessage': 'GroupId or clientGroupId required'
                    });
                    return;
                }
                if ((typeof params.name === 'undefined' || params.name === '') && (typeof params.imageUrl === 'undefined' || params.imageUrl === '') && (!params.users || params.users.length === 0)) {
                    params.callback({
                        'status': 'error',
                        'errorMessage': 'Group properties required'
                    });
                    return;
                }
                if (params.users && params.users.length > 0) {
                    var users = [];
                    $applozic.each(params.users, function(i, user) {
                        if (user.userId && (typeof user.role !== 'undefined') && GROUP_ROLE_MAP.indexOf(user.role) !== -1) {
                            users.push(user);
                        }
                    })
                    if (users.length === 0) {
                        params.callback({
                            'status': 'error',
                            'errorMessage': 'Incorrect users detail'
                        });
                        return;
                    }
                }
                var users = [];
                $applozic('.mck-group-change-role-box.vis').each(function(i, elm) {
                    var $this = $applozic(this);
                    var newRole = parseInt($this.find('select').val());
                    var role = $this.parents('.mck-li-group-member').data('role');
                    if (newRole !== role) {
                        var user = {
                            userId: $this.parents('.mck-li-group-member').data('mck-id'),
                            role: newRole
                        }
                        users.push(user);
                    }
                });
                params.apzCallback = mckGroupLayout.onUpdateGroupInfo;
                mckGroupService.updateGroupInfo(params);
                return 'success';
            } else {
                return 'Callback function required';
            }
        };


        _this.getMessages = function(params) {
            if (typeof params.callback === 'function') {
                alMessageService.getMessages(params);
            }
        };
        _this.getMessageList = function(params) {
            if (typeof params !== 'undefined' && typeof params.callback === 'function') {
                alMessageService.getMessageList(params, function(message){
									if (typeof message.to !== "undefined" || typeof message.groupId !== "undefined") {
											var messageFeed = alMessageService.getMessageFeed(message);
//											messageFeeds.push(messageFeed);
									}
								});
                return 'success';
            } else {
                return 'Callback function required';
            }
        };
        _this.getMessageListByTopicId = function(params) {
            if (typeof params !== 'object') {
                return 'Unsupported format. Please check format';
            }
            if (typeof params.callback === 'function') {
                if ((typeof params.id === 'undefined' || params.id === '') && (typeof params.clientGroupId === 'undefined' || params.clientGroupId === '')) {
                    params.callback({
                        'status': 'error',
                        'errorMessage': 'Id or clientGroupId required'
                    });
                    return;
                }
                if (params.id && typeof params.isGroup !== 'boolean') {
                    params.callback({
                        'status': 'error',
                        'errorMessage': 'IsGroup parameter required'
                    });
                    return;
                }
                if (!params.topicId) {
                    params.callback('TopicId required');
                    return;
                }
                if (params.id) {
                    params.tabId = params.id;
                }
                params.topicStatus = CONVERSATION_STATUS_MAP[0];
                var conversationId = MCK_TOPIC_CONVERSATION_MAP[params.topicId];
                if (conversationId && typeof MCK_CONVERSATION_MAP[conversationId] === 'object') {
                    params.conversationId = conversationId;
                    alMessageService.getMessageList(params, function(message){
											if (typeof message.to !== "undefined" || typeof message.groupId !== "undefined") {
													var messageFeed = alMessageService.getMessageFeed(message);
//													messageFeeds.push(messageFeed);
											}
										});
                } else {
                    params.isExtMessageList = true;
                    params.pageSize = 1;
                    alMessageService.fetchConversationByTopicId(params, function(params){
										mckMessageService.getMessageList(params);
										});
                }
                return 'success';
            } else {
                return 'Callback function required.';
            }
        };
        _this.sendMessage = function(params) {
            if (typeof params === 'object') {
                params = $applozic.extend(true, {}, message_default_options, params);
                var message = params.message;
                if (!params.to) {
                    return "To field required";
                }
                if (typeof message === 'undefined' || message === '') {
                    return 'Message field required';
                }
                if (params.type > 12) {
                    return 'Invalid message type';
                }
                message = $applozic.trim(message);
                var messagePxy = {
                    'to': $applozic.trim(params.to),
                    'type': params.messageType,
                    'contentType': params.type,
                    'message': message,
										'metadata': params.metadata
                };
                mckMessageService.sendMessage(messagePxy);
                return 'success';
            } else {
                return 'Unsupported format. Please check format';
            }
        };
        _this.sendGroupMessage = function(params) {
            if (typeof params === 'object') {
                params = $applozic.extend(true, {}, message_default_options, params);
                var message = params.message;
                if (!params.groupId && !params.clientGroupId) {
                    return 'groupId or clientGroupId required';
                }
                if (typeof message === 'undefined' || message === '') {
                    return 'message field required';
                }
                if (params.type > 12) {
                    return 'invalid message type';
                }
                message = $applozic.trim(message);
                var messagePxy = {
                    'type': params.messageType,
                    'contentType': params.type,
                    'message': message
                };
                if (params.groupId) {
                    messagePxy.groupId = $applozic.trim(params.groupId);
                } else if (params.clientGroupId) {
                    var group = mckGroupUtils.getGroupByClientGroupId(params.clientGroupId);
                    if (typeof group === 'undefined') {
                        return 'group not found';
                    }
                    messagePxy.clientGroupId = $applozic.trim(params.clientGroupId);
                }
                mckMessageService.sendMessage(messagePxy);
                return 'success';
            } else {
                return 'Unsupported format. Please check format';
            }
        };
        _this.addWelcomeMessage = function(params) {
            if (typeof params === "object") {
                if (typeof params.sender === 'undefined' || params.sender === '') {
                    return 'Sender Field Required';
                }
                if (typeof params.messageContent === 'undefined' || params.messageContent === '') {
                    return 'Message Content Required';
                }
                mckMessageService.sendWelcomeMessage(params);
            } else {
                return 'Unsupported format. Please check format';
            }
        };

	    _this.createGroup = function(params) {
            if (typeof params === 'object') {
                if (typeof params.callback === 'function') {
                    var users = params.users;
                    if (typeof users === 'undefined' || users.length < 1) {
                        params.callback({
                            'status': 'error',
                            'errorMessage': 'Users list required'
                        });
                        return;
                    }
                    if (users.length > MCK_GROUPMAXSIZE) {
                        params.callback({
                            'status': 'error',
                            'errorMessage': "Users limit exceeds " + MCK_GROUPMAXSIZE + ". Max number of users allowed is " + MCK_GROUPMAXSIZE + "."
                        });
                        return;
                    }
                    if (!params.groupName) {
                        params.callback({
                            'status': 'error',
                            'errorMessage': 'Group name required'
                        });
                        return;
                    }
                    if (typeof params.type === 'undefined' || params.type === '') {
                        params.callback({
                            'status': 'error',
                            'errorMessage': 'Group type required'
                        });
                        return;
                    }
                    if (GROUP_TYPE_MAP.indexOf(params.type) === -1) {
                        params.callback({
                            'status': 'error',
                            'errorMessage': 'Invalid group type'
                        });
                        return;
                    }
                    mckMessageService.getGroup(params);
                    return 'success';
                } else {
                    return 'Callback function required';
                }
            } else {
                return 'Unsupported Format. Please check format';
            }
        };

        _this.initGroupTab = function(params) {
            if (typeof params === "object") {
                var users = params.users;
                if (typeof users === 'undefined' || users.length < 1) {
                    return 'Users List Required';
                }
                if (users.length > MCK_GROUPMAXSIZE) {
                    return 'Users limit exceeds ' + MCK_GROUPMAXSIZE + '. Max number of users allowed is ' + MCK_GROUPMAXSIZE + '.';
                }
                if (!params.groupName) {
                    return 'Group name required';
                }
                if (typeof params.type === 'undefined') {
                    return 'Group type required';
                }
                if (GROUP_TYPE_MAP.indexOf(params.type) === -1) {
                    return 'Invalid group type';
                }
                mckMessageService.getGroup(params);
                return 'success';
            } else {
                return 'Unsupported format. Please check format';
            }
        };

        _this.getTotalUnreadCount = function() {
            return MCK_TOTAL_UNREAD_COUNT;
        };
        _this.subscribeToEvents = function(events) {
            if (typeof events === 'object') {
                if (typeof events.onConnectFailed === 'function') {
                    window.Applozic.ALSocket.events.onConnectFailed = events.onConnectFailed;
                }
                if (typeof events.onConnect === 'function') {
                    window.Applozic.ALSocket.events.onConnect = events.onConnect;
                }
                if (typeof events.onMessageDelivered === 'function') {
                   	window.Applozic.ALSocket.events.onMessageDelivered = events.onMessageDelivered;
                }
                if (typeof events.onMessageRead === 'function') {
                	    window.Applozic.ALSocket.events.onMessageRead = events.onMessageRead;
                }
                if (typeof events.onMessageDeleted === 'function') {
                  	window.Applozic.ALSocket.events.onMessageDeleted = events.onMessageDeleted;
                }
                if (typeof events.onConversationDeleted === 'function') {
                 	window.Applozic.ALSocket.events.onConversationDeleted = events.onConversationDeleted;
                }
                if (typeof events.onUserConnect === 'function') {
                	   window.Applozic.ALSocket.events.onUserConnect = events.onUserConnect;
                }
                if (typeof events.onUserDisconnect === 'function') {
                 	window.Applozic.ALSocket.events.onUserDisconnect = events.onUserDisconnect;
                }
                if (typeof events.onConversationReadFromOtherSource === 'function') {
                 	window.Applozic.ALSocket.events.onConversationReadFromOtherSource = events.onConversationReadFromOtherSource;
                }
                if (typeof events.onConversationRead === 'function') {
                 	window.Applozic.ALSocket.events.onConversationRead = events.onConversationRead;
                }
                if (typeof events.onMessageReceived === 'function') {
                	   window.Applozic.ALSocket.events.onMessageReceived = events.onMessageReceived;
                }
                if (typeof events.onMessageSentUpdate === 'function') {
                	   window.Applozic.ALSocket.events.onMessageSentUpdate = events.onMessageSentUpdate;
                }
                if (typeof events.onMessageSent === 'function') {
                 	window.Applozic.ALSocket.events.onMessageSent = events.onMessageSent;
                }
                if (typeof events.onUserBlocked === 'function') {
                 	window.Applozic.ALSocket.events.onUserBlocked = events.onUserBlocked;
                }
                if (typeof events.onUserUnblocked === 'function') {
                 	window.Applozic.ALSocket.events.onUserUnblocked = events.onUserUnblocked;
                }
                if (typeof events.onUserActivated === 'function') {
                	   window.Applozic.ALSocket.events.onUserActivated = events.onUserActivated;
                }
                if (typeof events.onUserDeactivated === 'function') {
                 	window.Applozic.ALSocket.events.onUserDeactivated = events.onUserDeactivated;
                }
            };
        };

        _this.getConversation = function(params) {
            alMessageService.getTopicId({
                'conversationId': params.conversationId
            }, function(params){
							mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
						});
        };


        function MckInit() {
            var _this = this;
						var authKeys = {};
            var refreshIntervalId,
                offlineIntervalId;
            var $mck_file_menu = $applozic("#mck-file-menu");
            var $mck_msg_inner = $applozic("#mck-message-cell .mck-message-inner");
            var $mck_tab_individual = $applozic("#mck-tab-individual");
            var MCK_IDLE_TIME_COUNTER = MCK_IDLE_TIME_LIMIT;
            var INITIALIZE_APP_URL = "/v2/tab/initialize.page";
            _this.getLauncherHtml = function() {
                return '<div id="mck-sidebox-launcher" class="mck-sidebox-launcher">' + '<a href="#" target="_self" class="applozic-launcher mck-button-launcher" ' + (MCK_MODE === 'support' ? MCK_SUPPORT_ID_DATA_ATTR : '') + '><span class="mck-icon-chat"></span></a><div id="applozic-badge-count" class="applozic-badge-count"></div></div></div>' + '<div id="mck-msg-preview" class="mck-msg-preview applozic-launcher">' + '<div class="mck-row">' + '<div class="blk-lg-3 mck-preview-icon"></div>' + '<div class="blk-lg-9">' + '<div class="mck-row mck-truncate mck-preview-content">' + '<strong class="mck-preview-cont-name"></strong></div>' + '<div class="mck-row mck-preview-content">' + '<div class="mck-preview-msg-content"></div>' + '<div class="mck-preview-file-content mck-msg-text notranslate blk-lg-12 mck-msgto n-vis"></div>' + '</div></div></div><div id="mck-msg-preview-btns" class="n-vis"><button id="mck-vid-call-accept">Accept</button><button id="mck-vid-call-reject">reject</reject></div></div>';
            };

            _this.initializeApp = function(optns, isReInit) {
                IS_REINITIALIZE = isReInit;
                var userPxy = {
                    'applicationId': optns.appId,
                    'userId': MCK_USER_ID
                };
                if (MCK_USER_NAME !== null) {
                    userPxy.displayName = optns.userName;
                }
                if (optns.email !== null) {
                    userPxy.email = optns.email;
                }
                if (MCK_CONTACT_NUMBER !== null) {
                    userPxy.contactNumber = optns.contactNumber;
                }
                if (optns.imageLink) {
                    userPxy.imageLink = optns.imageLink;
                }
                if (optns.appModuleName) {
                    userPxy.appModuleName = optns.appModuleName;
                }
                if (MCK_ACCESS_TOKEN) {
                    userPxy.password = optns.accessToken;
                }
                if (AUTHENTICATION_TYPE_ID_MAP.indexOf(MCK_AUTHENTICATION_TYPE_ID) === -1) {
                    MCK_AUTHENTICATION_TYPE_ID = 0;
                }
                if (IS_RESET_USER_STATUS) {
                    userPxy.resetUserStatus = true;
                }
                if (typeof USER_TYPE_ID == 'number') {
                    userPxy.userTypeId = USER_TYPE_ID;
                }
                userPxy.enableEncryption = true;
                userPxy.appVersionCode = 108;
                userPxy.authenticationTypeId = MCK_AUTHENTICATION_TYPE_ID;
                userPxy.sourceUrl = window.location.hostname;
                AUTH_CODE = '';
                window.Applozic.ALSocket.USER_DEVICE_KEY = '';
                var isValidated = _this.validateAppSession(userPxy);
                if (!isValidated) {
                    userPxy.applicationId =  MCK_APP_ID;
              //    window.Applozic.ALApiService.initServerUrl(MCK_BASE_URL);
                    window.Applozic.ALApiService.login(
                        {
                            data: {alUser: userPxy,baseUrl: MCK_BASE_URL},
                            success: function(result) {
                                _this.onLoginSuccess(result, userPxy);
                            },
                            error: function(response) {
                                _this.onLoginFailure();
                            }
                        }
                    );

                } else {
                        if (IS_CALL_ENABLED) {
                                mckCallService.InitilizeVideoClient(MCK_USER_ID, window.Applozic.ALSocket.USER_DEVICE_KEY);
                            }
                   }
									 $applozic(d).on('click', '.imageview', function(e) {
										 	// click event while opening the image for preview
											 var $this = $applozic(this);
											 var that = this;
											 var href = $this.data('url');
											 if(href === ""){
														 var key;
														 var fileUrl;
														 key = $this.data("blobkey");
														 alFileService.generateCloudUrl(key, function(result) {
															 fileUrl= result;
															 that.dataset.url=fileUrl;
															 _this.setImageViewParams(fileUrl, that);
														 });

											 }
											 else {
												 _this.setImageViewParams(href, this);
											 }
									 });
            };

						$applozic(d).on('click', '.file-preview-link', function(e) {
							 // click event while opening the image for preview
							 var $this = $applozic(this);
							 var that = this;
							 var href = that.href;
							 var hostUrl = that.host;
                             var keygen = $this.data("cloudService");
                             var defaultHostUrl = "storage.googleapis.com";
							 if(keygen === "google_cloud"){
											var key;
											var fileUrl;
											key = $this.data("blobkey");
											alFileService.generateCloudUrl(key, function(result) {
												fileUrl= result;
												that.href=fileUrl;
											});
										}
							 if(hostUrl === defaultHostUrl){
								 var key;
								 var fileUrl;
								 key = $this.data("blobkey");
								 alFileService.generateCloudUrl(key, function(result) {
									 fileUrl= result;
									 that.href=fileUrl;
								 });
							 }
						});

						_this.setImageViewParams = function(href, element){
              $applozic(element).fancybox({
                  'openEffect': 'none',
                  'closeEffect': 'none',
                  'padding': 0,
                  'href': href,
                  'type': 'image'
              });
            };

            _this.onLoginSuccess = function(result, userPxy) {
                if (IS_CALL_ENABLED) {
                    mckCallService.InitilizeVideoClient(result.userId, result.deviceKey);
                }
                ALStorage.clearMckMessageArray();
                ALStorage.clearMckContactNameArray();
                if (result === "INVALID_PASSWORD") {
                    if (typeof MCK_ON_PLUGIN_INIT === 'function') {
                        MCK_ON_PLUGIN_INIT({
                            'status': 'error',
                            'errorMessage': 'INVALID PASSWORD'
                        });
                    }
                    return;
                } else if (result === 'INVALID_APPID') {
                    if (typeof MCK_ON_PLUGIN_INIT === 'function') {
                        MCK_ON_PLUGIN_INIT({
                            'status': 'error',
                            'errorMessage': 'INVALID APPLICATION ID'
                        });
                    }
                    return;
                } else if (result === 'error' || result === 'USER_NOT_FOUND') {
                    if (typeof MCK_ON_PLUGIN_INIT === 'function') {
                        MCK_ON_PLUGIN_INIT({
                            'status': 'error',
                            'errorMessage': 'USER NOT FOUND'
                        });
                    }
                    return;
                } else if (result === 'APPMODULE_NOT_FOUND') {
                    if (typeof MCK_ON_PLUGIN_INIT === 'function') {
                        MCK_ON_PLUGIN_INIT({
                            'status': 'error',
                            'errorMessage': 'APPMODULE NOT FOUND'
                        });
                    }
                    return;
                }
                if (typeof result === 'object' && result !== null && result.token) {
                    result.appId = userPxy.applicationId;
                    if (MCK_ACCESS_TOKEN) {
                        result.accessToken = userPxy.password;
                    }
                    _this.onInitApp(result);
                    // mckUtils.manageIdleTime();
                } else {
                    if (typeof MCK_ON_PLUGIN_INIT === 'function') {
                        MCK_ON_PLUGIN_INIT({
                            'status': 'error',
                            'errorMessage': 'UNABLE TO PROCESS REQUEST'
                        });
                    }
                }
            };
            _this.onLoginFailure = function() {
                ALStorage.clearMckMessageArray();
                if (typeof MCK_ON_PLUGIN_INIT === "function") {
                    MCK_ON_PLUGIN_INIT({
                        'status': 'error',
                        'errorMessage': 'UNABLE TO PROCESS REQUEST'
                    });
                }
            }

            _this.onInitApp = function(data) {
                _this.appendLauncher();
                _this.setLabels();
                $applozic('.applozic-launcher').each(function() {
                    if (!$applozic(this).hasClass('mck-msg-preview')) {
                        $applozic(this).show();
                    }
                });
                window.Applozic.ALSocket.MCK_TOKEN = data.token;
                mckUtils.setEncryptionKey(data.encryptionKey);
								if (typeof (data.encryptionKey) !== 'undefined'){
									ALStorage.setEncryptionKey(data.encryptionKey);
								}
                MCK_USER_ID = data.userId;
                USER_COUNTRY_CODE = data.countryCode;
                window.Applozic.ALSocket.USER_DEVICE_KEY = data.deviceKey;
                if (typeof MCK_WEBSOCKET_URL !== 'undefined'){
                    data.websocketUrl = MCK_WEBSOCKET_URL;
                }
                if (typeof MCK_WEBSOCKET_PORT !== "undefined") {
                    data.websocketPort = MCK_WEBSOCKET_PORT;
                }       
                MCK_IDLE_TIME_LIMIT = data.websocketIdleTimeLimit;
                MCK_USER_TIMEZONEOFFSET = data.timeZoneOffset;
                MCK_FILE_URL = data.fileBaseUrl;
                IS_MCK_USER_DEACTIVATED = data.deactivated;
                AUTH_CODE = btoa(data.userId + ':' + data.deviceKey);

				window.Applozic.ALApiService.setAjaxHeaders(AUTH_CODE,MCK_APP_ID,window.Applozic.ALSocket.USER_DEVICE_KEY,MCK_ACCESS_TOKEN,MCK_APP_MODULE_NAME);

                _this.setUnreadCountOnStartup(MCK_USER_ID);

                MCK_CONNECTED_CLIENT_COUNT = data.connectedClientCount;
                if (!IS_MCK_VISITOR && MCK_USER_ID !== 'guest' && MCK_USER_ID !== '0' && MCK_USER_ID !== 'C0') {
                    (IS_REINITIALIZE) ? window.Applozic.ALSocket.reconnect(): window.Applozic.ALSocket.init(MCK_APP_ID, data, events);
                    // mckGroupService.loadGroups();
                }
                mckMessageLayout.createContactWithDetail({
                    'userId': MCK_USER_ID,
                    'displayName': data.displayName,
                    'photoLink': data.imageLink
                });
                $applozic.ajaxPrefilter(function(options) {
                    if (!options.beforeSend && (options.url.indexOf(MCK_BASE_URL) !== -1)) {
                        options.beforeSend = function(jqXHR) {
                            _this.setHeaders(jqXHR);
                        };
                    }
                });
                if (data.betaPackage) {
                    var poweredByUrl = "https://www.applozic.com/?utm_source=" + w.location.href + "&utm_medium=webplugin&utm_campaign=poweredby";
                    $applozic('.mck-running-on a').attr('href', poweredByUrl);
                    $applozic('.mck-running-on').removeClass('n-vis').addClass('vis');
                }
                if(MCK_BASE_URL){
                    data.baseUrl =MCK_BASE_URL;
                }
                var mckContactNameArray = ALStorage.getMckContactNameArray();
                if (mckContactNameArray !== null && mckContactNameArray.length > 0) {
                    for (var i = 0; i < mckContactNameArray.length; i++) {
                        var nameMap = mckContactNameArray[i];
                        if (nameMap !== null) {
                            MCK_CONTACT_NAME_MAP[nameMap[0]] = nameMap[1];
                        }
                    }
                }
                alUserService.checkUserConnectedStatus(function(otherUserIdArray){
									(otherUserIdArray.length > 0) ? mckContactService.getUsersDetail(otherUserIdArray, {
			                setStatus: true
			            }): mckUserUtils.updateUserConnectedStatus();
								});
                if (typeof MCK_ON_PLUGIN_INIT === 'function') {
                    MCK_ON_PLUGIN_INIT('success',data);
                }
                mckInit.tabFocused();
                if ($mckChatLauncherIcon.length > 0 && MCK_TOTAL_UNREAD_COUNT > 0) {
                    $mckChatLauncherIcon.html(MCK_TOTAL_UNREAD_COUNT);
                }
                mckMessageService.loadMessageList({
                    'tabId': '',
                    'isGroup': false,
                    'isLaunch': IS_LAUNCH_ON_UNREAD_MESSAGE_ENABLED
                });
								alFileService.init(data);
                alNotificationService.subscribeToServiceWorker();
                ALStorage.setAppHeaders(data);
                mckGroupService.loadGroups({
                    apzCallback: mckGroupLayout.loadGroups
                });
								w.dispatchEvent(new CustomEvent("applozicInitilized",{detail:data,bubbles: true,cancelable: true}));
            };
            _this.validateAppSession = function(userPxy) {
                var appHeaders = ALStorage.getAppHeaders();
                if (appHeaders && appHeaders.userId) {
                    if (userPxy.applicationId === appHeaders.appId && userPxy.userId === appHeaders.userId && userPxy.password === appHeaders.accessToken) {
                        _this.onInitApp(appHeaders);
                        return true;
                    }
                    ALStorage.clearAppHeaders();
                    return false;
                } else {
                    return false;
                }

            };
            _this.setHeaders = function(jqXHR) {
                jqXHR.setRequestHeader("UserId-Enabled", true);
                if (AUTH_CODE) {
                    jqXHR.setRequestHeader("Authorization", "Basic " + AUTH_CODE);
                    jqXHR.setRequestHeader("Application-User", "Basic " + AUTH_CODE);
                }
                jqXHR.setRequestHeader("Application-Key", MCK_APP_ID);
                if (window.Applozic.ALSocket.USER_DEVICE_KEY) {
                    jqXHR.setRequestHeader("Device-Key", window.Applozic.ALSocket.USER_DEVICE_KEY);
                }
                if (MCK_ACCESS_TOKEN) {
                    jqXHR.setRequestHeader("Access-Token", MCK_ACCESS_TOKEN);
                }
                if (MCK_APP_MODULE_NAME) {
                    jqXHR.setRequestHeader("App-Module-Name", MCK_APP_MODULE_NAME);
                }
            };
            _this.setLabels = function() {
                $applozic('#mck-conversation-title').html(MCK_LABELS['conversations.title']).attr('title', MCK_LABELS['conversations.title']);
                $applozic('#mck-msg-new, #mck-sidebox-search .mck-box-title').html(MCK_LABELS['start.new']).attr('title', MCK_LABELS['start.new']);
                $applozic('#mck-contact-search-tab strong').html(MCK_LABELS['search.contacts']).attr('title', MCK_LABELS['search.contacts']);
                $applozic('#mck-group-search-tab strong').html(MCK_LABELS['search.groups']).attr('title', MCK_LABELS['search.groups']);
                $applozic('#mck-contact-search-input, #mck-group-search-input, #mck-group-member-search').attr('placeholder', MCK_LABELS['search.placeholder']);
                $applozic('#mck-loc-address').attr('placeholder', MCK_LABELS['location.placeholder']);
                $applozic('#mck-no-conversations').html(MCK_LABELS['empty.conversations']);
                $applozic('#mck-no-messages').html(MCK_LABELS['empty.messages']);
                $applozic('#mck-no-more-conversations').html(MCK_LABELS['no.more.conversations']);
                $applozic('#mck-no-more-messages').html(MCK_LABELS['no.more.messages']);
                $applozic('#mck-no-search-contacts').html(MCK_LABELS['empty.contacts']);
                $applozic('#mck-no-search-groups').html(MCK_LABELS['empty.groups']);
                $applozic('#mck-new-group, #mck-group-create-tab .mck-box-title, #mck-btn-group-create').html(MCK_LABELS['create.group.title']).attr('title', MCK_LABELS['create.group.title']);
                $applozic('#mck-gc-overlay-label').html(MCK_LABELS['add.group.icon']);
                $applozic('#mck-msg-error').html(MCK_LABELS['group.deleted']);
                $applozic('#mck-gc-title-label').html(MCK_LABELS['group.title']);
                $applozic('#mck-gc-type-label').html(MCK_LABELS['group.type']);
                $applozic('#mck-group-info-btn, #mck-group-info-tab .mck-box-title').html(MCK_LABELS['group.info.title']).attr('title', MCK_LABELS['group.info.title']);
                $applozic('#mck-gi-overlay-label').html(MCK_LABELS['change.group.icon']);
                $applozic('#mck-group-member-title').html(MCK_LABELS['members.title']).attr('title', MCK_LABELS['members.title']);
                $applozic('#mck-group-add-member .blk-lg-9, #mck-gm-search-box .mck-box-title').html(MCK_LABELS['add.members.title']).attr('title', MCK_LABELS['add.members.title']);
                $applozic('#mck-btn-group-update').html(MCK_LABELS['group.info.update']).attr('title', MCK_LABELS['group.info.update']);
                $applozic('#mck-btn-leave-group, #mck-btn-group-exit').html(MCK_LABELS['exit.group']).attr('title', MCK_LABELS['exit.group']);
                $applozic('#mck-typing-label').html(MCK_LABELS['typing']);
                $applozic('#mck-btn-clear-messages').html(MCK_LABELS['clear.messages']).attr('title', MCK_LABELS['clear.messages']);
                $applozic('#mck-block-button').html(MCK_LABELS['block.user']).attr('title', MCK_LABELS['block.user']);
                $applozic('#mck-loc-box .mck-box-title, #mck-share-loc-label').html(MCK_LABELS['location.share.title']).attr('title', MCK_LABELS['location.share.title']);
                $applozic('#mck-btn-loc').attr('title', MCK_LABELS['location.share.title']);
                $applozic('#mck-file-up-label').html(MCK_LABELS['file.attachment']);
                $applozic('#mck-file-up').attr('title', MCK_LABELS['file.attachment']);
                $applozic('.mck-file-attach-label').attr('title', MCK_LABELS['file.attach.title']);
                $applozic('#mck-my-loc').html(MCK_LABELS['my.location']).attr('title', MCK_LABELS['my.location']);
                $applozic('#mck-btn-close-loc-box').html(MCK_LABELS['close']).attr('title', MCK_LABELS['close']);
                $applozic('#mck-loc-submit').html(MCK_LABELS['send']).attr('title', MCK_LABELS['send']);
                $applozic('#mck-msg-sbmt').attr('title', MCK_LABELS['send.message'])
                $applozic('#mck-btn-smiley').attr('title', MCK_LABELS['smiley']);
                $applozic('#mck-group-name-save').attr('title', MCK_LABELS['save']);
                $applozic('#mck-btn-group-icon-save').attr('title', MCK_LABELS['save']);
                $applozic('#mck-group-name-edit').attr('title', MCK_LABELS['edit']);
                $applozic('#mck-contact-search-input').attr('title', MCK_LABELS['charsNotAllowedMessage']);
            };

            $applozic(w).on('resize', function() {
                if ($mck_file_menu.css('display') === 'block') {
                    mckMapLayout.fileMenuReposition();
                }
                if ($mck_msg_inner.find('.mck-contact-list').length === 0) {
                    var scrollHeight = $mck_msg_inner.get(0).scrollHeight;
                    if ($mck_msg_inner.height() < scrollHeight) {
                        $mck_msg_inner.animate({
                            scrollTop: $mck_msg_inner.prop("scrollHeight")
                        }, 0);
                    }
                }
            });

            _this.appendLauncher = function() {
                $applozic("#mck-sidebox-launcher").remove();
                $applozic("body").append(_this.getLauncherHtml());
                mckNotificationService.init();
            };
            _this.tabFocused = function() {
                var hidden = 'hidden';
                // Standards:
                if (hidden in d)
                    d.addEventListener("visibilitychange", onchange);
                else if ((hidden === "mozHidden") in d)
                    d.addEventListener("mozvisibilitychange", onchange);
                else if ((hidden === "webkitHidden") in d)
                    d.addEventListener("webkitvisibilitychange", onchange);
                else if ((hidden === "msHidden") in d)
                    d.addEventListener("msvisibilitychange", onchange);
                // IE 9 and lower:
                else if ("onfocusin" in d)
                    d.onfocusin = d.onfocusout = onchange;
                // All others:
                else
                    w.onpageshow = w.onpagehide = w.onfocus = w.onblur = onchange;

                function onchange(evt) {
                    var v = true,
                        h = false,
                        evtMap = {
                            focus: v,
                            focusin: v,
                            pageshow: v,
                            blur: h,
                            focusout: h,
                            pagehide: h
                        };
                    evt = evt || w.event;
                    if (evt.type in evtMap) {
                        IS_MCK_TAB_FOCUSED = evtMap[evt.type];
                    } else {
                        IS_MCK_TAB_FOCUSED = this[hidden] ? false : true;
                    }
                    if (IS_MCK_TAB_FOCUSED) {
                        if (MCK_IDLE_TIME_COUNTER < 1 && IS_LOGGED_IN) {
                            window.Applozic.ALSocket.checkConnected(true);
                        }
                        _this.stopIdleTimeCounter();
                    } else {
                        if (window.Applozic.ALSocket.mck_typing_status === 1) {
                            window.Applozic.ALSocket.sendTypingStatus(0);
                        }
                        _this.manageIdleTime();
                    }
                }
                // set the initial state (but only if browser supports the Page
                // Visibility API)
                if (d[hidden] !== undefined)
                    onchange({
                        type: d[hidden] ? 'blur' : 'focus'
                    });
            };
            _this.manageIdleTime = function() {
                MCK_IDLE_TIME_COUNTER = MCK_IDLE_TIME_LIMIT;
                if (refreshIntervalId) {
                    clearInterval(refreshIntervalId);
                }
                refreshIntervalId = setInterval(function() {
                    if (--MCK_IDLE_TIME_COUNTER < 0) {
                        MCK_IDLE_TIME_COUNTER = 0;
                        window.Applozic.ALSocket.stopConnectedCheck();
                        clearInterval(refreshIntervalId);
                        refreshIntervalId = '';
                    }
                }, 60000);
            };
            _this.stopIdleTimeCounter = function() {
                MCK_IDLE_TIME_COUNTER = MCK_IDLE_TIME_LIMIT;
                if (refreshIntervalId) {
                    clearInterval(refreshIntervalId);
                }
                refreshIntervalId = '';
            };
            _this.manageOfflineMessageTime = function(userId) {
                if (typeof MCK_OFFLINE_MESSAGE_DETAIL === 'object' && !isNaN(MCK_OFFLINE_MESSAGE_DETAIL.timeout)) {
                    if (MCK_OFFLINE_MESSAGE_DETAIL.type === 1) {
                        if (!MCK_OFFLINE_MESSAGE_DETAIL.userIds || MCK_OFFLINE_MESSAGE_DETAIL.userIds.length === 0) {
                            w.console.log("Offline message userIds required.");
                            return;
                        } else if (MCK_OFFLINE_MESSAGE_DETAIL.userIds.indexOf(userId) === -1) {
                            return;
                        }
                    }
                    if (offlineIntervalId) {
                        clearInterval(offlineIntervalId);
                    }
                    offlineIntervalId = setTimeout(function() {
                        clearInterval(offlineIntervalId);
                        offlineIntervalId = '';
                        mckMessageLayout.showOfflineMessage();
                    }, parseInt(MCK_OFFLINE_MESSAGE_DETAIL.timeout) * 5000);
                } else {
                    w.console.log("Offline message timeout required.");
                }
            };
            _this.stopOfflineMessageCounter = function() {
                if (offlineIntervalId) {
                    clearInterval(offlineIntervalId);
                }
                offlineIntervalId = '';
            };
            _this.setUnreadCountOnStartup = function (userId) {
                window.Applozic.ALApiService.getUserDetail({
                    data: [userId],
                    success: function (data) {
                        if (data.status === 'success') {
                            MCK_TOTAL_UNREAD_COUNT = data.response[0].unreadCount;
                            if ($mckChatLauncherIcon.length > 0 && MCK_TOTAL_UNREAD_COUNT > 0) {
                                $mckChatLauncherIcon.html(MCK_TOTAL_UNREAD_COUNT);
                            }
                            mckUtils.badgeCountOnLaucher(MCK_ENABLE_BADGE_COUNT, MCK_TOTAL_UNREAD_COUNT);
                        }
                    },
                    error: function () {
                        throw new Error("Error while fetching unread count.");
                    }
                });
            };
        }

        function MckMessageService() {
            var _this = this;

            var $mck_search = $applozic("#mck-search");
            var $mck_msg_to = $applozic("#mck-msg-to");
            var $mck_msg_new = $applozic("#mck-msg-new");
            var $mck_sidebox = $applozic("#mck-sidebox");
            var $mck_file_box = $applozic("#mck-file-box");
            var $mck_audio= $applozic("#mck-audio");
            var $mck_mike_btn = $applozic("#mck-mike-btn");
            var $mck_text_box = $applozic("#mck-text-box");
            var $mck_msg_form = $applozic("#mck-msg-form");
            var $mck_msg_sbmt = $applozic("#mck-msg-sbmt");
            var $mck_new_group = $applozic("#mck-new-group");
            var $mck_tab_title = $applozic("#mck-tab-title");
            var $mck_msg_error = $applozic("#mck-msg-error");
            var $mck_btn_attach = $applozic("#mck-btn-attach");
            var $mck_tab_status = $applozic("#mck-tab-status");
            var $mck_msg_cell = $applozic("#mck-message-cell");
            var $mck_typing_box = $applozic('.mck-typing-box');
            var $mck_gms_loading = $applozic("#mck-gms-loading");
            var $mck_group_title = $applozic("#mck-group-title");
            var $mck_loading = $applozic("#mck-contact-loading");
            var $mck_no_messages = $applozic('#mck-no-messages');
            var $mck_group_search = $applozic(".mck-group-search");
            var $mck_msg_response = $applozic("#mck-msg-response");
            var $mck_form_field = $applozic("#mck-msg-form input");
            var $mck_block_button = $applozic("#mck-block-button");
            var $li_mck_block_user = $applozic("#li-mck-block-user");
            var $li_mck_group_info = $applozic("#li-mck-group-info");
            var $li_mck_video_call = $applozic("#li-mck-video-call");
            var $mck_response_text = $applozic("#mck_response_text");
            var $mck_contact_search = $applozic(".mck-contact-search");
            var $mck_group_info_tab = $applozic("#mck-group-info-tab");
            var $mck_price_text_box = $applozic("#mck-price-text-box");
            var $mck_sidebox_search = $applozic("#mck-sidebox-search");
            var $mck_btn_group_info = $applozic("#mck-group-info-btn");
            var $mck_group_info_tab = $applozic("#mck-group-info-tab");
            var $mck_btn_group_exit = $applozic("#mck-btn-group-exit");
            var $mck_group_back_link = $applozic("#mck-group-back-link");
            var $mck_btn_leave_group = $applozic("#mck-btn-leave-group");
            var $mck_sidebox_content = $applozic(".mck-sidebox-content");
            var $mck_no_more_messages = $applozic('#mck-no-more-messages');
            var $mck_btn_group_create = $applozic("#mck-btn-group-create");
            var $mck_group_create_tab = $applozic("#mck-group-create-tab");
            var $mck_group_add_member = $applozic("#mck-group-add-member");
            var $mck_contacts_content = $applozic("#mck-contacts-content");
            var $mck_tab_option_panel = $applozic("#mck-tab-option-panel");
            var $mck_no_conversations = $applozic('#mck-no-conversations');
            var $mck_group_create_title = $applozic("#mck-group-create-title");
            var $mck_group_menu_options = $applozic(".mck-group-menu-options");
            var $mck_tab_message_option = $applozic(".mck-tab-message-option");
            var $mck_group_admin_options = $applozic(".mck-group-admin-options");
            var $mck_group_member_search = $applozic("#mck-group-member-search");
            var $mck_msg_inner = $applozic("#mck-message-cell .mck-message-inner");
            var $mck_search_inner = $applozic("#mck-search-cell .mck-message-inner");
            var $mck_no_more_conversations = $applozic('#mck-no-more-conversations');
            var $mck_gm_search_box = $applozic('#mck-gm-search-box');
            var $mck_group_member_search_list = $applozic("#mck-group-member-search-list");
            var $mck_no_gsm_text = $applozic("#mck-no-gsm-text");
						var MESSAGE_SEND_URL = "/rest/ws/message/send";
            var GROUP_CREATE_URL = "/rest/ws/group/v2.1/create";
            var MESSAGE_LIST_URL = "/rest/ws/message/list";
            var UPDATE_REPLY_MAP = "/rest/ws/message/detail"
            var TOPIC_ID_URL = "/rest/ws/conversation/topicId";
						var MESSAGE_DELETE_URL = "/rest/ws/message/delete";
            var CONVERSATION_ID_URL = "/rest/ws/conversation/id";
						var MESSAGE_READ_UPDATE_URL = "/rest/ws/message/read";
            var CONVERSATION_FETCH_URL = "/rest/ws/conversation/get";
            var MESSAGE_ADD_INBOX_URL = "/rest/ws/message/add/inbox";
						var MESSAGE_DELIVERY_UPDATE_URL = "/rest/ws/message/delivered";
            var CONVERSATION_CLOSE_UPDATE_URL = "/rest/ws/conversation/close";
            var CONVERSATION_DELETE_URL = "/rest/ws/message/delete/conversation";
            var CONVERSATION_READ_UPDATE_URL = "/rest/ws/message/read/conversation";
            var offlineblk = '<div id="mck-ofl-blk" class="mck-m-b"><div class="mck-clear"><div class="blk-lg-12 mck-text-light mck-text-muted mck-test-center">${userIdExpr} is offline now</div></div></div>';
            var refreshIntervalId;
            var $minutesLabel = $applozic("#mck-minutes");
            var $secondsLabel = $applozic("#mck-seconds");
          _this.timer = function() {
               var totalSeconds = 0;
               var that = this;
               refreshIntervalId = setInterval(function(){
                   ++totalSeconds;
                  $secondsLabel.html(that.pad(totalSeconds%60));
                  $minutesLabel.html(that.pad(parseInt(totalSeconds/60)));
               }, 1000);

               that.pad = function(val) {
                   var valString = val + "";
                   if(valString.length < 2)
                   {
                       return "0" + valString;
                   }
                   else
                   {
                       return valString;
                   }
                 };
           };
          _this.stoptimer = function() {
           $secondsLabel.html("0");
           $minutesLabel.html("0");
           clearInterval(refreshIntervalId);
           };
            $applozic.template("oflTemplate", offlineblk);
            $applozic(d).on("click", ".mck-message-delete", function() {
                _this.deleteMessage($applozic(this).parents('.mck-m-b').data("msgkey"));
            });

            $applozic(d).on("click", ".mck-message-reply", function() {
                _this.replyMessage($applozic(this).parents('.mck-m-b').data("msgkey"));
            });

            $applozic(d).on("click", ".mck-message-forward", function() {
                $mck_msg_new.data('forwardMessageKey', $applozic(this).parents('.mck-m-b').data("msgkey"));
                $mck_msg_new.trigger('click');
            });
            $applozic(".mck-minimize-icon").click(function() {
                $applozic(".mck-box-md,.mck-box-ft").animate({
                    height: "toggle"
                });
                if ($mck_sidebox_content.hasClass("minimized")) {
                    $mck_sidebox_content.css('height', '100%');
                    $mck_sidebox_content.removeClass("minimized");
                } else {
                    $mck_sidebox_content.css('height', '0%');
                    $mck_sidebox_content.addClass("minimized");
                }
            });
            _this.init = function() {
                ALStorage.clearMckMessageArray();
                $applozic(d).on("click", "." + MCK_LAUNCHER, function() {
                    if ($applozic(this).hasClass('mck-msg-preview')) {
                        $applozic(this).hide();
                    }
                });
                mckMessageLayout.initSearchAutoType();
                $mck_contact_search.click(function() {
                  var contactList;
                  var friendListGroupName= ALStorage.getFriendListGroupName();
                  var friendListGroupType= ALStorage.getFriendListGroupType();
                	  if(friendListGroupName){
                       contactList= mckContactService.getFriendList(friendListGroupName,friendListGroupType);
                      }
                    mckMessageLayout.addContactsToContactSearchList(contactList);
                });
                $mck_group_search.click(function() {
                    mckMessageLayout.addGroupsToGroupSearchList();
                });
                $mck_text_box.keydown(function(e) {
                    if ($mck_text_box.hasClass('mck-text-req')) {
                        $mck_text_box.removeClass('mck-text-req');
                    }
                    if (e.keyCode === 13 && (e.shiftKey || e.ctrlKey)) {
                        e.preventDefault();
                        if (w.getSelection) {
                            var selection = w.getSelection(),
                                range = selection.getRangeAt(0),
                                br = d.createElement("br"),
                                textNode = d.createTextNode("\u00a0"); // Passing
                            range.deleteContents(); // required or not?
                            range.insertNode(br);
                            range.collapse(false);
                            range.insertNode(textNode);
                            range.selectNodeContents(textNode);
                            selection.removeAllRanges();
                            selection.addRange(range);
                            $mck_text_box.animate({
                                scrollTop: $mck_text_box.prop("scrollHeight")
                            }, 0);
                            return false;
                        }
                    } else if (e.keyCode === 13) {
                        e.preventDefault();
                        if (window.Applozic.ALSocket.mck_typing_status === 1) {
                            window.Applozic.ALSocket.sendTypingStatus(0,window.Applozic.ALSocket.mck_typing_status, MCK_USER_ID, $mck_msg_inner.data('mck-id'));
                        }
                        ($mck_msg_sbmt.is(':disabled') && $mck_file_box.hasClass('vis')) ? alert('Please wait file is uploading.'): $mck_msg_form.submit();
                    } else if (window.Applozic.ALSocket.mck_typing_status === 0) {
                        window.Applozic.ALSocket.sendTypingStatus(1,window.Applozic.ALSocket.mck_typing_status, MCK_USER_ID,$mck_msg_inner.data('mck-id'));
                    }
                });
                $applozic(d).on('click', '.mck-btn-clear-messages', function() {
                    if (confirm(MCK_LABELS['clear.messages.alert'])) {
                        mckMessageService.deleteConversation();
                    }
                });
                $applozic(d).on("click", ".applozic-tm-launcher", function(e) {
                    e.preventDefault();
                    var tabId = $applozic(this).data("mck-id");
                    tabId = (typeof tabId !== "undefined" && tabId !== '') ? tabId.toString() : '';
                    var userName = $applozic(this).data("mck-name");
                    userName = (typeof userName !== "undefined" && userName !== '') ? userName.toString() : '';
                    var supportId = $applozic(this).data("mck-supportid");
                    supportId = (typeof supportId !== "undefined" && supportId !== '') ? supportId.toString() : '';
                    var topicId = $applozic(this).data("mck-topicid");
                    topicId = (typeof topicId !== "undefined" && topicId !== '') ? topicId.toString() : '';
                    var msgText = $applozic(this).data("mck-msg");
                    msgText = (typeof msgText !== "undefined" && msgText !== '') ? msgText.toString() : '';
                    if (typeof(MCK_GETTOPICDETAIL) === "function" && topicId) {
                        var topicDetail = MCK_GETTOPICDETAIL(topicId);
                        if (typeof topicDetail === 'object' && topicDetail.title !== 'undefined') {
                            MCK_TOPIC_DETAIL_MAP[topicId] = topicDetail;
                        }
                    }
                    var params = {
                        'topicId': topicId,
                        'tabId': tabId,
                        'userName': userName,
                        'isMessage': true
                    };
                    var messagePxy = {
                        "type": 5,
                        "contentType": 0,
                        "message": msgText
                    };
                    params.messagePxy = messagePxy;
                    if (supportId) {
                        params.isGroup = true;
                        params.supportId = supportId;
                        mckMessageService.getConversationId(params);
                    } else {
                        params.isGroup = false;
                        mckMessageLayout.loadTab(params, alMessageService.dispatchMessage);
                    }
                });
                $applozic(d).on("click", ".applozic-wt-launcher", function(e) {
                    e.preventDefault();
                    var tabId = $applozic(this).data("mck-id");
                    tabId = (typeof tabId !== "undefined" && tabId !== '') ? tabId.toString() : '';
                    var userName = $applozic(this).data("mck-name");
                    userName = (typeof userName !== "undefined" && userName !== '') ? userName.toString() : '';
                    var topicId = $applozic(this).data("mck-topicid");
                    topicId = (typeof topicId !== "undefined" && topicId !== '') ? topicId.toString() : '';
                    var topicStatus = $applozic(this).data("mck-topic-status");
                    if (topicStatus) {
                        topicStatus = (CONVERSATION_STATUS_MAP.indexOf(topicStatus) === -1) ? CONVERSATION_STATUS_MAP[0] : topicStatus.toString();
                    } else {
                        topicStatus = CONVERSATION_STATUS_MAP[0];
                    }
                    if (typeof(MCK_GETTOPICDETAIL) === "function") {
                        var topicDetail = MCK_GETTOPICDETAIL(topicId);
                        if (typeof topicDetail === 'object' && topicDetail.title !== 'undefined') {
                            MCK_TOPIC_DETAIL_MAP[topicId] = topicDetail;
                        }
                    }
                    mckMessageService.getConversationId({
                        'tabId': tabId,
                        'isGroup': false,
                        'userName': userName,
                        'topicId': topicId,
                        'topicStatus': topicStatus,
                        'isMessage': false
                    });
                });
                $applozic(d).on("click", ".applozic-ct-launcher", function(e) {
                    e.preventDefault();
                    var tabId = $applozic(this).data("mck-id");
                    tabId = (typeof tabId !== "undefined" && tabId !== '') ? tabId.toString() : '';
                    var userName = $applozic(this).data("mck-name");
                    userName = (typeof userName !== "undefined" && userName !== '') ? userName.toString() : '';
                    var topicId = $applozic(this).data("mck-topicid");
                    topicId = (typeof topicId !== "undefined" && topicId !== '') ? topicId.toString() : '';
                    var topicStatus = $applozic(this).data("mck-topic-status");
                    if (topicStatus) {
                        topicStatus = (CONVERSATION_STATUS_MAP.indexOf(topicStatus) === -1) ? CONVERSATION_STATUS_MAP[0] : topicStatus.toString();
                    } else {
                        topicStatus = CONVERSATION_STATUS_MAP[0];
                    }
                    var params = {
                        'tabId': tabId,
                        'isGroup': false,
                        'userName': userName,
                        'topicId': topicId,
                        'topicStatus': topicStatus,
                        'isMessage': false
                    };
                    if (typeof(MCK_GETCONVERSATIONDETAIL) === "function") {
                        var conversationDetail = MCK_GETCONVERSATIONDETAIL(topicId);
                        if (typeof conversationDetail === 'object') {
                            if (conversationDetail.topicDetail && typeof(conversationDetail.topicDetail) === 'object' && conversationDetail.topicDetail.title !== 'undefined') {
                                MCK_TOPIC_DETAIL_MAP[topicId] = conversationDetail.topicDetail;
                            }
                            if (conversationDetail.fallBackTemplatesList && conversationDetail.fallBackTemplatesList.length > 0) {
                                params.fallBackTemplatesList = conversationDetail.fallBackTemplatesList;
                            }
                        }
                    }
                    mckMessageService.getConversationId(params);
                });
                $applozic(d).on("click", "." + MCK_LAUNCHER + ", .mck-contact-list ." + MCK_LAUNCHER, function(e) {
                    e.preventDefault();
                    var $this = $applozic(this);
                    var elem = this;
                    if ($this.parents(".mck-search-list").length) {
                        $mck_search.bind('blur');
                        setTimeout(function() {
                            _this.openChat(elem);
                        }, 600);
                    } else {
                        _this.openChat(this);
                    }
                });
                $applozic(d).on("click", ".mck-conversation-tab-link", function(e) {
                    e.preventDefault();
                    var $this = $applozic(this);
                    var currTabId = $mck_msg_inner.data("mck-id");
                    var isGroup = $mck_msg_inner.data("isgroup");
                    mckMessageLayout.loadTab({
                        'tabId': '',
                        'isGroup': false,
                        'lastActiveTabId': currTabId,
                        'isLastActiveTabGroup': isGroup
                    });
                });
                $applozic(d).on("click", ".mck-close-sidebox", function(e) {
                    e.preventDefault();
                    $mck_sidebox.mckModal('hide');
                    var conversationId = $mck_msg_inner.data('mck-conversationid');
                    $mck_msg_inner.data("mck-id", '');
                    $mck_msg_inner.data("mck-topicid", '');
                    $mck_msg_inner.data("mck-name", '');
                    $mck_msg_inner.data('mck-conversationid', '');
                    if (conversationId) {
                        var conversationPxy = MCK_CONVERSATION_MAP[conversationId];
                        if (typeof conversationPxy === 'object') {
                            var topicId = conversationPxy.topicId;
                            if (typeof MCK_ON_PLUGIN_CLOSE === "function") {
                                MCK_ON_PLUGIN_CLOSE(MCK_USER_ID, topicId);
                            }
                        }
                    }
                    window.Applozic.ALSocket.unsubscibeToTypingChannel();
                });
                $applozic(d).on("click", ".mck-price-submit", function(e) {
                    e.preventDefault();
                    _this.sendPriceMessage();
                });
                $mck_price_text_box.keydown(function(event) {
                    if (event.keyCode === 13) {
                        _this.sendPriceMessage();
                    }
                });
                $mck_msg_inner.bind('scroll', function() {
                    if ($mck_msg_inner.find('.mck-contact-list').length > 0) {
                        if ($mck_msg_inner.scrollTop() + $mck_msg_inner.innerHeight() >= $mck_msg_inner[0].scrollHeight) {
                            var startTime = $mck_msg_inner.data('datetime');
                            if (startTime > 0 && !CONTACT_SYNCING) {
                                mckMessageService.loadMessageList({
                                    'tabId': '',
                                    'isGroup': false,
                                    'startTime': startTime
                                });
                            }
                        }
                    } else if ($mck_msg_inner.scrollTop() === 0) {
                        var tabId = $mck_msg_inner.data("mck-id");
                        if (typeof tabId === "undefined" || tabId === '') {
                            return;
                        }
                        var isGroup = $mck_msg_inner.data('isgroup');
                        var conversationId = $mck_msg_inner.data('mck-conversationid');
                        conversationId = (conversationId) ? conversationId.toString() : '';
                        var startTime = $mck_tab_option_panel.data('datetime');
                        if (startTime > 0 && !CONTACT_SYNCING) {
                            mckMessageService.loadMessageList({
                                'tabId': tabId,
                                'isGroup': isGroup,
                                'conversationId': conversationId,
                                'startTime': startTime
                            });
                        }
                    }
                });
                $mck_price_text_box.on('click', function(e) {
                    e.preventDefault();
                    $mck_price_text_box.removeClass('mck-text-req');
                });
                $mck_block_button.on('click', function(e) {
                    e.preventDefault();
                    var tabId = $mck_msg_inner.data('mck-id');
                    var isGroup = $mck_msg_inner.data('isgroup');
                    var isBlock = !$mck_msg_inner.data('blocked');
                    if (isGroup) {
                        $li_mck_block_user.removeClass('vis').addClass('n-vis');
                        $li_mck_video_call.removeClass('vis').addClass('n-vis');
                        return;
                    }
                    var blockText = (isBlock) ? MCK_LABELS['block.user.alert'] : MCK_LABELS['unblock.user.alert'];
                    if (confirm(blockText)) {
                        alUserService.blockUser(tabId, isBlock,function(userId){
													 mckUserUtils.toggleBlockUser(userId, isBlock);
												});
                    }
                });
                $mck_btn_leave_group.on('click', function(e) {
                    e.preventDefault();
                    var tabId = $mck_msg_inner.data('mck-id');
                    var isGroup = $mck_msg_inner.data('isgroup');
                    if (!isGroup) {
                        $mck_group_menu_options.removeClass('vis').addClass('n-vis');
                        return;
                    }
                    if (confirm(MCK_LABELS['exit.group.alert'])) {
                        mckGroupService.leaveGroup({
                            'apzCallback': mckGroupLayout.onGroupLeft,
                            'groupId': tabId
                        });
                    }
                });
                $applozic(d).on('click', '.mck-add-to-group', function(e) {
                    e.preventDefault();
                    var userId = $applozic(this).data('mck-id');
                    if (typeof userId !== 'undefined') {
                        mckGroupLayout.addGroupMemberFromSearch(userId);
                    }
                    $mck_gm_search_box.mckModal('hide');
                });
                $applozic(d).on('click', '.mck-btn-remove-member', function(e) {
                    e.preventDefault();
                    var userId = $applozic(this).parents('.mck-li-group-member').data('mck-id');
                    var groupId = $mck_group_info_tab.data('mck-id');
                    if (typeof groupId !== 'undefined' && typeof userId !== 'undefined') {
                        var group = mckGroupUtils.getGroup(groupId);
                        if (typeof group === 'object' && MCK_USER_ID === group.adminName) {
                            if (confirm(MCK_LABELS['remove.member.alert'])) {
                                mckGroupService.removeGroupMemberFromChat({
                                    'groupId': groupId,
                                    'userId': userId,
                                    'apzCallback': mckGroupLayout.onRemovedGroupMember
                                });
                            }
                        } else {
                            $mck_group_admin_options.removeClass('vis').addClass('n-vis');
                        }
                    }
                });
                $mck_btn_group_exit.on('click', function(e) {
                    e.preventDefault();
                    var groupId = $mck_group_info_tab.data('mck-id');
                    if (!groupId) {
                        mckMessageLayout.loadTab({
                            'tabId': '',
                            'isGroup': false
                        });
                        return;
                    }
                    if (confirm(MCK_LABELS['exit.group.alert'])) {
                        mckGroupService.leaveGroup({
                            'groupId': groupId,
                            'apzCallback': mckGroupLayout.onGroupLeft
                        });
                    }
                });
                $mck_btn_group_info.on('click', function(e) {
                    e.preventDefault();
                    var tabId = $mck_msg_inner.data('mck-id');
                    var isGroup = $mck_msg_inner.data('isgroup');
                    if (!isGroup) {
                        $mck_group_menu_options.removeClass('vis').addClass('n-vis');
                        return;
                    }
                    var params = {
                        'groupId': tabId
                    };
                    var conversationId = $mck_msg_inner.data('mck-conversationid');
                    if (conversationId) {
                        params.conversationId = conversationId;
                    }
                    mckGroupLayout.loadGroupInfo(params);
                });
                $mck_new_group.on('click', function(e) {
                    e.preventDefault();
                    mckGroupLayout.loadCreateGroupTab();
                });
                $mck_group_back_link.on('click', function(e) {
                    e.preventDefault();
                    var groupId = $mck_group_info_tab.data('mck-id');
                    var conversationId = $mck_group_info_tab.data('mck-conversation-id');
                    if (groupId) {
                        var params = {
                            'tabId': groupId,
                            'isGroup': true
                        };
                        if (conversationId) {
                            params.conversationId = conversationId;
                        }
                        mckMessageLayout.loadTab(params);
                    } else {
                        mckMessageLayout.loadTab({
                            'tabId': '',
                            'isGroup': false
                        });
                    }
                });
								$mck_group_add_member.on('click', function (e) {
								    e.preventDefault();
								    var contactList;
								    var friendListGroup = ALStorage.getFriendListGroupName();
								    var groupId = $mck_group_info_tab.data('mck-id');
								    if (groupId) {
								        var group = mckGroupUtils.getGroup(groupId);
								        if (group && group.adminName === MCK_USER_ID) {
								            $mck_group_member_search_list.html('');
								            $mck_gm_search_box.mckModal();
								            $mck_gms_loading.removeClass('n-vis').addClass('vis');
								            if (MCK_GROUP_MEMBER_SEARCH_ARRAY.length > 0 || friendListGroup) {
                                                                                if (latestSeenContactTime) {
                                                                                    var url = '/rest/ws/user/filter?pageSize=50&orderBy=1&startTime=' + latestSeenContactTime + "&endTime=" + (new Date).getTime();;
                                                                                    mckContactService.ajaxcallForContacts(url,true);
                                                                                } else {
                                                                                    mckGroupLayout.addMembersToGroupSearchList();
                                                                                }
								            } else if (IS_MCK_OWN_CONTACTS) {
								                if (MCK_CONTACT_ARRAY.length > 0) {
								                    $applozic.each(MCK_CONTACT_ARRAY, function (i, contact) {
								                        MCK_GROUP_MEMBER_SEARCH_ARRAY.push(contact.contactId);
								                    });
								                    mckGroupLayout.addMembersToGroupSearchList();
								                } else {
								                    $mck_gms_loading.removeClass('vis').addClass('n-vis');
								                    $mck_no_gsm_text.removeClass('n-vis').addClass('vis');
								                }
								            } else {
								                mckContactService.loadContacts();
								            }
								        } else {
								            $mck_group_admin_options.removeClass('vis').addClass('n-vis');
								            return;
								        }
								    }
								});
                $mck_group_member_search.keypress(function(e) {
                    if (e.which === 13) {
                        var userId = $mck_group_member_search.val();
                        if (userId !== '') {
                            mckGroupLayout.addGroupMemberFromSearch(userId);
                        }
                        $mck_group_member_search.val('');
                        return true;
                    }
                });
                $applozic(d).on('click', '.mck-group-member-search-link', function(e) {
                    e.preventDefault();
                    var userId = $mck_group_member_search.val();
                    if (userId !== '') {
                        mckGroupLayout.addGroupMemberFromSearch(userId);
                    }
                    $mck_group_member_search.val('');
                });
                $applozic(d).on('click', '.mck-show-more', function(e) {
                    e.preventDefault();
                    var $this = $applozic(this);
                    var tabId = $this.data('tabId');
                    var isGroup = $mck_msg_inner.data('isgroup');
                    var conversationId = $mck_msg_inner.data('mck-conversationid');
                    conversationId = (conversationId) ? conversationId.toString() : '';
                    var startTime = $this.data('datetime');
                    mckMessageService.loadMessageList({
                        'tabId': tabId,
                        'isGroup': isGroup,
                        'conversationId': conversationId,
                        'startTime': startTime
                    });
                });
                $applozic(d).on("click", ".mck-accept", function(e) {
                    var conversationId = $applozic(this).data('mck-conversationid');
                    var priceText = $applozic(this).data('mck-topic-price');
                    if (typeof(MCK_PRICE_DETAIL) === 'function' && priceText && conversationId) {
                        var conversationPxy = MCK_CONVERSATION_MAP[conversationId];
                        var groupId = $mck_msg_to.val();
                        var supplierId = mckGroupService.getGroupDisplayName(groupId);
                        if (typeof conversationPxy === 'object') {
                            MCK_PRICE_DETAIL({
                                custId: MCK_USER_ID,
                                suppId: supplierId,
                                productId: conversationPxy.topicId,
                                price: priceText
                            });
                            alMessageService.sendConversationCloseUpdate(conversationId);
                        } else {
                            alMessageService.getTopicId({
                                'conversationId': conversationId,
                                'suppId': supplierId,
                                'priceText': priceText
                            }, function(params){
															mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
														});
                        }
                    }
                });
                $mck_msg_form.submit(function() {
                    if (window.Applozic.ALSocket.mck_typing_status === 1) {
                        window.Applozic.ALSocket.sendTypingStatus(0,window.Applozic.ALSocket.mck_typing_status, MCK_USER_ID, $mck_msg_inner.data('mck-id'));
                    }
                    var message = $applozic.trim(mckUtils.textVal($mck_text_box[0]));
                    if ($mck_file_box.hasClass('n-vis') && FILE_META.length > 0) {
                        FILE_META = [];
                    }
                    if (message.length === 0 && FILE_META.length === 0) {
                        $mck_text_box.addClass("mck-text-req");
                        return false;
                    }
                    if (typeof(MCK_MSG_VALIDATION) === 'function' && !MCK_MSG_VALIDATION(message)) {
                        return false;
                    }
                    var messagePxy = {
                        "type": 5,
                        "contentType": 0,
                        "message": message
                    };
                    var conversationId = $mck_msg_inner.data('mck-conversationid');
                    var topicId = $mck_msg_inner.data('mck-topicid');
                    if (conversationId) {
                        messagePxy.conversationId = conversationId;
                    } else if (topicId) {
                        var conversationPxy = {
                            'topicId': topicId
                        };
                        var topicDetail = MCK_TOPIC_DETAIL_MAP[topicId];
                        if (typeof topicDetail === "object") {
                            conversationPxy.topicDetail = w.JSON.stringify(topicDetail);
                        }
                        messagePxy.conversationPxy = conversationPxy;
                    }
                    if ($mck_msg_inner.data("isgroup") === true) {
                        messagePxy.groupId = $mck_msg_to.val();
                    } else {
                        messagePxy.to = $mck_msg_to.val();
                    }
                    $mck_msg_sbmt.attr('disabled', true);
                    $mck_msg_error.removeClass('vis').addClass('n-vis');
                    $mck_msg_error.html('');
                    $mck_response_text.html('');
                    $mck_msg_response.removeClass('vis').addClass('n-vis');
                    _this.sendMessage(messagePxy);
                    return false;
                });
                $mck_form_field.on('click', function() {
                    $applozic(this).val('');
                    $mck_msg_error.removeClass('vis').addClass('n-vis');
                    $mck_msg_response.removeClass('vis').addClass('n-vis');
                });
                $applozic(d).bind("click", function(e) {
                    $applozic(".mck-context-menu").removeClass('vis').addClass('n-vis');
                    if ($mck_btn_attach.hasClass('on') && !$applozic(e.target).hasClass('mck-icon-upload') && !$applozic(e.target).hasClass('mck-btn-attach')) {
                        mckMapLayout.fileMenuToggle();
                    }
                    $mck_text_box.removeClass('mck-text-req');
                    if (d.activeElement && d.activeElement !== $mck_text_box) {
                        if (window.Applozic.ALSocket.mck_typing_status === 1) {
                            window.Applozic.ALSocket.sendTypingStatus(0,window.Applozic.ALSocket.mck_typing_status, MCK_USER_ID, $mck_msg_inner.data('mck-id'));
                        }
                    }
                    if (d.activeElement && d.activeElement.id !== 'mck-group-name-save') {
                        $mck_group_title.removeClass('mck-req-border');
                    }
                    if (d.activeElement && d.activeElement.id !== 'mck-btn-group-create') {
                        $mck_group_create_title.removeClass('mck-req-border');
                    }
                    $applozic('.mcktypeahead.mck-dropdown-menu').hide();
                });

                $applozic(".mck-tabview-item").click(function() {
                    $applozic(".mck-tabview-item").removeClass('active');
                    $applozic(this).addClass('active');
                });
            };
            $applozic('.mck-sidebox').on("click", "#mck-mike-btn" ,function() {
                   $applozic(this).removeClass('vis').addClass('n-vis');
                   $applozic(".mck-stop-btn").addClass("vis").removeClass("n-vis");
                   Fr.voice.record(false, function(){
                	   $applozic("#mck-audio").removeClass('n-vis').addClass('vis');
                  mckMessageService.timer();
               });
           });
           $applozic('.mck-sidebox').on("click", "#mck-stop-recording" ,function() {
        	   $applozic("#mck-mike-btn").addClass('vis').removeClass('n-vis');
        	   $applozic(".mck-stop-btn").addClass("n-vis").removeClass("vis");
        	   $applozic("#mck-audio").removeClass('vis').addClass('n-vis');
                 mckMessageService.stoptimer();
                 Fr.voice.export(function(blob){
                 var params = {};
                 params.file = blob;
                 params.name = "blob";
                 $applozic.fn.applozic('audioAttach', params);
                    }, "blob");
                  Fr.voice.stop();
              });
            _this.openChat = function(ele) {
                if (document.querySelector('.mck-message-inner').clientHeight == 0) {
                    mckMessageLayout.loadTab({
                        'tabId': '',
                        'isGroup': false
                    });
                }
                var $this = $applozic(ele);
                var tabId = $this.data("mck-id");
                var clientGroupId =$this.data("mck-clientgroupid");
                tabId = (typeof tabId !== "undefined" && tabId !== '') ? tabId.toString() : '';
                var userName = $this.data("mck-name");
                userName = (typeof userName !== "undefined" && userName !== '') ? userName.toString() : '';
                var topicId = $this.data("mck-topicid");
                topicId = (typeof topicId !== "undefined" && topicId !== '') ? topicId.toString() : '';
                var isGroup = ($this.data("isgroup") === true);
                var conversationId = $this.data("mck-conversationid");
                conversationId = (typeof conversationId !== "undefined" && conversationId !== '') ? conversationId.toString() : '';

                if (topicId && !conversationId) {
                    var topicStatus = $applozic(elem).data("mck-topic-status");
                    if (topicStatus) {
                        topicStatus = (CONVERSATION_STATUS_MAP.indexOf(topicStatus) === -1) ? CONVERSATION_STATUS_MAP[0] : topicStatus.toString();
                    } else {
                        topicStatus = CONVERSATION_STATUS_MAP[0];
                    }
                    mckMessageService.getConversationId({
                        'tabId': tabId,
                        'isGroup': isGroup,
                        'userName': userName,
                        'topicId': topicId,
                        'topicStatus': topicStatus,
                        'isMessage': false
                    });
                } else {
                    mckMessageLayout.loadTab({
                        'tabId': tabId,
                        'isGroup': isGroup,
                        'userName': userName,
                        'clientGroupId':clientGroupId,
                        'conversationId': conversationId,
                        'topicId': topicId
                    });
                }
                $mck_search.val('');
            };

						_this.sendMessage = function(messagePxy) {
							if (typeof messagePxy !== 'object') {
									return;
							}
							if (messagePxy.to) {
								if (alUserService.MCK_USER_DETAIL_MAP[messagePxy.to] && alUserService.MCK_USER_DETAIL_MAP[messagePxy.to].deletedAtTime || isUserDeleted === true) {
											$mck_msg_error.html(MCK_LABELS['user.delete']).removeClass('n-vis').addClass('vis');
											$applozic("#mck-tab-status").removeClass('vis').addClass('n-vis');
											$mck_msg_form.removeClass('vis').addClass('n-vis');
											$li_mck_block_user.removeClass('vis').addClass('n-vis');
											return;
									}
							}
							var metadata = messagePxy.metadata ? messagePxy.metadata : {};
							var msgKeys = $applozic("#mck-text-box").data("AL_REPLY");
							if (typeof msgKeys !== 'undefined' && msgKeys !== '' && !(messagePxy.forward)) {
									metadata.AL_REPLY = msgKeys;
							}

							messagePxy.metadata = metadata;
							if ((typeof messagePxy.message === 'undefined' || messagePxy.message.length === 0) && FILE_META.length === 0) {
									$mck_text_box.addClass("mck-text-req");
									return;
							}
							if (messagePxy.conversationId) {
									var conversationPxy = MCK_CONVERSATION_MAP[messagePxy.conversationId];
									if (conversationPxy !== 'undefined' && conversationPxy.closed) {
											mckMessageLayout.closeConversation();
											$mck_msg_sbmt.attr('disabled', false);
											return;
									}
							}
							var isBlocked = $mck_msg_inner.data('blocked');
							if (isBlocked && !messagePxy.groupId) {
									mckUserUtils.toggleBlockUser(tabId, true);
									$mck_msg_sbmt.attr('disabled', false);
									return;
							}
							var contact = '';
							if (messagePxy.groupId) {
									contact = mckGroupUtils.getGroup(messagePxy.groupId);
									if (typeof contact === 'undefined') {
											contact = mckGroupUtils.createGroup(messagePxy.groupId);
									}
							} else if (messagePxy.clientGroupId) {
									contact = mckGroupUtils.getGroupByClientGroupId(messagePxy.clientGroupId);
							} else {
									contact = mckMessageLayout.fetchContact(messagePxy.to);
							}
							if ($applozic('#mck-message-cell .mck-no-data-text').length > 0) {
									$applozic('.mck-no-data-text').remove();
							}
							if (messagePxy.message && FILE_META.length === 0) {
									var isTopPanelAdded = ($mck_tab_message_option.hasClass('n-vis'));
									var tabId = $mck_msg_inner.data('mck-id');
									var randomId = mckUtils.randomId();
									messagePxy.key = randomId;
									if (messagePxy.contentType !== 12 && tabId && tabId.toString() === contact.contactId && messagePxy.contentType !== 102) {
											alMessageService.addMessageToTab(messagePxy, contact, function(message, contact){
											mckMessageLayout.addMessage(message, contact, true, true, false);
											});
									}
									var optns = {
											tabId: contact.contactId,
											isTopPanelAdded: isTopPanelAdded
									};
									_this.submitMessage(messagePxy, optns);
							     } else if((messagePxy.message && FILE_META.length !== 0 && (messagePxy.contentType === 1 ||messagePxy.contentType === 2))&& (!messagePxy.forward)) {
									 var isTopPanelAdded = ($mck_tab_message_option.hasClass('n-vis'));
								 var tabId = $mck_msg_inner.data('mck-id');
								 var randomId = mckUtils.randomId();
								 messagePxy.key = randomId;
								 var locationMessage ={};
								 if(messagePxy.groupId){
									 locationMessage.groupId = messagePxy.groupId;
								 }else{
									 locationMessage.to = messagePxy.to;
								 }
								 locationMessage.type = messagePxy.type;
								 locationMessage.key = mckUtils.randomId();;
								 locationMessage.message = messagePxy.message;
								 locationMessage.contentType = messagePxy.contentType;
								 messagePxy.contentType = 1;
								 messagePxy.fileMeta = FILE_META[0];
								 messagePxy.message ="";
								 if (messagePxy.contentType !== 12 && tabId && tabId.toString() === contact.contactId) {
										 alMessageService.addMessageToTab(messagePxy, contact, function(message, contact){
										mckMessageLayout.addMessage(message, contact, true, true, false);
										});
										 alMessageService.addMessageToTab(locationMessage, contact, function(message, contact){
										mckMessageLayout.addMessage(message, contact, true, true, false);
										});
								 }
								 var optns = {
										 tabId: contact.contactId,
										 isTopPanelAdded: isTopPanelAdded
								 };
								 _this.submitMessage(messagePxy, optns);
								 _this.submitMessage(locationMessage, optns);
						} else if (FILE_META.length > 0) {
									$applozic.each(FILE_META, function(i, fileMeta) {
											var isTopPanelAdded = ($mck_tab_message_option.hasClass('n-vis'));
											var tabId = $mck_msg_inner.data('mck-id');
											var randomId = mckUtils.randomId();
											messagePxy.key = randomId;
											messagePxy.fileMeta = fileMeta;
											messagePxy.contentType = 1;
											if (messagePxy.contentType !== 12 && tabId && tabId.toString() === contact.contactId) {
												alMessageService.addMessageToTab(messagePxy, contact, function(message, contact){
												mckMessageLayout.addMessage(message, contact, true, true, false);
												});
											}
											var optns = {
													tabId: contact.contactId,
													isTopPanelAdded: isTopPanelAdded
											};
											_this.submitMessage(messagePxy, optns);
									});
							}
							$mck_text_box.removeClass('mck-text-req');
							$mck_msg_sbmt.attr('disabled', false);
							$applozic('.' + randomId + ' .mck-message-status').removeClass('mck-icon-sent').addClass('mck-icon-time');
							mckMessageLayout.addTooltip(randomId);
							mckMessageLayout.clearMessageField(true);
							FILE_META = [];
							delete TAB_MESSAGE_DRAFT[contact.contactId];
					};

            _this.sendForwardMessage = function(forwardMessageKey) {
                var forwardMessage = ALStorage.getMessageByKey(forwardMessageKey);
                if (typeof forwardMessage === "undefined") {
                    return;
                }
                if (forwardMessage.fileMeta) {
                    FILE_META.push(forwardMessage.fileMeta);
                }

                var messagePxy = {
                    "type": 5,
                    "contentType": forwardMessage.contentType,
                    "message": forwardMessage.message,
                    "forward": "forward"
                };
                if (forwardMessage.metadata) {
                   if(forwardMessage.metadata.AL_REPLY) {
                       forwardMessage.metadata.AL_REPLY ='';
                      }
                 messagePxy.metadata = forwardMessage.metadata;
                }
                var conversationId = $mck_msg_inner.data('mck-conversationid');
                var topicId = $mck_msg_inner.data('mck-topicid');
                if (conversationId) {
                    messagePxy.conversationId = conversationId;
                } else if (topicId) {
                    var conversationPxy = {
                        'topicId': topicId
                    };
                    var topicDetail = MCK_TOPIC_DETAIL_MAP[topicId];
                    if (typeof topicDetail === "object") {
                        conversationPxy.topicDetail = w.JSON.stringify(topicDetail);
                    }
                    messagePxy.conversationPxy = conversationPxy;
                }
                if ($mck_msg_inner.data("isgroup") === true) {
                    messagePxy.groupId = $mck_msg_to.val();
                } else {
                    messagePxy.to = $mck_msg_to.val();
                }
                _this.sendMessage(messagePxy);
            }
            _this.sendWelcomeMessage = function(params) {
                var randomId = mckUtils.randomId();
                var tabId = $mck_msg_inner.data('mck-id');
                var isGroup = $mck_msg_inner.data('isgroup');
                var messagePxy = {
                    'key': randomId,
                    'type': 4,
                    'contentType': 0,
                    'to': params.sender,
                    'message': params.messageContent
                };
                if (tabId && tabId.toString() === params.sender && !isGroup) {
                    var contact = mckMessageLayout.fetchContact(tabId);
										alMessageService.addMessageToTab(messagePxy, contact, function(message, contact){
										mckMessageLayout.addMessage(message, contact, true, true, false);
										});
                }
                window.Applozic.ALApiService.addMessageInbox({
                    data: { sender: "sender", messageContent: "Welcome" }, success: function (result) {
                        if (params.callback) {
                            params.callback(data);
                        }
                    }, error: function () { }
                });

            };
            _this.submitMessage = function(messagePxy, optns) {
                var randomId = messagePxy.key;
                var metadata = messagePxy.metadata ? messagePxy.metadata : {};

                if (MCK_CHECK_USER_BUSY_STATUS) {
                    messagePxy.metadata = {
                        userStatus: 4
                    };
                }
                var msgKeys = $applozic("#mck-text-box").data("AL_REPLY");
                if (typeof msgKeys !== 'undefined' && msgKeys !== '' && !(messagePxy.forward)) {
                    metadata.AL_REPLY = msgKeys;
                    $applozic("#mck-text-box").data("AL_REPLY", '');
                }
                messagePxy.source = MCK_SOURCE;
                var $mck_msg_div = $applozic("#mck-message-cell .mck-message-inner div[name='message']." + randomId);
                if (messagePxy.contentType != 102 && messagePxy.contentType != 103) {
                    messagePxy.metadata = MCK_DEFAULT_MESSAGE_METADATA;
                }
                messagePxy.metadata = metadata;
                window.Applozic.ALApiService.sendMessage({
                    data: {message: messagePxy},
                    success: function(data) {
                        var currentTabId = $mck_msg_inner.data('mck-id');
                        if (typeof data === 'object') {
                            var messageKey = data.messageKey;
                            if (currentTabId && (currentTabId.toString() === optns.tabId)) {
                                var conversationId = data.conversationId;
                                $mck_msg_inner.data('mck-conversationid', conversationId);
                                $mck_msg_div.removeClass(randomId).addClass(messageKey);
                                $mck_msg_div.attr("id",messageKey);
                                $mck_msg_div.data('msgkey', messageKey);
                                $applozic("." + messageKey + " .mck-message-status").removeClass('mck-icon-time').addClass('mck-icon-sent').attr('title', 'sent');
                                mckMessageLayout.addTooltip(messageKey);
                                if (optns.isTopPanelAdded) {
                                    $mck_tab_option_panel.data('datetime', data.createdAt);
                                }
                                var validated = true;
                                if (messagePxy.groupId) {
                                    var group = mckGroupUtils.getGroup(messagePxy.groupId);
                                    if (group.type === 6) {
                                        validated = false;
                                    }
                                }
                                if (validated) {
                                    mckMessageLayout.messageContextMenu(messageKey);
                                }
                            }
                            if (messagePxy.conversationPxy) {
                                var conversationPxy = messagePxy.conversationPxy;
                                if (messagePxy.topicId) {
                                    MCK_TOPIC_CONVERSATION_MAP[messagePxy.topicId] = [conversationId];
                                }
                                MCK_CONVERSATION_MAP[conversationId] = conversationPxy;
                            }
                        } else if (data === 'CONVERSATION_CLOSED' || data === "BUSY_WITH_OTHER") {
                            $mck_msg_sbmt.attr('disabled', false);
                            mckMessageLayout.closeConversation(data);
                            $mck_msg_div.remove();
                            if (optns.isTopPanelAdded) {
                                $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                            }
                        } else if (data === 'error') {
                            $mck_msg_sbmt.attr('disabled', false);
                            $mck_msg_error.html("Unable to process your request. Please try again");
                            $mck_msg_error.removeClass('n-vis').addClass('vis');
                            $mck_msg_div.remove();
                            if (optns.isTopPanelAdded) {
                                $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                            }
                        }
                        // window.Applozic.ALSocket.checkConnected(true);
												var displayName = mckMessageLayout.getTabDisplayName(currentTabId, false);
                        if (!alUserService.MCK_USER_DETAIL_MAP[currentTabId] && currentTabId !== displayName) {
                            var userDetail = {
                                userId: currentTabId,
                                userName: displayName
                            };
                            alUserService.MCK_USER_DETAIL_MAP[userDetail.userId] = userDetail;
                        }
                    },
                    error: function(error) {
                        $mck_msg_error.html('Unable to process your request. Please try again.');
                        $mck_msg_error.removeClass('n-vis').addClass('vis');
                        if ($mck_msg_div) {
                            $mck_msg_div.remove();
                        }
                        if (optns.isTopPanelAdded) {
                            $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                        }
                    }
                });
                $applozic('#mck-reply-to-div').removeClass('vis').addClass('n-vis');
            };

            _this.downloadImage = function(fileurl) {
                window.open(fileurl, "_blank");
            };
			$applozic('div').scroll(function() {
				           if ($applozic("#mck-sidebox-search").hasClass('vis') || $applozic('#mck-gm-search-box').css('display') == 'block') {
				               if ($applozic(this).scrollTop() + $applozic(this).innerHeight() >= $applozic(this)[0].scrollHeight) {
				                if (lastFetchTime) {
				                   var url = '/rest/ws/user/filter?pageSize=50&orderBy=1&startTime=' + lastFetchTime;
				                    mckContactService.ajaxcallForContacts(url, true);
				                  }
				               }
				              }
				           });

            _this.replyMessage = function(msgKey) {
                var displayName ='';
                var tabId = $mck_msg_inner.data('mck-id');
                var message =  alMessageService.getReplyMessageByKey(msgKey);
                $mck_text_box.focus().select();
                $applozic('#mck-reply-to-div').removeClass('n-vis').addClass('vis');
                if(message.type === 5) {
                      displayName =  MCK_LABELS['you'];
                    } else {
                    displayName = mckMessageLayout.getTabDisplayName(message.to, false);
                     }
                $applozic('#mck-reply-to').html(displayName);
                if (typeof message.fileMeta === "object" || message.contentType === 2) {
                	$applozic('#mck-reply-msg').html(mckMessageLayout.getImageForMessagePreview(message));
                 } else {
                	 $applozic('#mck-reply-msg').html(message.message);
                    }
                $applozic("#mck-text-box").data("AL_REPLY", msgKey);
            };

            $applozic("#close").click(function() {
            	$applozic('#mck-reply-to-div').removeClass('vis').addClass('n-vis');
            	$applozic("#mck-text-box").data("AL_REPLY", '');
            });

            _this.deleteMessage = function(msgKey) {
                var tabId = $mck_msg_inner.data('mck-id');
                if (typeof tabId !== 'undefined') {
                    window.Applozic.ALApiService.deleteMessage({
                        data : {key: msgKey},
                        success: function(data) {
                            if (data === 'success') {
                                var currentTabId = $mck_msg_inner.data('mck-id');
                                if (currentTabId === tabId) {
                                    $applozic(".id" + msgKey).remove();
                                    if ($mck_msg_inner.is(":empty")) {
                                        $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                                    }
                                }
                                ALStorage.clearMckMessageArray();
                            } else {
                                w.console.log('Unable to delete message. Please reload page.');
                            }
                        }
                    });
                }
            };
            _this.deleteConversation = function() {
                var tabId = $mck_msg_inner.data('mck-id');
                var isGroup = $mck_msg_inner.data("isgroup");
                var conversationId = $mck_msg_inner.data('mck-conversationid');
                if (typeof tabId !== 'undefined') {
                    var data = {};
                    if (isGroup) {
                        data.groupId = tabId;
                    } else {
                        data.userId = tabId;
                    }
                    if (conversationId) {
                        data.conversationId = conversationId;
                    }
                    CONTACT_SYNCING = true;
                    window.Applozic.ALApiService.deleteConversation({
                        data: data,
                        success: function() {
                            var currentTabId = $mck_msg_inner.data('mck-id');
                            if (currentTabId === tabId) {
                                $mck_msg_inner.html('');
                                $mck_tab_option_panel.data('datetime', '');
                                $mck_msg_cell.removeClass('n-vis').addClass('vis');
                                //   $mck_msg_inner.html('<div class="mck-no-data-text mck-text-muted">No messages yet!</div>');
                                $mck_no_messages.removeClass('n-vis').addClass('vis');
                                $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                                CONTACT_SYNCING = false;
                            }
                        },
                        error: function() {}
                    });
                }
            };
            _this.dropInUnreadCountUpdate =function(tabId,isgroup,isClientGroupId){
				var htmlId
				if(!isgroup){
				 htmlId = mckContactUtils.formatContactId(tabId);
			 }else{
				 htmlId = tabId;
			 }
				var prefix = isgroup ?".li-group-" : ".li-user-" ;
				if(isgroup && isClientGroupId){
					prefix =".li-clientgroupid-"
				}
				$applozic(prefix+ htmlId + " .mck-unread-count-text").html(0);
				$applozic(prefix + htmlId + " .mck-unread-count-box").removeClass('vis').addClass('n-vis');
			}

            _this.loadMessageList = function(params, callback) {
                var individual = false;
                var isConvReq = false;
                var calledFrom = 'loadMessageList';
                var data = {};
                if (typeof params.tabId !== 'undefined' && params.tabId !== '') {
                    if (params.isGroup) {
                        data.groupId = params.tabId;
                    } else {
                        data.userId = params.tabId;
                    }
                    individual = true;
                    if (params.startTime) {
                        data.endTime = params.startTime;
                    }
                    data.pageSize = 30;
                    if ((IS_MCK_TOPIC_HEADER || IS_MCK_TOPIC_BOX) && params.conversationId) {
                        data.conversationId = params.conversationId;
                        if (typeof MCK_TAB_CONVERSATION_MAP[params.tabId] === 'undefined') {
                            isConvReq = true;
                            data.conversationReq = true;
                        } else {
                            mckMessageLayout.addConversationMenu(params.tabId, params.isGroup);
                        }
                    }
                } else {
                    CONTACT_SYNCING = true;
                    if (params.startTime) {
                        data.endTime = params.startTime;
                    }
                    data.mainPageSize = 60;
                }
                if (!params.startTime) {
                    $mck_msg_inner.html('');
                }
                $mck_loading.removeClass('n-vis').addClass('vis');
                window.Applozic.ALApiService.getMessages({
                    data: data,
                    success: function(response) {
                        var data = response.data;
                        var isMessages = true;
                        isUserDeleted = false;
                        var currTabId = $mck_msg_inner.data('mck-id');
                        var isGroupTab = $mck_msg_inner.data('isgroup');
                        if (!params.isGroup || params.startTime) {
                            $mck_loading.removeClass('vis').addClass('n-vis');
                        }
                        CONTACT_SYNCING = false;
                        if (typeof currTabId === 'undefined' || (params.tabId === currTabId && ('' + isGroupTab === '' + params.isGroup))) {
                            if (data + '' === 'null' || typeof data.message === 'undefined' || data.message.length === 0) {
                                isMessages = false;
                                if (individual) {
                                    if (params.startTime) {
                                        $mck_no_more_messages.removeClass('n-vis').addClass('vis');
                                        $mck_no_more_messages.fadeOut(5000, function() {
                                            $mck_no_more_messages.removeClass('vis').addClass('n-vis');
                                        });
                                        $mck_tab_option_panel.data('datetime', '');
                                    } else if (!params.isGroup && $applozic("#mck-message-cell .mck-message-inner div[name='message']").length === 0) {
                                        $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                                        $mck_no_conversations.removeClass('vis').addClass('n-vis');
                                        $mck_no_messages.removeClass('n-vis').addClass('vis');
                                        //   $mck_msg_inner.html('<div class="mck-no-data-text mck-text-muted">No messages yet!</div>');
                                    }
                                } else {
                                    $mck_no_messages.removeClass('vis').addClass('n-vis');
                                    if (params.startTime) {
                                        $mck_no_more_conversations.removeClass('n-vis').addClass('vis');
                                        $mck_no_more_conversations.fadeOut(5000, function() {
                                            $mck_no_more_conversations.removeClass('vis').addClass('n-vis');
                                        });
                                    } else {
                                        $mck_no_messages.removeClass('vis').addClass('n-vis');
                                        $mck_no_conversations.removeClass('n-vis').addClass('vis');
                                        //  $mck_msg_inner.html('<div class="mck-no-data-text mck-text-muted">No conversations yet!</div>');
                                    }
                                    $mck_msg_inner.data('datetime', '');
                                }
                            }
                            if (data + '' !== 'null' && data.status !== 'error') {
                                if (individual) {
                                    if (isMessages) {
                                        if (params.startTime > 0) {
                                            mckMessageLayout.processMessageList(data, false, true);
                                        } else {
                                            if (!params.isGroup) {
                                                mckMessageLayout.processMessageList(data, true, true);
                                                $mck_tab_message_option.removeClass('n-vis').addClass('vis');
                                            }
                                        }
                                    }
                                    if (!params.startTime > 0 && !params.isGroup) {
                                        if (typeof(MCK_CALLBACK) === 'function') {
                                            MCK_CALLBACK(params.tabId);
                                        }
                                    }

                                    if (data.userDetails.length > 0) {
                                        $applozic.each(data.userDetails, function(i, userDetail) {
                                            alUserService.MCK_USER_DETAIL_MAP[userDetail.userId] = userDetail;
                                            if (!params.isGroup) {
                                                if (userDetail.connected) {
                                                    w.MCK_OL_MAP[userDetail.userId] = true;
                                                } else {
                                                    w.MCK_OL_MAP[userDetail.userId] = false;
                                                    if (typeof userDetail.lastSeenAtTime !== 'undefined') {
                                                        MCK_LAST_SEEN_AT_MAP[userDetail.userId] = userDetail.lastSeenAtTime;
                                                    }
                                                }
                                                if (!IS_MCK_USER_DEACTIVATED) {
                                                    if (!params.isGroup) {
                                                        if (userDetail.blockedByThis) {
                                                            alUserService.MCK_BLOCKED_TO_MAP[userDetail.userId] = true;
                                                            mckUserUtils.toggleBlockUser(params.tabId, true);
                                                        } else if (userDetail.blockedByOther) {
                                                            MCK_BLOCKED_BY_MAP[userDetail.userId] = true;
                                                            $mck_tab_title.removeClass('mck-tab-title-w-status');
                                                            $mck_tab_status.removeClass('vis').addClass('n-vis');
                                                            $mck_typing_box.removeClass('vis').addClass('n-vis');
                                                            $mck_msg_inner.data('blocked', false);
                                                        } else {
                                                            mckUserUtils.toggleBlockUser(params.tabId, false);
                                                        }
                                                    }
                                                }
                                                if (currTabId) {
                                                    if (alUserService.MCK_USER_DETAIL_MAP[currTabId] &&(alUserService.MCK_USER_DETAIL_MAP[currTabId].deletedAtTime || isUserDeleted ===true)) {
                                                        $mck_msg_error.html(MCK_LABELS['user.delete']).removeClass('n-vis').addClass('vis');
                                                        $applozic("#mck-tab-status").removeClass('vis').addClass('n-vis');
                                                        $mck_msg_form.removeClass('vis').addClass('n-vis');
                                                        $li_mck_block_user.removeClass('vis').addClass('n-vis');
                                                        return;
                                                    }
                                                }
                                                if (userDetail.userName && !params.startTime) {
                                                    var name = mckMessageLayout.getTabDisplayName(params.tabId, params.isGroup, userDetail.userName);
                                                    $mck_tab_title.html(name);
                                                    $mck_tab_title.attr('title', name);
                                                }
                                            }
                                        });
                                    }
                                    if (IS_OFFLINE_MESSAGE_ENABLED && !params.isGroup && !params.startTime && !w.MCK_OL_MAP[params.tabId]) {
                                        mckInit.manageOfflineMessageTime(params.tabId);
                                    }
                                    if (data.conversationPxys.length > 0) {
                                        var tabConvArray = new Array();
                                        $applozic.each(data.conversationPxys, function(i, conversationPxy) {
                                            if (typeof conversationPxy === 'object') {
                                                tabConvArray.push(conversationPxy);
                                                MCK_CONVERSATION_MAP[conversationPxy.id] = conversationPxy;
                                                MCK_TOPIC_CONVERSATION_MAP[conversationPxy.topicId] = [conversationPxy.id];
                                                if (conversationPxy.topicDetail) {
                                                    try {
                                                        MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId] = $applozic.parseJSON(conversationPxy.topicDetail);
                                                    } catch (ex) {
                                                        w.console.log('Incorect Topic Detail!');
                                                    }
                                                }
                                            }
                                        });
                                        if (isConvReq) {
                                            MCK_TAB_CONVERSATION_MAP[params.tabId] = tabConvArray;
                                            mckMessageLayout.addConversationMenu(params.tabId, params.isGroup);
                                        }
                                    }
                                    if (params.conversationId) {
                                        var conversationPxy = MCK_CONVERSATION_MAP[params.conversationId];
                                        if (typeof conversationPxy === 'object' && conversationPxy.closed) {
                                            mckMessageLayout.closeConversation();
                                        }
                                    }
                                    if (!params.startTime) {
                                        if (params.isGroup) {
                                            mckGroupLayout.addGroupStatus(mckGroupUtils.getGroup(params.tabId));
                                            mckMessageLayout.updateUnreadCount('group_' + params.tabId, 0, true, calledFrom);

                                            _this.dropInUnreadCountUpdate(params.tabId,true);
                                            _this.dropInUnreadCountUpdate(params.clientGroupId,true,true);
                                        } else {
                                            mckMessageLayout.updateUnreadCount('user_' + params.tabId, 0, true, calledFrom);
                                            _this.dropInUnreadCountUpdate(params.tabId,false);
                                        }
                                        if (typeof callback === 'function') {
                                            callback(params);
                                        }
                                    }
                                    if (data.groupFeeds.length > 0) {
                                        $applozic.each(data.groupFeeds, function(i, groupFeed) {
                                            var group = mckGroupUtils.addGroup(groupFeed);
                                            if (!params.startTime) {
                                                var membersIds = groupFeed.membersId;
                                                var userIdArray = [];
                                                $applozic.each(membersIds, function(i, memberId) {
                                                    if (typeof mckMessageLayout.getContact(memberId) === 'undefined') {
                                                        userIdArray.push(memberId);
                                                    }
                                                });
                                                if (userIdArray.length > 0) {
                                                    params.isMessages = isMessages;
                                                    params.messageData = data;
                                                    params.isLoadMessageList = true;
                                                    mckContactService.getUsersDetail(userIdArray, params);
                                                } else {
                                                    mckGroupLayout.addGroupStatus(group);
                                                    var validated = true;
																										var contact;
                                                    if (group.type === 7) {
                                                        $li_mck_group_info.removeClass('vis').addClass('n-vis');
                        																mckGroupService.getContactFromGroupOfTwo(group, function(user){
																												contact = mckMessageLayout.fetchContact(user);
																												});
                                                        mckUserUtils.lastSeenOfGroupOfTwo(contact.contactId);
                                                    }
                                                    if (group.type === 6) {
                                                        mckGroupLayout.validateOpenGroupUser(group);
                                                        validated = mckGroupService.isAppendOpenGroupContextMenu(group);
                                                    }
                                                    $mck_loading.removeClass('vis').addClass('n-vis');
                                                    if (isMessages) {
                                                        $mck_no_messages.removeClass('vis').addClass('n-vis');
                                                        mckMessageLayout.processMessageList(data, true, validated);
                                                        if (group.type !== 6) {
                                                            $mck_tab_message_option.removeClass('n-vis').addClass('vis');
                                                        }
                                                    } else if ($applozic("#mck-message-cell .mck-message-inner div[name='message']").length === 0) {
                                                        $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                                                        $mck_no_messages.removeClass('n-vis').addClass('vis');
                                                        //  $mck_msg_inner.html('<div class="mck-no-data-text mck-text-muted">No messages yet!</div>');
                                                    }
                                                    if (typeof(MCK_CALLBACK) === 'function') {
                                                        MCK_CALLBACK(params.tabId);
                                                    }
                                                }
                                            }
                                        });
                                    }
                                } else {
                                    if (!params.startTime) {
                                        w.MCK_OL_MAP = [];
                                    }
                                    if (data.userDetails.length > 0) {
                                        $applozic.each(data.userDetails, function(i, userDetail) {
                                            alUserService.MCK_USER_DETAIL_MAP[userDetail.userId] = userDetail;
                                            if (userDetail.connected) {
                                                w.MCK_OL_MAP[userDetail.userId] = true;
                                            } else {
                                                w.MCK_OL_MAP[userDetail.userId] = false;
                                                if (typeof userDetail.lastSeenAtTime !== 'undefined') {
                                                    MCK_LAST_SEEN_AT_MAP[userDetail.userId] = userDetail.lastSeenAtTime;
                                                }
                                            }
                                            mckMessageLayout.updateUnreadCount('user_' + userDetail.userId, userDetail.unreadCount, false, calledFrom);
                                            _this.dropInUnreadCountUpdate(userDetail.userId,false);
                                            var contact = mckMessageLayout.getContact('' + userDetail.userId);
                                            (typeof contact === 'undefined') ? mckMessageLayout.createContactWithDetail(userDetail): mckMessageLayout.updateContactDetail(contact, userDetail);
                                        });
                                    }
                                    if (typeof callback === 'function') {
                                        callback(params);
                                    }
                                    if (data.groupFeeds.length > 0) {
                                        $applozic.each(data.groupFeeds, function(i, groupFeed) {
                                            mckMessageLayout.updateUnreadCount('group_' + groupFeed.id, groupFeed.unreadCount, false);

                                            _this.dropInUnreadCountUpdate(params.clientGroupId,true,true);
                                            mckGroupUtils.addGroup(groupFeed);
                                        });
                                    }
                                    if (data.blockedUserPxyList.blockedToUserList.length > 0) {
                                        $applozic.each(data.blockedUserPxyList.blockedToUserList, function(i, blockedToUser) {
                                            if (blockedToUser.userBlocked) {
                                                alUserService.MCK_BLOCKED_TO_MAP[blockedToUser.blockedTo] = true;
                                            }
                                        });
                                    }
                                    if (data.blockedUserPxyList.blockedByUserList.length > 0) {
                                        $applozic.each(data.blockedUserPxyList.blockedByUserList, function(i, blockedByUser) {
                                            if (blockedByUser.userBlocked) {
                                                MCK_BLOCKED_BY_MAP[blockedByUser.blockedBy] = true;
                                            }
                                        });
                                    }
                                    if (data.conversationPxys.length > 0) {
                                        $applozic.each(data.conversationPxys, function(i, conversationPxy) {
                                            MCK_CONVERSATION_MAP[conversationPxy.id] = conversationPxy;
                                            MCK_TOPIC_CONVERSATION_MAP[conversationPxy.topicId] = [conversationPxy.id];
                                            if (conversationPxy.topicDetail) {
                                                try {
                                                    MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId] = $applozic.parseJSON(conversationPxy.topicDetail);
                                                } catch (ex) {
                                                    w.console.log('Incorect Topic Detail!');
                                                }
                                            }
                                        });
                                    }
                                    if (isMessages) {
                                        if (!params.startTime) {
                                            params.isReload = true;
                                            if (!individual) {
                                                ALStorage.setLatestMessageArray(data.message);
                                            }
                                        } else if (params.startTime) {
                                            params.isReload = false;
                                            if (!individual) {
                                                ALStorage.updateLatestMessageArray(data.message);
                                            }
                                        }
                                        if (individual) {
                                            ALStorage.updateMckMessageArray(data.message);
                                        }
                                        mckMessageLayout.addContactsFromMessageList(data, params);
                                    } else {
                                        $mck_msg_inner.data('datetime', '');
                                    }
                                    if (params.isLaunch) {
                                        mckMessageLayout.updateUnreadCountonChatIcon(data.userDetails);
                                    }
                                }
                            }
                        }

                        var forwardMessageKey = $mck_msg_new.data('forwardMessageKey');
                        if (typeof forwardMessageKey !== 'undefined') {
                            mckMessageService.sendForwardMessage(forwardMessageKey);
                            $mck_msg_new.data('forwardMessageKey', '');
                        }
                    },
                    error: function(error) {
												if (xhr.status === 401) {
                                                        ALStorage.clearSessionStorageElements();
														console.log('Please reload page.');
												}
                        CONTACT_SYNCING = false;
                        $mck_loading.removeClass('vis').addClass('n-vis');
                        w.console.log('Unable to load messages. Please reload page.');
                    }
                });
            };
            _this.updateContactList = function(tabId, isGroup) {
                var data = {};
                if (isGroup) {
                    data.groupId = tabId;
                } else {
                    data.userId = tabId;
                }
                data.pageSize=1;
                window.Applozic.ALApiService.getMessages({
                    data: data,
                    success: function(response) {
                        var data = response.data;
                        if (data + '' === "null" || typeof data.message === "undefined" || data.message.length === 0) {
                            mckMessageLayout.clearContactMessageData(tabId, isGroup);
                        } else {
                            var message = data.message[0];
                            if (typeof message !== 'undefined') {
                                (message.groupId) ? mckGroupService.addGroupFromMessage(message, true, function(group, message, update){
																	_this.updateRecentConversationList(group, message, update);
																}): mckMessageLayout.addContactsFromMessage(message, true);
                            }
                        }
                    },
                    error: function(error) {
                        mckMessageLayout.clearContactMessageData(tabId, isGroup);
                    }
                });
            };

						_this.conversationReadUpdate = function(tabId, isGroup) {
								var ucTabId = (isGroup) ? 'group_' + tabId : 'user_' + tabId;
								if (tabId && (mckMessageLayout.getUnreadCount(ucTabId) > 0)) {
										var data = (isGroup) ? "groupId=" + tabId : "userId=" + encodeURIComponent(tabId);
										window.Applozic.ALApiService.conversationReadUpdate({data:data , success: function (response) {
												mckMessageLayout.updateUnreadCount(ucTabId, 0, true);
										}, error: function () {} });
								}
						};

            _this.getConversationId = function (params) {
                if (!params.isGroup && !params.isMessage && (params.topicStatus !== CONVERSATION_STATUS_MAP[1])) {
                    var conversationId = MCK_TOPIC_CONVERSATION_MAP[params.topicId];
                    if (conversationId) {
                        conversationPxy = MCK_CONVERSATION_MAP[conversationId];
                        if (typeof conversationPxy === 'object') {
                            $mck_msg_inner.data('mck-conversationid', conversationPxy.id);
                            params.conversationId = conversationPxy.id;
                            if (typeof MCK_TAB_CONVERSATION_MAP[params.tabId] !== 'undefined') {
                                var tabConvArray = MCK_TAB_CONVERSATION_MAP[params.tabId];
                                tabConvArray.push(conversationPxy);
                                MCK_TAB_CONVERSATION_MAP[params.tabId] = tabConvArray;
                            }
                            mckMessageLayout.loadTab(params);
                            return;
                        }
                    }
                }
                if (params.topicId) {
                    var conversationPxy = {
                        'topicId': params.topicId,
                        'userId': params.tabId,
                        'status': params.topicStatus
                    };
                    if (params.isGroup) {
                    	   conversationPxy.groupId = params.groupId;
                    } else {
	                   	conversationPxy.userId = params.tabId;
	                  }
                    var topicDetail = MCK_TOPIC_DETAIL_MAP[params.topicId];
                    if (typeof topicDetail === 'object') {
                        conversationPxy.topicDetail = w.JSON.stringify(topicDetail);
                    }
                    if (params.fallBackTemplatesList && params.fallBackTemplatesList.length > 0) {
                        conversationPxy.fallBackTemplatesList = params.fallBackTemplatesList;
                    }
                    window.Applozic.ALApiService.getConversationId({
                        data: conversationPxy,
                        success: function (data) {
                            if (typeof data === 'object' && data.status === "success") {
                                var groupPxy = data.response;
                                if (typeof groupPxy === 'object' && groupPxy.conversationPxy !== 'undefined') {
                                    var conversationPxy = groupPxy.conversationPxy;
                                    MCK_CONVERSATION_MAP[conversationPxy.id] = conversationPxy;
                                    MCK_TOPIC_CONVERSATION_MAP[conversationPxy.topicId] = [conversationPxy.id];
                                    if (conversationPxy.topicDetail) {
                                        try {
                                            MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId] = $applozic.parseJSON(conversationPxy.topicDetail);
                                        } catch (ex) {
                                            w.console.log('Incorect Topic Detail!');
                                        }
                                    }
                                    $mck_msg_inner.data('mck-conversationid', conversationPxy.id);
                                    params.conversationId = conversationPxy.id;
                                    if (typeof MCK_TAB_CONVERSATION_MAP[params.tabId] !== 'undefined') {
                                        var tabConvArray = MCK_TAB_CONVERSATION_MAP[params.tabId];
                                        tabConvArray.push(conversationPxy);
                                        MCK_TAB_CONVERSATION_MAP[params.tabId] = tabConvArray;
                                    }
                                    if (params.isGroup) {
                                        var group = mckGroupUtils.addGroup(groupPxy);
                                        params.tabId = group.contactId;
                                    }
                                    (params.isMessage && conversationPxy.created) ? mckMessageLayout.loadTab(params, alMessageService.dispatchMessage) : mckMessageLayout.loadTab(params);
                                }
                            }
                        }, error: function () { }
                    });
                }
            };

            _this.sendPriceMessage = function() {
                var priceText = $mck_price_text_box.val();
                if (priceText === '') {
                    $mck_price_text_box.addClass('mck-text-req');
                    return;
                }
                priceText = $applozic.trim(priceText);
                var tabId = $mck_msg_to.val();
                var conversationId = $mck_msg_inner.data('mck-conversationid', conversationId);
                var messagePxy = {
                    "type": 5,
                    "contentType": 4,
                    "message": priceText
                };
                if ($mck_msg_inner.data("isgroup") === true) {
                    messagePxy.groupId = tabId;
                } else {
                    messagePxy.to = tabId;
                }
                if ($mck_msg_inner.data('mck-conversationid')) {
                    var conversationId = $mck_msg_inner.data('mck-conversationid');
                    messagePxy.conversationId = conversationId;
                    var conversationPxy = MCK_CONVERSATION_MAP[conversationId];
                    if (conversationPxy !== 'object') {
                        alMessageService.getTopicId({
                            'conversationId': conversationId,
                            'suppId': tabId,
                            'priceText': priceText
                        }, function(params){
													mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
												});
                    } else if (typeof(MCK_PRICE_DETAIL) === "function") {
                        MCK_PRICE_DETAIL({
                            'custId': MCK_USER_ID,
                            'suppId': tabId,
                            'productId': conversationPxy.topicId,
                            'price': priceText
                        });
                    }
                    $mck_price_text_box.val('');
                }
                _this.sendMessage(messagePxy);
            };

            _this.getGroup = function(params) {
                var usersArray = [];
                $applozic.each(params.users, function(i, user) {
                    if (typeof user.userId !== 'undefined') {
                        if (typeof user.groupRole === 'undefined' || GROUP_ROLE_MAP.indexOf(user.groupRole) !== -1) {
                            usersArray.push(user);
                        }
                    }
                });
                var groupInfo = {
                    'groupName': $applozic.trim(params.groupName),
                    'users': usersArray,
                    'type': params.type
                };
								if (params.admin) {
                    groupInfo.admin = params.admin;
                }
                if (params.clientGroupId) {
                    groupInfo.clientGroupId = params.clientGroupId;
                }
                if (params.groupIcon) {
                    groupInfo.imageUrl = params.groupIcon;
                }
                groupInfo.metadata = (params.metadata) ? params.metadata : MCK_LABELS['group.metadata'];
                var response = new Object();

                window.Applozic.ALApiService.createGroup({
                    data: {group: groupInfo},
                    success: function(data) {
                        if (params.isInternal) {
                            $mck_btn_group_create.attr('disabled', false).html(MCK_LABELS['create.group.title']);
                        }
                        if (typeof data === 'object' && data.status === 'success') {
                            var groupPxy = data.response;
                            if (typeof groupPxy === 'object') {
                                var group = mckGroupUtils.addGroup(groupPxy);
                                if (groupPxy.users.length > 0) {
                                    $applozic.each(groupPxy.users, function(i, userDetail) {
                                        alUserService.MCK_USER_DETAIL_MAP[userDetail.userId] = userDetail;
                                        if (userDetail.connected) {
                                            w.MCK_OL_MAP[userDetail.userId] = true;
                                        } else {
                                            w.MCK_OL_MAP[userDetail.userId] = false;
                                            if (typeof userDetail.lastSeenAtTime !== 'undefined') {
                                                MCK_LAST_SEEN_AT_MAP[userDetail.userId] = userDetail.lastSeenAtTime;
                                            }
                                        }
                                        mckMessageLayout.updateUnreadCount('user_' + userDetail.userId, userDetail.unreadCount, false);
                                        var contact = mckMessageLayout.getContact('' + userDetail.userId);
                                        (typeof contact === 'undefined') ? mckMessageLayout.createContactWithDetail(userDetail): mckMessageLayout.updateContactDetail(contact, userDetail);
                                    });
                                }
                                params.tabId = group.contactId;
                                params.isGroup = true;
                                if (params.isMessage) {
                                    mckMessageLayout.loadTab(params, alMessageService.dispatchMessage)
                                } else {
                                    if (params.isInternal) {
                                        $mck_msg_inner.data('mck-id', group.contactId);
                                        $mck_msg_inner.data('isgroup', true);
                                        mckGroupLayout.loadGroupInfo({
                                            groupId: group.contactId
                                        });
                                    } else {
                                        mckMessageLayout.loadTab(params);
                                    }
                                }
                                if (typeof params.callback === 'function') {
                                    response.status = 'success';
                                    response.data = group;
                                    params.callback(response);
                                }
                            }
                        } else if (data.status === 'error') {
                            if (typeof params.callback === 'function') {
                                response.status = 'error';
                                response.errorMessage = data.errorResponse[0].description;
                                params.callback(response);
                            }
                        }
                    },
                    error: function() {
                        if (params.isInternal) {
                            $mck_btn_group_create.attr('disabled', false).html(MCK_LABELS['create.group.title']);
                        }
                        if (typeof params.callback === 'function') {
                            response.status = 'error';
                            response.errorMessage = 'Unable to process request.';
                            params.callback(response);
                        }
                    }
                });
            };

        }

        function MckMessageLayout() {
            var _this = this;
            var emojiTimeoutId = '';
            var $mck_search = $applozic("#mck-search");
            var $mck_msg_to = $applozic("#mck-msg-to");
            var $file_name = $applozic(".mck-file-lb");
            var $file_size = $applozic(".mck-file-sz");
            var $mck_sidebox = $applozic("#mck-sidebox");
            var $mck_file_box = $applozic("#mck-file-box");
            var $mck_msg_sbmt = $applozic("#mck-msg-sbmt");
            var $mck_msg_form = $applozic("#mck-msg-form");
            var $mck_text_box = $applozic("#mck-text-box");
            var $mck_msg_error = $applozic("#mck-msg-error");
            var $mck_show_more = $applozic("#mck-show-more");
            var $mck_tab_title = $applozic("#mck-tab-title");
            var $mck_tab_status = $applozic("#mck-tab-status");
            var $mck_msg_cell = $applozic("#mck-message-cell");
            var $mck_typing_box = $applozic('.mck-typing-box');
            var $mck_no_messages = $applozic('#mck-no-messages');

            var $mck_product_box = $applozic("#mck-product-box");
            var $mck_product_icon = $applozic(".mck-product-icon");
            var $mck_product_title = $applozic(".mck-product-title");
            var $mck_product_subtitle = $applozic(".mck-product-subtitle");
            var $product_box_caret = $applozic("#mck-product-box .mck-caret");
            var $mck_product_up_key = $applozic(".mck-product-rt-up .mck-product-key");
            var $mck_contact_search_input_box = $applozic("#mck-contact-search-input-box");
            var $mck_product_up_value = $applozic(".mck-product-rt-up .mck-product-value");
            var $mck_product_down_key = $applozic(".mck-product-rt-down .mck-product-key");
            var $mck_product_down_value = $applozic(".mck-product-rt-down .mck-product-value");

            var $li_mck_group_info = $applozic("#li-mck-group-info");
            var $li_mck_leave_group = $applozic("#li-mck-leave-group");
            var $mck_group_info_tab = $applozic("#mck-group-info-tab");
            var $mck_group_search_tab = $applozic("#mck-group-search-tab");
            var $mck_no_search_groups = $applozic("#mck-no-search-groups");
            var $mck_group_create_tab = $applozic("#mck-group-create-tab");
            var $mck_group_search_list = $applozic("#mck-group-search-list");
            var $mck_group_search_tabview = $applozic("#mck-group-search-tabview");
            var $mck_group_menu_options = $applozic(".mck-group-menu-options");
            var $mck_videocall_btn = $applozic(".mck-videocall-btn");
            var $mck_group_search_input = $applozic("#mck-group-search-input");
            var $mck_group_search_input_box = $applozic("#mck-group-search-input-box");

            var $mck_contact_search_list = $applozic("#mck-contact-search-list");
            var $mck_contacts_content = $applozic("#mck-contacts-content");
            var $mck_contact_search_tab = $applozic("#mck-contact-search-tab");
            var $mck_contact_search_tabview = $applozic("#mck-contact-search-tabview");
            var $mck_contact_search_input = $applozic("#mck-contact-search-input");

            var $mck_search_list = $applozic("#mck-search-list");
            var $mck_no_search_contacts = $applozic("#mck-no-search-contacts");
            var $mck_search_tab_link = $applozic("#mck-search-tab-box li a");
            var $mck_search_tabview_box = $applozic("#mck-search-tabview-box");
            var $mck_sidebox_search = $applozic("#mck-sidebox-search");


            var $mck_loading = $applozic("#mck-contact-loading");
            var $mck_typing_label = $applozic('#mck-typing-label');
            var $mck_price_widget = $applozic("#mck-price-widget");
            var $mck_msg_response = $applozic("#mck-msg-response");

            var $mck_response_text = $applozic("#mck_response_text");
            var $li_mck_block_user = $applozic("#li-mck-block-user");

            var $li_mck_video_call = $applozic("#li-mck-video-call");
            var $mck_search_loading = $applozic("#mck-search-loading");
            var $mck_tab_individual = $applozic("#mck-tab-individual");


            var $mck_attachfile_box = $applozic("#mck-attachfile-box");
            var $mck_atttachmenu_box = $applozic("#mck-attachmenu-box");
            var $mck_sidebox_content = $applozic("#mck-sidebox-content");


            var $mck_tab_option_panel = $applozic("#mck-tab-option-panel");
            var $mck_tab_conversation = $applozic("#mck-tab-conversation");

            var $mck_conversation_header = $applozic("#mck-conversation-header");
            var $mck_no_conversations = $applozic('#mck-no-conversations');

            var $mck_conversation_list = $applozic("#mck-conversation-list");

            var $mck_tab_message_option = $applozic(".mck-tab-message-option");
            var $modal_footer_content = $applozic(".mck-box-ft .mck-box-form");
            var $mck_btn_clear_messages = $applozic('#mck-btn-clear-messages');
            var $mck_offline_message_box = $applozic("#mck-offline-message-box");
            var $mck_msg_inner = $applozic("#mck-message-cell .mck-message-inner");


            var $mck_msg_new = $applozic("#mck-msg-new");
            var FILE_PREVIEW_URL = "/rest/ws/aws/file/";
            var LINK_EXPRESSION = /[-a-zA-Z0-9@:%_\+.~#?&//=]{2,256}\.[a-z]{2,4}\b(\/[-a-zA-Z0-9@:%_\+.~#?&//=]*)?/gi;
            var LINK_MATCHER = new RegExp(LINK_EXPRESSION);
            var markup = '<div name="message" data-msgdelivered="${msgDeliveredExpr}" data-msgsent="${msgSentExpr}" data-msgtype="${msgTypeExpr}" data-msgtime="${msgCreatedAtTime}" data-msgcontent="${replyIdExpr}" data-msgkey="${msgKeyExpr}" data-contact="${toExpr}" id="${msgKeyExpr}" class="mck-m-b ${msgKeyExpr} ${msgFloatExpr} ${msgAvatorClassExpr}">' +
                '<div class="mck-clear">' +
                '<div class="blk-lg-12">' +
                '<div class="mck-msg-avator blk-lg-3">{{html msgImgExpr}}</div>' +
                '<div class="mck-msg-box ${msgClassExpr}">' +
                '<div class= "move-right mck-msg-text"></div>' +
                '<div class ="mck-msg-reply mck-verticalLine ${msgReplyToVisibleExpr}">' +
                '<div class="mck-msgto">${msgReplyTo} </div>' +
                '</div>' +
                '<div class ="mck-msg-reply mck-verticalLine ${msgReplyDivExpr}">' +
                '<div class="mck-msgreply-border ${textreplyVisExpr}">${msgReply}</div>' +
                '<div class="mck-msgreply-border ${msgpreviewvisExpr}">{{html msgPreview}}</div>' +
                '</div>' +
                '<div class="${nameTextExpr} ${showNameExpr}"><span class="mck-ol-status ${contOlExpr}"><span class="mck-ol-icon" title="${onlineLabel}"></span>&nbsp;</span>${msgNameExpr}</div>' +
                '<div class="mck-file-text notranslate mck-attachment downloadimage ${downloadIconVisibleExpr}" data-filemetakey="${fileMetaKeyExpr}" data-filename="${fileNameExpr}" data-fileurl= "${fileUrlExpr}" data-filesize="${fileSizeExpr}"><div>{{html fileExpr}}</div> {{html downloadMediaUrlExpr}}</div>' +
                '<div class="mck-msg-text mck-msg-content"></div>' +
                '</div>' +
                '</div>' +
                '<div class="${msgFloatExpr}-muted mck-text-light mck-text-muted mck-text-xs mck-t-xs">${createdAtTimeExpr} <span class="${statusIconExpr} mck-message-status"></span></div>' +
                '</div>' +
                '<div class="n-vis mck-context-menu">' +
                '<ul>' +
                '<li><a class="mck-message-forward">${msgForwardExpr}</a></li>' +
                '<li><a class="mck-message-delete">${msgDeleteExpr}</a></li>' +
                '<li><a class="mck-message-reply">${msgReplyExpr}</a></li>' +
                '</ul>' +
                '</div>' +
                '</div>';
            var contactbox = '<li id="li-${contHtmlExpr}" class="li-${contHtmlExpr} ${contIdExpr} ${clientGroupIdExpr}" data-msg-time="${msgCreatedAtTimeExpr}">' + '<a class="${mckLauncherExpr}" href="#" target="_self" data-mck-conversationid="${conversationExpr}" data-mck-id="${contIdExpr}" data-mck-clientGroupId ="${clientGroupId}"  data-isgroup="${contTabExpr}">' + '<div class="mck-row" title="${contNameExpr}">' + '<div class="mck-conversation-topic mck-truncate ${contHeaderExpr}">${titleExpr}</div>' + '<div class="blk-lg-3">{{html contImgExpr}}</div>' + '<div class="blk-lg-9">' + '<div class="mck-row">' + '<div class="blk-lg-8 mck-cont-name mck-truncate"><div class="mck-ol-status ${contOlExpr}"><span class="mck-ol-icon" title="${onlineLabel}"></span>&nbsp;</div><strong>${contNameExpr}</strong></div>' + '<div class="mck-text-muted move-right mck-cont-msg-date mck-truncate blk-lg-4">${msgCreatedDateExpr}</div></div>' + '<div class="mck-row">' + '<div class="mck-cont-msg-wrapper blk-lg-6 mck-truncate msgTextExpr"></div>' + '<div class="mck-unread-count-box move-right mck-truncate ${contUnreadExpr}"><span class="mck-unread-count-text">{{html contUnreadCount}}</span></div>' + '</div></div></div></a></li>';
            var convbox = '<li id="li-${convIdExpr}" class="${convIdExpr}">' + '<a class="${mckLauncherExpr}" href="#" target="_self" data-mck-conversationid="${convIdExpr}" data-mck-id="${tabIdExpr}" data-isgroup="${isGroupExpr}" data-mck-topicid="${topicIdExpr}" data-isconvtab="true">' + '<div class="mck-row mck-truncate" title="${convTitleExpr}">${convTitleExpr}</div>' + '</a></li>';
            var searchContactbox = '<li id="li-${contHtmlExpr}" class="${contIdExpr}"><a class="applozic-launcher" href="#" target="_self" applozic-launcher data-mck-id="${contIdExpr}" data-isgroup="${contTabExpr}"><div class="mck-row" title="${contNameExpr}">' + '<div class="blk-lg-3">{{html contImgExpr}}</div>' + '<div class="blk-lg-9"><div class="mck-row"><div class="blk-lg-12 mck-cont-name mck-truncate"><strong>${contNameExpr}</strong>' + '<div class="move-right mck-group-count-box mck-group-count-text ${displayGroupUserCountExpr}">${groupUserCountExpr}</div></div>' + '<div class="blk-lg-12 mck-text-muted">${contLastSeenExpr}</div></div></div></div></a></li>';
            $applozic.template("convTemplate", convbox);
            $applozic.template("messageTemplate", markup);
            $applozic.template('contactTemplate', contactbox);
            $applozic.template("searchContactbox", searchContactbox);
            _this.openConversation = function() {
                if ($mck_sidebox.css('display') === 'none') {
                    $applozic('.mckModal').mckModal('hide');
                    $mck_sidebox.mckModal();
                }
                $mck_msg_to.focus();
            };
            _this.initEmojis = function() {
                try {
                    $applozic("#mck-text-box").emojiarea({
                        button: "#mck-btn-smiley",
                        wysiwyg: true,
                        menuPosition: 'top'
                    });
                } catch (ex) {
                    if (!emojiTimeoutId) {
                        emojiTimeoutId = setTimeout(function() {
                            _this.initEmojis();
                        }, 30000);
                    }
                }
            };
            _this.loadTab = function(params, callback) {
                var currTabId = $mck_msg_inner.data('mck-id');
                if (currTabId) {
                    if ($mck_text_box.html().length > 1 || $mck_file_box.hasClass('vis')) {
                        var text = $mck_text_box.html();
                        var tab_draft = {
                            'text': text,
                            'files': []
                        };
                        if ($mck_file_box.hasClass('vis')) {
                            $applozic('.mck-file-box').each(function() {
                                var $fileBox = $applozic(this);
                                var file = {
                                    filelb: $fileBox.find('.mck-file-lb').html(),
                                    filesize: $fileBox.find('.mck-file-sz').html()
                                };
                                var fileMeta = $fileBox.data('mckfile');
                                if (typeof fileMeta === 'object') {
                                    file.fileMeta = fileMeta;
                                }
                                tab_draft.files.push(file);
                            });
                        }
                        TAB_MESSAGE_DRAFT[currTabId] = tab_draft;
                    } else {
                        delete TAB_MESSAGE_DRAFT[currTabId];
                    }
                }
                CONTACT_SYNCING = true;
                _this.clearMessageField(false);
                _this.addDraftMessage(params.tabId);
                $mck_msg_error.html('');
                $mck_msg_error.removeClass('vis').addClass('n-vis');
                $mck_response_text.html('');
                $mck_msg_response.removeClass('vis').addClass('n-vis');
                $mck_msg_form[0].reset();
                $mck_msg_form.removeClass('n-vis').addClass('vis');
                $mck_msg_inner.html('');
                $mck_msg_error.removeClass('mck-no-mb');
                $mck_contacts_content.removeClass('n-vis').addClass('vis');
                $modal_footer_content.removeClass('vis').addClass('n-vis');
                $mck_sidebox_search.removeClass('vis').addClass('n-vis');
                $mck_group_info_tab.removeClass('vis').addClass('n-vis');
                $mck_group_create_tab.removeClass('vis').addClass('n-vis');
                $mck_sidebox_content.removeClass('n-vis').addClass('vis');
                $mck_product_box.removeClass('vis').addClass('n-vis');
                $mck_conversation_header.addClass('n-vis');
                $mck_loading.removeClass('vis').addClass('n-vis');
                $mck_msg_inner.removeClass('mck-group-inner');
                $mck_tab_status.removeClass('vis').addClass('n-vis');
                $mck_tab_title.removeClass("mck-tab-title-w-status");
                $mck_tab_title.removeClass("mck-tab-title-w-typing");
                $mck_typing_box.removeClass('vis').addClass('n-vis');
                $mck_typing_label.html(MCK_LABELS['typing']);
                $mck_msg_inner.data('isgroup', params.isGroup);
                $mck_msg_inner.data('datetime', '');
                if (params.tabId) {
                    $mck_msg_to.val(params.tabId);
                    $mck_msg_inner.data('mck-id', params.tabId);
                    $mck_msg_inner.data('mck-conversationid', params.conversationId);
                    $mck_msg_inner.data('mck-topicid', params.topicId);
                    $mck_tab_option_panel.data('tabId', params.tabId);
                    $mck_tab_option_panel.removeClass('n-vis').addClass('vis');
                    $mck_contacts_content.removeClass('vis').addClass('n-vis');
                    $modal_footer_content.removeClass('n-vis').addClass('vis');
                    $mck_btn_clear_messages.removeClass('n-vis').addClass('vis');
                    $mck_group_menu_options.removeClass('vis').addClass('n-vis');
                    if (params.isGroup) {
                        $mck_msg_inner.addClass('mck-group-inner');
                        $li_mck_block_user.removeClass('vis').addClass('n-vis');
                        $li_mck_video_call.removeClass('vis').addClass('n-vis');
                        $mck_videocall_btn.removeClass('vis').addClass('n-vis');
                    } else {
                        $li_mck_block_user.removeClass('n-vis').addClass('vis');
                        $li_mck_video_call.removeClass('n-vis').addClass('vis')
                        if(IS_CALL_ENABLED) {
                        $mck_videocall_btn.removeClass('n-vis').addClass('vis');
                         }
                    }
                    if (!params.topicId && params.conversationId) {
                        var conversationPxy = MCK_CONVERSATION_MAP[params.conversationId];
                        if (typeof conversationPxy === 'object') {
                            params.topicId = conversationPxy.topicId;
                        }
                    }
                    if (params.topicId) {
                        var topicDetail = MCK_TOPIC_DETAIL_MAP[params.topicId];
                        if (typeof topicDetail === 'object') {
                            if (IS_MCK_TOPIC_HEADER) {
                                $mck_msg_inner.data('mck-title', topicDetail.title);
                                $mck_conversation_header.html(topicDetail.title);
                                $mck_conversation_header.removeClass('n-vis');
                            } else if (IS_MCK_TOPIC_BOX) {
                                _this.setProductProperties(topicDetail, params.topicId);
                                $product_box_caret.addClass('n-vis');
                                $mck_product_box.addClass('mck-product-box-wc');
                                $mck_conversation_list.addClass('n-vis');
                                $mck_product_box.removeClass('n-vis').addClass('vis');
                            }
                        }
                    }
                    if (IS_MCK_LOCSHARE && w.google && typeof(w.google.maps) === 'object') {
                        $mck_attachfile_box.removeClass('vis').addClass('n-vis');
                        $mck_atttachmenu_box.removeClass('n-vis').addClass('vis');
                    } else {
                        $mck_atttachmenu_box.removeClass('vis').addClass('n-vis');
                        $mck_attachfile_box.removeClass('n-vis').addClass('vis');
                    }

                    //Todo: temporarily removing.
                    /*if(IS_CALL_ENABLED) {
                        $applozic("#li-mck-video-call").removeClass("n-vis").addClass("vis");
                    }*/
                    var name = _this.getTabDisplayName(params.tabId, params.isGroup, params.userName);
                    if (_this.isGroupDeleted(params.tabId, params.isGroup)) {
                        $mck_msg_error.html(MCK_LABELS['group.deleted']);
                        $mck_msg_error.removeClass('n-vis').addClass('vis').addClass('mck-no-mb');
                        $mck_msg_form.removeClass('vis').addClass('n-vis');
                    }
                    $mck_tab_title.html(name);
                    $mck_tab_title.attr('title', name);
                    $mck_tab_conversation.removeClass('vis').addClass('n-vis');
                    $mck_search_tabview_box.removeClass('vis').addClass('n-vis');
                    $mck_tab_individual.removeClass('n-vis').addClass('vis');
                    if (MCK_MODE === 'support') {
                        $applozic('.mck-tab-link').removeClass('vis').addClass('n-vis');
                    }
                    if (MCK_PRICE_WIDGET_ENABLED) {
                        $mck_price_widget.removeClass('n-vis').addClass('vis');
                        $mck_msg_inner.addClass('mck-msg-w-panel');
                    }
                    if (IS_MCK_USER_DEACTIVATED) {
                        $mck_msg_error.html('Deactivated');
                        $mck_msg_error.removeClass('n-vis').addClass('vis').addClass('mck-no-mb');
                        $mck_msg_form.removeClass('vis').addClass('n-vis');
                    }
                    var subscribeId = params.isGroup ? params.tabId : MCK_USER_ID;
                    window.Applozic.ALSocket.subscibeToTypingChannel(subscribeId);
                    if (typeof MCK_ON_TAB_CLICKED === 'function') {
                        MCK_ON_TAB_CLICKED({
                            tabId: params.tabId,
                            isGroup: params.isGroup
                        });
                    }
                } else {
                    params.tabId = '';
                    if (IS_OFFLINE_MESSAGE_ENABLED) {
                        mckMessageLayout.hideOfflineMessage();
                    }
                    $mck_tab_individual.removeClass('vis').addClass('n-vis');
                    $mck_tab_conversation.removeClass('n-vis').addClass('vis');
                    $mck_search_tabview_box.removeClass('n-vis').addClass('vis');
                    $mck_product_box.removeClass('vis').addClass('n-vis');
                    $mck_msg_inner.data('mck-id', '');
                    $mck_msg_inner.data('mck-conversationid', '');
                    $mck_msg_inner.data('mck-topicid', '');
                    $mck_price_widget.removeClass('vis').addClass('n-vis');
                    $mck_msg_inner.removeClass('mck-msg-w-panel');
                    $mck_tab_option_panel.removeClass('vis').addClass('n-vis');
                    $mck_btn_clear_messages.removeClass('vis').addClass('n-vis');
                    $mck_msg_to.val('');

                    var mckMessageArray = ALStorage.getLatestMessageArray();
                    window.Applozic.ALSocket.unsubscibeToTypingChannel();
                    if (mckMessageArray !== null && mckMessageArray.length > 0) {
                        params.isReload = true;
                        mckMessageLayout.addContactsFromMessageList({
                            message: mckMessageArray
                        }, params);

                        _this.openConversation();
                        CONTACT_SYNCING = false;
                        return;
                    }
                }

               mckMessageService.loadMessageList(params,_this.openConversation);
            };
            _this.setProductProperties = function(topicDetail, topicId) {
                $mck_product_title.html(topicDetail.title);
                $mck_product_icon.html(_this.getTopicLink(topicDetail.link));
                var subtitle = (topicDetail.subtitle) ? topicDetail.subtitle : '';
                $mck_product_subtitle.html(subtitle);
                var key1 = (topicDetail.key1) ? topicDetail.key1 : '';
                var value1 = (topicDetail.value1) ? ":" + topicDetail.value1 : '';
                $mck_product_up_key.html(key1);
                $mck_product_up_value.html(value1);
                var key2 = (topicDetail.key2) ? topicDetail.key2 : '';
                var value2 = (topicDetail.value2) ? ":" + topicDetail.value2 : '';
                $mck_product_down_key.html(key2);
                $mck_product_down_value.html(value2);

                if (typeof MCK_ON_TOPIC_DETAILS === 'function') {
                    topicDetail.topicId = topicId;
                    MCK_ON_TOPIC_DETAILS(topicDetail);
                }
            };
            _this.getTopicLink = function(topicLink) {
                return (topicLink) ? '<img src="' + topicLink + '">' : '<span class="mck-icon-no-image"></span>';
            };
            _this.processMessageList = function(data, scroll, isValidated) {
                var showMoreDateTime;
                var $scrollToDiv = $mck_msg_inner.children("div[name='message']:first");
                var tabId = $mck_msg_inner.data('mck-id');
                var isGroup = $mck_msg_inner.data('isgroup');
                var contact = (isGroup) ? mckGroupUtils.getGroup(tabId) : mckMessageLayout.fetchContact(tabId);
                if (typeof data.message.length === 'undefined') {
                    var messageArray = [];
                    messageArray.push(data.message);
                    ALStorage.updateMckMessageArray(messageArray);
                    _this.addMessage(data.message, contact, false, false, isValidated);
                    showMoreDateTime = data.createdAtTime;
                } else {
                    ALStorage.updateMckMessageArray(data.message);
                    $applozic.each(data.message, function(i, message) {
                        if (!(typeof message.to === 'undefined')) {
                            _this.addMessage(message, contact, false, false, isValidated);
                            showMoreDateTime = message.createdAtTime;
                        }
                    });
                }
                $mck_tab_option_panel.data('datetime', showMoreDateTime);
                if (!scroll && $scrollToDiv.length > 0) {
                    $mck_msg_inner.scrollTop($scrollToDiv.offset().top - $mck_msg_inner.offset().top + $mck_msg_inner.scrollTop());
                } else if (scroll) {
                    $mck_msg_inner.animate({
                        scrollTop: $mck_msg_inner.prop("scrollHeight")
                    }, 'fast');
                }
            };
            _this.closeConversation = function(data) {
                if (typeof MCK_DISPLAY_TEXT === 'function') {
                    var displayText = MCK_DISPLAY_TEXT();
                    if (typeof displayText === 'object') {
                        var text = (data === "BUSY_WITH_OTHER") ? displayText.onBusyWithOtherUser : displayText.onConversationClose;
                    }
                }
                if (!text) {
                    text = 'Chat disabled with user';
                }
                $mck_msg_error.html(text);
                $mck_msg_error.removeClass('n-vis').addClass('vis').addClass('mck-no-mb');
                $mck_msg_form.removeClass('vis').addClass('n-vis');
            };
            _this.addTooltip = function(msgKey) {
                $applozic("." + msgKey + " .mck-icon-time").attr('title', 'pending');
                $applozic("." + msgKey + " .mck-btn-trash").attr('title', 'delete');
                $applozic("." + msgKey + " .mck-icon-sent").attr('title', 'sent');
                $applozic("." + msgKey + " .mck-btn-forward").attr('title', 'forward message');
                $applozic("." + msgKey + " .mck-icon-delivered").attr('title', 'delivered');
                $applozic("." + msgKey + " .mck-icon-read").attr('title', 'delivered and read');
                $applozic("." + msgKey + " .msgtype-outbox-cr").attr('title', 'sent via Carrier');
                $applozic("." + msgKey + " .msgtype-outbox-mck").attr('title', 'sent');
                $applozic("." + msgKey + " .msgtype-inbox-cr").attr('title', 'received via Carrier');
                $applozic("." + msgKey + " .msgtype-inbox-mck").attr('title', 'received');
            };
            _this.fetchContact = function(contactId) {
                var contact = _this.getContact(contactId);
                if (typeof contact === 'undefined') {
                    contact = _this.createContact(contactId);
                }
                return contact;
            };
            _this.getContact = function(contactId) {
                if (typeof MCK_CONTACT_MAP[contactId] === 'object') {
                    return MCK_CONTACT_MAP[contactId];
                } else {
                    return;
                }
            };
            _this.getContactDisplayName = function(userId) {

                   if (typeof MCK_CONTACT_NAME_MAP[userId] === 'string') {
                    return MCK_CONTACT_NAME_MAP[userId];
                    } else if (typeof MCK_CONTACT_NAME_MAP[userId] === 'undefined') {
		                    var userDetail = alUserService.MCK_USER_DETAIL_MAP[userId];
		                    if (typeof userDetail !== "undefined") {
		                        return userDetail.displayName;
		                     }
		                }else {
                    return;
                     }
            };

            _this.addMessage = function(msg, contact, append, scroll, appendContextMenu) {
                var metadatarepiledto = '';
                var replymessage = '';
                var replyMsg = '';
                var msgpreview ='';
                var textreply ='vis';
                var msgpreviewVis = 'n-vis';
                var replyTo = '';
                var  msgReplyToVisible = 'n-vis';
                if (typeof msg.metadata === "object" && typeof msg.metadata.AL_REPLY !== "undefined" ) {
                    metadatarepiledto = msg.metadata.AL_REPLY;
                    replyMsg = alMessageService.getReplyMessageByKey(metadatarepiledto);
                    if (typeof replyMsg!== "undefined" ) {
                     if((contact.isGroup && replyMsg)||(!(contact.isGroup)) && (typeof replyMsg.fileMeta === 'undefined')){
                     msgReplyToVisible ='vis';
                      }
                   if(replyMsg.type === 5) {
                      replyTo = MCK_LABELS['you'];
                    } else {
                    replyTo = mckMessageLayout.getTabDisplayName(replyMsg.to, false);
                     }
                   if (typeof replyMsg.fileMeta === "object" || replyMsg.contentType === 2) {
                    msgpreview =   _this.getImageForReplyMessage(replyMsg);
                    textreply ='n-vis';
                    msgpreviewVis = "vis";
                    msgReplyToVisible ='n-vis';
                     }
                }
            }

                if (msg.type === 6 || msg.type === 7) {
                    return;
                }
                if ((msg.metadata && msg.metadata.category === 'HIDDEN') || msg.contentType === 102) {
                    return;
                }
                if (msg.contentType === 13 && (msg.metadata && msg.metadata.hide === 'true' && msg.metadata.show === 'false')) {
                    return;
                }
                if (msg.contentType === 10 && (msg.metadata && msg.metadata.hide === 'true')) {
                    return;
                }
                if ($applozic("#mck-message-cell ." + msg.key).length > 0) {
                    return;
                }
                if ($mck_no_messages.hasClass('vis')) {
                    $mck_no_messages.removeClass('vis').addClass('n-vis');
                }
                var messageClass = '';
                var downloadMediaUrl = '';
                var floatWhere = 'mck-msg-right';
                var statusIcon = 'mck-icon-time';
                var contactExpr = 'vis';
                if (msg.type === 0 || msg.type === 4 || msg.type === 6) {
                    floatWhere = 'mck-msg-left';
                }
                if (msg.contentType === 4 || msg.contentType === 10 || msg.contentType === 103) {
                    floatWhere = 'mck-msg-center';
                }
                statusIcon = _this.getStatusIconName(msg);
                var replyId = msg.key;
                var replyMessageParameters = "'" + msg.deviceKey + "'," + "'" + msg.to + "'" + ",'" + msg.to + "'" + ",'" + replyId + "'";
                var displayName = '';
                var imgsrctag = '';
                var nameTextExpr = '';
                var showNameExpr = 'n-vis';
                var msgAvatorClassExpr = '';

                alUserService.loadUserProfile(msg.to);

                if (msg.groupId && msg.contentType !== 4 && contact.type !== 7 && (msg.type === 0 || msg.type === 4 || msg.type === 6)) {
                    displayName = _this.getTabDisplayName(msg.to, false);
                    showNameExpr = "vis";
                    nameTextExpr = _this.getNameTextClassByAlphabet(displayName);
                }
                if (MESSAGE_BUBBLE_AVATOR_ENABLED) {
                    msgAvatorClassExpr = "mck-msg-avator-bubble";
                    var fromContact = '';
                    var fromDisplayName = displayName;
                    if (floatWhere === "mck-msg-right") {
                        fromContact = mckMessageLayout.fetchContact(MCK_USER_ID);
                        fromDisplayName = _this.getTabDisplayName(fromContact.displayName, false);
                    } else if (floatWhere === "mck-msg-left") {
                        fromContact = (msg.groupId) ? mckMessageLayout.fetchContact(msg.to) : contact;
                    }
                    if (fromContact) {
                        imgsrctag = _this.getContactImageLink(fromContact, fromDisplayName);
                    }
                }
                if (msg.groupId && msg.contentType === 10) {
                    displayName = '';
                    imgsrctag = '';
                    nameTextExpr = '';
                }
                var downloadIconVisible = "n-vis";
                var msgFeatExpr = "n-vis";
                var fileName = '';
                var fileSize = '';
                var frwdMsgExpr = msg.message;
                if (typeof msg.fileMeta === "object") {
                    fileName = msg.fileMeta.name;
                    fileSize = msg.fileMeta.size;
                }
                if (typeof msg.fileMeta === "object") {
                    if (msg.fileMeta.contentType.indexOf("audio") || (msg.fileMeta.contentType.indexOf("image")) || (msg.fileMeta.contentType.indexOf("video"))) {
                        downloadIconVisible = 'vis';
                    }
                }
                var olStatus = 'n-vis';
                if (IS_MCK_OL_STATUS && w.MCK_OL_MAP[msg.to] && msg.contentType !== 10) {
                    olStatus = 'vis';
                }

                var msgList = [{
                    msgReply: replyMsg ? replyMsg.message + "\n" : '',
                    msgReplyTo: replyMsg ? replyTo + "\n" : '',
                    msgReplyDivExpr: replyMsg ? 'vis' : 'n-vis',
                    msgReplyToVisibleExpr: msgReplyToVisible,
                    msgPreview: msgpreview ? _this.getImageForReplyMessage(replyMsg) :"",
                    msgpreviewvisExpr: msgpreviewVis,
                    textreplyVisExpr: textreply,
                    msgKeyExpr: msg.key,
                    msgDeliveredExpr: msg.delivered,
                    msgSentExpr: msg.sent,
                    msgCreatedAtTime: msg.createdAtTime,
                    msgTypeExpr: msg.type,
                    msgDeleteExpr: MCK_LABELS['delete'],
                    msgReplyExpr: MCK_LABELS['reply'],
                    msgForwardExpr: MCK_LABELS['forward'],
                    msgSourceExpr: msg.source,
                    statusIconExpr: statusIcon,
                    contactExpr: contactExpr,
                    toExpr: msg.to,
                    msgAvatorClassExpr: msgAvatorClassExpr,
                    showNameExpr: showNameExpr,
                    msgNameExpr: displayName,
                    msgImgExpr: imgsrctag,
                    nameTextExpr: nameTextExpr,
                    msgFloatExpr: floatWhere,
                    replyIdExpr: replyId,
                    createdAtTimeExpr: mckDateUtils.getDate(msg.createdAtTime),
                    msgFeatExpr: msgFeatExpr,
                    replyMessageParametersExpr: replyMessageParameters,
                    downloadMediaUrlExpr: alFileService.getFileAttachment(msg),
                    msgClassExpr: messageClass,
                    msgExpr: frwdMsgExpr,
                    selfDestructTimeExpr: msg.timeToLive,
                    fileMetaKeyExpr: msg.fileMetaKey,
                    downloadIconVisibleExpr: downloadIconVisible,
                    fileExpr: alFileService.getFilePath(msg),
                    fileUrlExpr: alFileService.getFileurl(msg),
                    fileNameExpr: fileName,
                    fileSizeExpr: fileSize,
                    contOlExpr: olStatus
                }];
                append ? $applozic.tmpl("messageTemplate", msgList).appendTo("#mck-message-cell .mck-message-inner") : $applozic.tmpl("messageTemplate", msgList).prependTo("#mck-message-cell .mck-message-inner");
								var emoji_template = '';
                if (msg.message) {
                    var msg_text = msg.message.replace(/\n/g, '<br/>');
                    if (w.emoji !== null && typeof w.emoji !== 'undefined') {
                        emoji_template = w.emoji.replace_unified(msg_text);
                        emoji_template = w.emoji.replace_colons(emoji_template);
                    } else {
                        emoji_template = msg_text;
                    }
                }
                if (msg.conversationId) {
                    var conversationPxy = MCK_CONVERSATION_MAP[msg.conversationId];
                    if (typeof conversationPxy !== 'object') {
                        alMessageService.getTopicId({
                            'conversationId': msg.conversationId
                        }, function(params){
													mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
												});
                    }
                    if (append) {
                        $mck_msg_inner.data('mck-conversationid', msg.conversationId);
                        if (conversationPxy) {
                            var topicDetail = MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId];
                            if (typeof topicDetail === "object") {
                                if (IS_MCK_TOPIC_BOX) {
                                    _this.setProductProperties(topicDetail, conversationPxy.topicId);
                                } else if (IS_MCK_TOPIC_HEADER) {
                                    $mck_conversation_header.html(topicDetail.title);
                                }
                            }
                        }
                    }
                }
                if (msg.contentType === 4) {
                    var priceText = emoji_template;
                    emoji_template = "Final agreed price: " + emoji_template;
                    if (!MCK_PRICE_WIDGET_ENABLED)
                        emoji_template += '<br/><button class="mck-accept" data-mck-topic-price="' + priceText + '" data-mck-conversationid="' + msg.conversationId + '">Accept</button>';
                }
                var $textMessage = $applozic("." + replyId + " .mck-msg-content");
                if (emoji_template.indexOf('emoji-inner') === -1 && msg.contentType === 0) {
                    var nodes = emoji_template.split("<br/>");
                    for (var i = 0; i < nodes.length; i++) {
                        var x = d.createElement('div');
                        x.appendChild(d.createTextNode(nodes[i]));
                        if (nodes[i] && nodes[i].match(LINK_MATCHER)) {
                            x = $applozic(x).linkify({
                                target: '_blank'
                            });
                        }
                        $textMessage.append(x);
                    }
                } else {
                    $textMessage.html(emoji_template);
                    $textMessage.linkify({
                        target: '_blank'
                    });
                }
                if (msg.fileMeta) {
                    $applozic("." + replyId + " .mck-file-text a:first").trigger('click');
                    $applozic("." + replyId + " .mck-file-text").removeClass('n-vis').addClass('vis');
                    if ($textMessage.html() === '') {
                        $textMessage.removeClass('vis').addClass('n-vis');
                    }
                }
                if (msg.contentType === 2) {
                    $textMessage.removeClass('vis').addClass('n-vis');
                    $applozic("." + replyId + " .mck-file-text").removeClass('n-vis').addClass('vis');
                }
                if (scroll) {
                    $mck_msg_inner.animate({
                        scrollTop: $mck_msg_inner.prop("scrollHeight")
                    }, 'fast');
                }
                if ($mck_tab_message_option.hasClass('n-vis')) {
                    if (msg.groupId) {
                        var group = mckGroupUtils.getGroup(msg.groupId);
                        if (group.type !== 6) {
                            $mck_tab_message_option.removeClass('n-vis').addClass('vis');
                        }
                    } else {
                        $mck_tab_message_option.removeClass('n-vis').addClass('vis');
                    }
                }
                _this.addTooltip(msg.key);
                if (msg.contentType !== 4 && msg.contentType !== 10 && appendContextMenu) {
                    _this.messageContextMenu(msg.key);
                }
                if (msg.groupId && msg.contentType === 10 && append) {
                    mckGroupService.getGroupFeed({
                        'groupId': msg.groupId,
                        'isReloadTab': true,
                        'apzCallback': mckGroupLayout.onGroupFeed
                    });
                }
            };
            _this.addContactForSearchList = function(contact, $listId, append) {
                var groupUserCount = contact.userCount;
                var isGroupTab = contact.isGroup;
                var displayName = _this.getTabDisplayName(contact.contactId, isGroupTab);
                var imgsrctag = _this.getContactImageLink(contact, displayName);
                var ucTabId = (isGroupTab) ? 'group_' + contact.contactId : 'user_' + contact.contactId;
                var contHtmlExpr = (isGroupTab) ? 'gs-group-' + contact.htmlId : 'cs-user-' + contact.htmlId;
                var lastSeenStatus = '';
                var displayCount = isGroupTab && IS_MCK_GROUPUSERCOUNT;
                $applozic("#li-" + contHtmlExpr + " .mck-group-count-text").html(groupUserCount);
                //$applozic("#li-" + contHtmlExpr + " .mck-group-count-box").removeClass('n-vis').addClass('vis');

                if (!isGroupTab && !alUserService.MCK_BLOCKED_TO_MAP[contact.contactId]) {
                    if (w.MCK_OL_MAP[contact.contactId]) {
                        lastSeenStatus = MCK_LABELS['online'];
                    } else if (MCK_LAST_SEEN_AT_MAP[contact.contactId]) {
                        lastSeenStatus = mckDateUtils.getLastSeenAtStatus(MCK_LAST_SEEN_AT_MAP[contact.contactId]);
                    }
                }
                var contactList = [{
                    contHtmlExpr: contHtmlExpr,
                    contIdExpr: contact.contactId,
                    contTabExpr: contact.isGroup,
                    contImgExpr: imgsrctag,
                    contLastSeenExpr: lastSeenStatus,
                    contNameExpr: displayName,
                    groupUserCountExpr: contact.userCount,
                    displayGroupUserCountExpr: displayCount ? "vis" : "n-vis"
                }];
				 if(append === true){
					 $applozic.tmpl('searchContactbox', contactList).appendTo('#' + $listId);
				 }else{
					 $applozic.tmpl('searchContactbox', contactList).prependTo('#' + $listId);
			     }
			};

        _this.getImageForMessagePreview = function(message) {
            if (typeof message.fileMeta === 'object') {
                    if (message.fileMeta.contentType.indexOf("image")!== -1) {
            return '<span>photo</span> <img src="'+ alFileService.getFileurl(message) + '" class="mck-image-reply move-right"/>';

               } else if (message.fileMeta.contentType.indexOf("audio") !== -1) {
                        return '<span>audio</span><span class="mck-file-detail move-right"><span class="mck-file-name"><span class="mck-icon-attachment"></span>&nbsp;' + message.fileMeta.name + '</span>&nbsp;<span class="file-size">' + alFileService.getFilePreviewSize(message.fileMeta.size) + '</span></span>';
                    }
                     else {
                        return '<span class="mck-file-detail move-right"><span class="mck-file-name"><span class="mck-icon-attachment"></span>&nbsp;' + message.fileMeta.name + '</span>&nbsp;<span class="file-size">' + alFileService.getFilePreviewSize(message.fileMeta.size) + '</span></span>';
                    }
                    return '';
                }
                 if (message.contentType === 2) {
                    var geoLoc = $applozic.parseJSON(message.message);
            return '<span>location</span><img src="https://maps.googleapis.com/maps/api/staticmap?zoom=17&size=200x150&center=' + geoLoc.lat + "," + geoLoc.lon + '&maptype=roadmap&markers=color:red|' + geoLoc.lat + "," + geoLoc.lon +'&key='+MCK_MAP_STATIC_API_KEY+ '" class="mck-image-reply move-right"/>';

                    }
            };

         _this.getImageForReplyMessage = function(message) {
        	     var displayName = '';
			 if (message.type === 5) {
				displayName = MCK_LABELS['you'];
			 } else {
				 displayName = mckMessageLayout.getTabDisplayName(message.to, false);
			 }
             if (typeof message.fileMeta === 'object') {
                    if (message.fileMeta.contentType.indexOf("image")!== -1) {
            return '<div><div class="mck-imagereply mck-margin"><div class="mck-msgto">'+displayName+ '</div><div><span class="mck-icon-camera mck-camera"></span><span>Photo</span></div></div><div class="mck-imagereply"><img src="'+ MCK_FILE_URL + FILE_PREVIEW_URL + message.fileMeta.blobKey + '" class="mck-image-reply mck-msg-text mck-msg-content"/></div></div>';

               } else if (message.fileMeta.contentType.indexOf("audio") !== -1) {
                        return '<div class="mck-msgto">'+displayName+ '</div><span class="mck-file-detail mck-msg-text mck-msg-content"><span class="mck-file-name"><span class="mck-icon-attachment"></span>&nbsp;' + message.fileMeta.name + '</span>&nbsp;<span class="file-size">' + alFileService.getFilePreviewSize(message.fileMeta.size) + '</span></span>';
                    }
                     else {
                        return '<div class="mck-msgto">'+displayName+ '</div><span class="mck-file-detail"><span class="mck-file-name"><span class="mck-icon-attachment"></span>&nbsp;' + message.fileMeta.name + '</span>&nbsp;<span class="file-size">' + alFileService.getFilePreviewSize(message.fileMeta.size) + '</span></span>';
                    }
                    return '';
                }
                 if (message.contentType === 2) {
                    var geoLoc = $applozic.parseJSON(message.message);
            return '<div><div class="mck-imagereply mck-margin"><div class="mck-msgto">'+displayName+ '</div><span class="mck-icon-marker mck-location-icon"></span><span>Location</span></div><div class="mck-imagereply"><img src="https://maps.googleapis.com/maps/api/staticmap?zoom=17&size=200x150&center=' + geoLoc.lat + "," + geoLoc.lon + '&maptype=roadmap&markers=color:red|' + geoLoc.lat + "," + geoLoc.lon + '&key='+MCK_MAP_STATIC_API_KEY+'" class="mck-image-reply mck-msg-text "/></div></div>';

                    }
            };

            _this.getContactImageLink = function(contact, displayName) {
                var imgsrctag = '';
								var contact;
                if (contact.isGroup && contact.type !== 7) {
                    imgsrctag = mckGroupService.getGroupImage(contact.imageUrl);
                } else {
                    if (contact.isGroup && contact.type === 7 && contact.members.length > 1) {
                       	mckGroupService.getContactFromGroupOfTwo(contact, function(user){
												contact = mckMessageLayout.fetchContact(user);
											});
                    }
                    if (typeof(MCK_GETUSERIMAGE) === "function") {
                        var imgsrc = MCK_GETUSERIMAGE(contact.contactId);
                        if (imgsrc && typeof imgsrc !== 'undefined') {
                            imgsrctag = '<img src="' + imgsrc + '"/>';
                        }
                    }
                    if (!imgsrctag) {
                        if (contact.photoSrc) {
                            imgsrctag = '<img src="' + contact.photoSrc + '"/>';
                        } else if (contact.photoData) {
                            imgsrctag = '<img src="data:image/jpeg;base64,' + contact.photoData + '"/>';
                        } else if (contact.photoLink) {
                            imgsrctag = '<img src="' + MCK_BASE_URL + '/contact.image?photoLink=' + contact.photoLink + '"/>';
                        } else {
                            if (!displayName) {
                                displayName = contact.displayName;
                            }
                            imgsrctag = _this.getContactImageByAlphabet(displayName);
                        }
                    }
                }
                return imgsrctag;
            };
            _this.getContactImageByAlphabet = function(name) {
                if (typeof name === 'undefined' || name === '') {
                    return '<div class="mck-alpha-contact-image mck-alpha-user"><span class="mck-icon-user"></span></div>';
                }
                var first_alpha = name.charAt(0);
                var letters = /^[a-zA-Z]+$/;
                if (first_alpha.match(letters)) {
                    first_alpha = first_alpha.toUpperCase();
                    return '<div class="mck-videocall-image alpha_' + first_alpha + '"><span class="mck-contact-icon">' + first_alpha + '</span></div>';
                } else {
                    return '<div class="mck-videocall-image alpha_user"><span class="mck-icon-user"></span></div>';
                }
            };
            _this.getNameTextClassByAlphabet = function(name) {
                if (typeof name === 'undefined' || name === '') {
                    return 'mck-text-user';
                }
                name = name.toString();
                var first_alpha = name.charAt(0);
                var letters = /^[a-zA-Z]+$/;
                if (first_alpha.match(letters)) {
                    first_alpha = first_alpha.toLowerCase();
                    return 'mck-text-' + first_alpha;
                } else {
                    return 'mck-text-user';
                }
            };
            _this.addContactsFromMessageList = function(data, params) {
                var showMoreDateTime;
                $mck_no_messages.removeClass('vis').addClass('n-vis');
                if (data + '' === 'null') {
                    showMoreDateTime = '';
                    return;
                } else {
                    $mck_no_conversations.removeClass('vis').addClass('n-vis');
                    //if (params.isReload) {
                    if ($mck_msg_inner.has($applozic('#mck-contact-list')).length == 0) {
                        $mck_msg_inner.html('<ul id="mck-contact-list" class="mck-contact-list mck-nav mck-nav-tabs mck-nav-stacked"></ul>');
                    }
                    if (typeof data.message.length === 'undefined') {
                        if (data.message.groupId) {
														mckGroupService.addGroupFromMessage(data.message, false, function(group, message, update){
															_this.updateRecentConversationList(group, message, update);
														});
                        } else {
                            _this.addContactsFromMessage(data.message);
                        }
                        showMoreDateTime = data.message.createdAtTime;
                    } else {
                        $applozic.each(data.message, function(i, message) {
                            if (!(typeof message.to === 'undefined')) {
                                (message.groupId) ? mckGroupService.addGroupFromMessage(message, true, function(group, message, update){
																	_this.updateRecentConversationList(group, message, update);
																}): _this.addContactsFromMessage(message, true);
                                showMoreDateTime = message.createdAtTime;
                            }
                        });
                    }
                    $mck_msg_inner.data('datetime', showMoreDateTime);
                    if (params.isReload) {
                        var $scrollToDiv = '';
                        if (params.lastActiveTabId) {
                            var scrollTabId = (params.isLastActiveTabGroup) ? 'group-' + params.lastActiveTabId : 'user-' + mckContactUtils.formatContactId(params.lastActiveTabId);
                            $scrollToDiv = $applozic("#li-" + scrollTabId);
                        }
                        if ($scrollToDiv.length > 0) {
                            $mck_msg_inner.animate({
                                scrollTop: $scrollToDiv.offset().top - $mck_msg_inner.offset().top + $mck_msg_inner.scrollTop()
                            }, 'fast');
                        } else {
                            $mck_msg_inner.animate({
                                scrollTop: 0
                            }, 0);
                        }
                    }
                }
            };
            _this.addGroupFromMessageList = function(data, isReloaded) {
                if (data + '' === 'null') {
                    return;
                } else {
                    if (isReloaded) {
                        $mck_msg_inner.html('<ul id="mck-group-list" class="mck-contact-list mck-nav mck-nav-tabs mck-nav-stacked"></ul>');
                    }
                    if (typeof data.message.length === 'undefined') {
												mckGroupService.addGroupFromMessage(data.message, false, function(group, message, update){
													_this.updateRecentConversationList(group, message, update);
												});
                    } else {
                        $applozic.each(data.message, function(i, message) {
                            if (!(typeof message.to === 'undefined')) {
																mckGroupService.addGroupFromMessage(message, true, function(group, message, update){
																	_this.updateRecentConversationList(group, message, update);
																});
                            }
                        });
                    }
                }
            };
            _this.createContact = function(contactId) {
                var displayName = _this.getContactDisplayName(contactId);
                if (typeof displayName === 'undefined') {
                    displayName = contactId;
                }
                var contact = {
                    'contactId': contactId,
                    'htmlId': mckContactUtils.formatContactId(contactId),
                    'displayName': displayName,
                    'name': displayName + " <" + contactId + ">" + " [" + "Main" + "]",
                    'value': contactId,
                    'photoLink': '',
                    'photoSrc': '',
                    'photoData': '',
                    'email': '',
                    'unsaved': true,
                    'isGroup': false
                };
                MCK_CONTACT_MAP[contactId] = contact;
                return contact;
            };
            _this.createContactWithDetail = function(data) {
                var displayName = data.displayName;
                var contactId = data.userId;
                if (!displayName) {
                    displayName = _this.getContactDisplayName(contactId);
                }
                if (typeof displayName === 'undefined') {
                    displayName = contactId;
                } else {
                    MCK_CONTACT_NAME_MAP[contactId] = displayName;
                }
                var photoLink = (data.photoLink) ? data.photoLink : '';
                if (!photoLink) {
                    photoLink = (data.imageLink) ? data.imageLink : '';
                }
                var photoData = (data.imageData) ? data.imageData : '';
                var contact = {
                    'contactId': contactId,
                    'htmlId': mckContactUtils.formatContactId(contactId),
                    'displayName': displayName,
                    'name': displayName + " <" + contactId + ">" + " [" + "Main" + "]",
                    'value': contactId,
                    'photoLink': '',
                    'photoSrc': photoLink,
                    'photoData': photoData,
                    'email': '',
                    'unsaved': true,
                    'isGroup': false
                };
                MCK_CONTACT_MAP[contactId] = contact;
                return contact;
            };
            _this.updateContactDetail = function(contact, data) {
                var displayName = data.displayName;
                var contactId = data.userId;
                if (!contact.displayName || contact.displayName === contact.contactId) {
                    if (!displayName) {
                        displayName = _this.getContactDisplayName(contactId);
                    }
                    if (typeof displayName === 'undefined') {
                        displayName = contactId;
                    } else {
                        MCK_CONTACT_NAME_MAP[contactId] = displayName;
                    }
                    contact.displayName = displayName;
                }
                var photoLink = data.photoLink;
                if (!photoLink) {
                    photoLink = (data.imageLink) ? data.imageLink : '';
                }
                if (photoLink && !contact.photoSrc) {
                    contact.photoSrc = photoLink;
                }
                var photoData = (data.imageData) ? data.imageData : '';
                if (photoData && !contact.photoData) {
                    contact.photoData = photoData;
                }
                MCK_CONTACT_MAP[contactId] = contact;
                return contact;
            };

            _this.addContactsFromMessage = function(message, update) {
                var contactIdsArray = _this.getUserIdFromMessage(message);
                if (contactIdsArray.length > 0 && contactIdsArray[0]) {
                    for (var i = 0; i < contactIdsArray.length; i++) {
                        var contact = _this.fetchContact('' + contactIdsArray[i]);
                        _this.updateRecentConversationList(contact, message, update);
                    }
                }
            };

            _this.updateRecentConversationList = function(contact, message, update) {
                var $listId = 'mck-contact-list';
                var contactHtmlExpr = (contact.isGroup) ? 'group-' + contact.htmlId : 'user-' + contact.htmlId;
                if ($applozic('#' + $listId + ' #li-' + contactHtmlExpr).length > 0) {
                    var $mck_msg_part = $applozic("#" + $listId + " #li-" + contact.htmlId + " .mck-cont-msg-wrapper");
                    if (($mck_msg_part.is(":empty") || update) && message !== undefined) {
                        _this.updateContact(contact, message, $listId);
                    }
                } else {
                    _this.addContact(contact, $listId, message);
                }
            };
            _this.addContactsToSearchList = function(append,contactList) {
                var contactsArray = [],
                    userIdArray = [];
                $applozic.each(MCK_CONTACT_ARRAY, function(i, contact) {
                    userIdArray.push(contact.contactId);

                });
                if(typeof contactList !=="undefined"){
                    var params = {};
                  params.async=false;
                  params.userIds =contactList;
                  mckContactService.getUsersDetail(params.userIds,params);
                  userIdArray = contactList;
                  }
                var uniqueUserIdArray = userIdArray.filter(function(item, pos) {
                    return userIdArray.indexOf(item) === pos;
                });
                uniqueUserIdArray.sort();
                $mck_search_loading.removeClass('vis').addClass('n-vis');

                if (uniqueUserIdArray.length > 0) {
                    $applozic.each(uniqueUserIdArray, function(i, userId) {
                        if (userId) {
                            var contact = _this.fetchContact('' + userId);
                            contactsArray.push(contact);
                            if ($applozic('#li-cs-user-' + contact.htmlId).length === 0) {
                                _this.addContactForSearchList(contact, 'mck-contact-search-list',append);
                            }
                        }
                    });
                } else {
                    $mck_no_search_contacts.removeClass('n-vis').addClass('vis');
                }
                _this.initAutoSuggest({
                    'contactsArray': contactsArray,
                    '$searchId': $mck_contact_search_input,
                    'isContactSearch': true
                });
            };
            _this.initAutoSuggest = function (params) {
                var contactsArray = params.contactsArray;
                var $searchId = params.$searchId;
                var typeaheadArray = [];
                var typeaheadEntry;
                var typeaheadMap = {};
                var contactSuggestionsArray = [];
                for (var j = 0; j < contactsArray.length; j++) {
                    var contact = contactsArray[j];
                    contact.displayName = _this.getTabDisplayName(contact.contactId, contact.isGroup);
                    typeaheadEntry = (contact.displayName) ? $applozic.trim(contact.displayName) : $applozic.trim(contact.contactId);
                    if ((MCK_SELF_CHAT_DISABLE === true && contact.contactId !== MCK_USER_ID) || MCK_SELF_CHAT_DISABLE !== true) {
                        typeaheadMap[typeaheadEntry] = contact;
                        typeaheadArray.push(typeaheadEntry);
                        contactSuggestionsArray.push(typeaheadEntry);
                    }
                }
                var matcher1 = function(item) {
                    var contact = typeaheadMap[item];
                    var contactNameArray = contact.displayName.split(' ');
                    var contactNameLength = contactNameArray.length;
                    var contactFName = contactNameArray[0];
                    var contactMName = '';
                    var contactLName = '';
                    if (contactNameLength === 2) {
                        contactLName = contactNameArray[1];
                    } else if (contactNameLength >= 3) {
                        contactLName = contactNameArray[contactNameLength - 1];
                        contactMName = contactNameArray[contactNameLength - 2];
                    }
                    var matcher = new RegExp(this.query, "i");
                    return matcher.test(contact.displayName) || matcher.test(contact.contactId) || matcher.test(contactMName) || matcher.test(contactLName) || matcher.test(contact.email) || matcher.test(contactFName + " " + contactLName);
                };
                var highlighter = function(item) {
                    var contact = typeaheadMap[item];
                    return contact.displayName;
                };
                var updater = function(item) {
                    var contact = typeaheadMap[item];
                    if (params.isContactSearch) {
                        mckMessageLayout.loadTab({
                            tabId: contact.contactId,
                            isGroup: contact.isGroup
                        });
                        $modal_footer_content.removeClass('n-vis').addClass('vis');
                    } else {
                        mckGroupLayout.addGroupMemberFromSearch(contact.contactId);
                    }
                };
                if ($searchId.hasClass('mck-typeahead')) {
                    $searchId.mcktypeahead().data('mcktypeahead').source = typeaheadArray;
                    $searchId.mcktypeahead().data('mcktypeahead').matcher = matcher1;
                    $searchId.mcktypeahead().data('mcktypeahead').highlighter = highlighter;
                    $searchId.mcktypeahead().data('mcktypeahead').updater = updater;
                    return;
                } else {
                    $searchId.addClass('mck-typeahead');
                }
                $searchId.mcktypeahead({
                    source: typeaheadArray,
                    matcher: matcher1,
                    highlighter: highlighter,
                    updater: updater
                });
            };
            _this.initSearchAutoType = function () {
                var loadTab = function (userId) {
                    mckMessageLayout.loadTab({
                        'tabId': userId,
                        'isGroup': false,
                        'isSearch': true
                    });
                    $modal_footer_content.removeClass('n-vis').addClass('vis');
                }
                if (IS_AUTO_TYPE_SEARCH_ENABLED) {
                    $mck_contact_search_input.keypress(function (e) {
                        if (e.which === 13) {
                            var val = $mck_contact_search_input.val();
                            var regex = new RegExp('[!$%\^&*()]');
                            if (regex.test(val))
                                return false;
                            var userId = $mck_contact_search_input.val();
                            if (userId) {
                                if ((MCK_SELF_CHAT_DISABLE === true && userId !== MCK_USER_ID) || MCK_SELF_CHAT_DISABLE !== true) {
                                    userId = (typeof userId !== 'undefined' && userId !== '') ? userId.toString() : '';
                                    if (userId) {
                                        if (!IS_USER_CREATED_IN_SEARCH_ENABLED) {
                                            window.Applozic.ALApiService.getUserDetail({
                                                'data': [userId],
                                                'success': function (data) {
                                                    if (data.response.length > 0) {
                                                        loadTab(userId);
                                                    } else {
                                                        alert('User: '+ userId +' does not exist');
                                                    }
                                                },
                                                'error': function () {}
                                            });
                                        } else {
                                            loadTab(userId);
                                        }
                                    }
                                }
                            }
                            $mck_contact_search_input.val('');
                        }
                    });
                    $mck_group_search_input.keypress(function (e) {
                        if (e.which === 13) {
                            return true;
                        }
                    });
                    $applozic(d).on('click', '.mck-group-search-link', function(e) {
                        e.preventDefault();
                        return true;
                    });
                    $applozic(d).on('click', '.mck-contact-search-link', function (e) {
                        e.preventDefault();
                        var val = $mck_contact_search_input.val();
                        var tabId = $mck_contact_search_input.val();
                        var regex = new RegExp('[!$%\^&*()]');
                        if (regex.test(val))
                            return false;
                        if (tabId !== '' ) {
                            if ((MCK_SELF_CHAT_DISABLE === true && tabId !== MCK_USER_ID) || MCK_SELF_CHAT_DISABLE !== true) {
                                if(!IS_USER_CREATED_IN_SEARCH_ENABLED) {
                                    window.Applozic.ALApiService.getUserDetail({
                                        'data': [val],
                                        'success': function (data) {
                                            if(data.response.length>0) {
                                                loadTab(tabId);
                                            } else {
                                                alert('User: '+ tabId +' does not exist');
                                            }
                                        },
                                        'error': function () {}
                                    });
                                } else {
                                    loadTab(tabId);
                                }
                            }
                        }
                        $mck_contact_search_input.val('');
                    });
                }
            };
            _this.removeContact = function(contact) {
                var contactHtmlExpr = (contact.isGroup) ? 'group-' + contact.htmlId : 'user-' + contact.htmlId;
                $applozic("#li-" + contactHtmlExpr).remove();
            };
            _this.updateContact = function(contact, message, $listId) {
                var contHtmlExpr = (contact.isGroup) ? 'group-' + contact.htmlId : 'user-' + contact.htmlId;
                var $contactElem = $applozic("#li-" + contHtmlExpr);
                var clientGroupIdHtml = mckContactUtils.formatContactId('' + contact.clientGroupId);
                var currentMessageTime = $contactElem.data('msg-time');
                if (message && message.createdAtTime > currentMessageTime) {
                    var ucTabId = (message.groupId) ? 'group_' + contact.contactId : 'user_' + contact.contactId;
                    var unreadCount = _this.getUnreadCount(ucTabId);
                    var emoji_template = _this.getMessageTextForContactPreview(message, contact, 15);
                    $applozic("#li-" + contHtmlExpr + " .mck-cont-msg-date").html(typeof message.createdAtTime === 'undefined' ? '' : mckDateUtils.getTimeOrDate(message ? message.createdAtTime : '', true));
                    var $messageText = $applozic("#li-" + contHtmlExpr + " .mck-cont-msg-wrapper");
                    $messageText.html('');
                    (typeof emoji_template === 'object') ? $messageText.append(emoji_template): $messageText.html(emoji_template);
                    if (message.conversationId) {
                        var conversationId = message.conversationId;
                        var conversationPxy = MCK_CONVERSATION_MAP[conversationId];
                        if (typeof conversationPxy === 'object') {
                            var topicId = conversationPxy.topicId;
                            if (topicId && IS_MCK_TOPIC_HEADER) {
                                var topicDetail = MCK_TOPIC_DETAIL_MAP[topicId];
                                if (typeof topicDetail === 'object') {
                                    $applozic("#li-" + contHtmlExpr + " .mck-conversation-topic").html(topicDetail.title);
                                }
                            }
                        }
                        $applozic("#li-" + contHtmlExpr + " a").data('mck-conversationid', conversationId);
                    }
                    if (unreadCount > 0) {
                        $applozic(".li-" + contHtmlExpr + " .mck-unread-count-text").html(unreadCount);
                        $applozic(".li-clientgroupid-" + clientGroupIdHtml + " .mck-unread-count-text").html(unreadCount);
                        $applozic(".li-" + contHtmlExpr + " .mck-unread-count-box").removeClass('n-vis').addClass('vis');
                        $applozic(".li-clientgroupid-" + clientGroupIdHtml + " .mck-unread-count-box").removeClass('n-vis').addClass('vis');
                    }
                    var latestCreatedAtTime = $applozic('#' + $listId + ' li:nth-child(1)').data('msg-time');
                    $contactElem.data('msg-time', message.createdAtTime);
                    if ((typeof latestCreatedAtTime === "undefined" || (message ? message.createdAtTime : '') >= latestCreatedAtTime) && $applozic("#mck-contact-list li").index($contactElem) !== 0) {
                        $applozic('#' + $listId + ' li:nth-child(1)').before($contactElem);
                    }
                }
            };
            _this.clearContactMessageData = function(tabId, isGroup) {
                var htmlId = mckContactUtils.formatContactId(tabId);
                var contactIdExpr = (isGroup) ? 'group-' + htmlId : 'user-' + htmlId;
                $applozic("#li-" + contactIdExpr + " .mck-cont-msg-date").html('');
                $applozic("#li-" + contactIdExpr + " .mck-cont-msg-wrapper").html('');
            };
            _this.addContact = function(contact, $listId, message) {
                var emoji_template = _this.getMessageTextForContactPreview(message, contact, 100);
                var groupUserCount = contact.userCount;
                var conversationId = '';
                var clientGroupIdExpr;
                var isGroupTab = false;
                if (typeof message !== 'undefined') {
                    if (message.conversationId) {
                        conversationId = message.conversationId;
                        var conversationPxy = MCK_CONVERSATION_MAP[conversationId];
                    }
                    if (message.groupId) {
                        isGroupTab = true;
                    }
                }
                var displayName = _this.getTabDisplayName(contact.contactId, isGroupTab);
                var imgsrctag = _this.getContactImageLink(contact, displayName);
                var prepend = false;
                var clientGroupId = mckContactUtils.formatContactId('' + contact.clientGroupId);
                var ucTabId = (isGroupTab) ? 'group_' + contact.contactId : 'user_' + contact.contactId;
                var unreadCount = _this.getUnreadCount(ucTabId);
                var unreadCountStatus = (unreadCount > 0 && $listId !== "mck-search-list") ? 'vis' : 'n-vis';
                var olStatus = 'n-vis';
                var contHtmlExpr = (isGroupTab) ? 'group-' + contact.htmlId : 'user-' + contact.htmlId;
                var displayCount = isGroupTab && IS_MCK_GROUPUSERCOUNT;
                $applozic("#li-" + contHtmlExpr + " .mck-group-count-text").html(groupUserCount);
                $applozic("#li-" + contHtmlExpr + " .mck-group-count-box").removeClass('n-vis').addClass('vis');
                if (!isGroupTab && !alUserService.MCK_BLOCKED_TO_MAP[contact.contactId] && !MCK_BLOCKED_BY_MAP[contact.contactId] && IS_MCK_OL_STATUS && w.MCK_OL_MAP[contact.contactId]) {
                    olStatus = 'vis';
                    prepend = true;
                }
                if (contact.type === 7 && contact.members.length > 1) {
										var contacts;
                    var group = mckGroupUtils.getGroup(message.groupId);
										mckGroupService.getContactFromGroupOfTwo(group, function(user){
										contacts= mckMessageLayout.fetchContact(user);
										});
                    if (isGroupTab && IS_MCK_OL_STATUS && w.MCK_OL_MAP[contacts.contactId]) {
                        olStatus = 'vis';
                        prepend = true;
                    }
                }
                var isContHeader = 'n-vis';
                if (typeof conversationPxy === 'object' && IS_MCK_TOPIC_HEADER) {
                    var topicDetail = MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId];
                    if (typeof topicDetail === 'object') {
                        isContHeader = 'vis';
                        var title = topicDetail.title;
                    }
                }
				if((isGroupTab)){
					clientGroupIdExpr = 'li-clientgroupid-'+clientGroupId;
				}
                var contHtmlExpr = (isGroupTab) ? 'group-' + contact.htmlId : 'user-' + contact.htmlId;
                var contactList = [{
                    contHtmlExpr: contHtmlExpr,
                    contIdExpr: contact.contactId,
                    clientGroupIdExpr:contact.clientGroupId ?clientGroupIdExpr:'',
				    clientGroupId:contact.clientGroupId,
                    contTabExpr: isGroupTab,
                    msgCreatedAtTimeExpr: message ? message.createdAtTime : '',
                    mckLauncherExpr: MCK_LAUNCHER,
                    contImgExpr: imgsrctag,
                    contOlExpr: olStatus,
                    onlineLabel: MCK_LABELS['online'],
                    contUnreadExpr: unreadCountStatus,
                    contUnreadCount: unreadCount,
                    contNameExpr: displayName,
                    conversationExpr: conversationId,
                    contHeaderExpr: isContHeader,
                    titleExpr: title,
                    groupUserCountExpr: isGroupTab ? contact.userCount : '',
                    displayGroupUserCountExpr: displayCount ? "vis" : "n-vis",
                    msgCreatedDateExpr: message ? mckDateUtils.getTimeOrDate(message.createdAtTime, true) : ''
                }];
                var latestCreatedAtTime = $applozic('#' + $listId + ' li:nth-child(1)').data('msg-time');
                if (typeof latestCreatedAtTime === "undefined" || (message ? message.createdAtTime : '') >= latestCreatedAtTime || ($listId.indexOf("search") !== -1 && prepend)) {
                    $applozic.tmpl('contactTemplate', contactList).prependTo('#' + $listId);
                } else {
                    $applozic.tmpl("contactTemplate", contactList).appendTo('#' + $listId);
                }
                $applozic(".li-" + contHtmlExpr + " .mck-unread-count-text").html(unreadCount);
                $applozic("." + clientGroupIdExpr + " .mck-unread-count-text").html(unreadCount);
                if (unreadCount > 0) {
                    $applozic(".li-" + contHtmlExpr + " .mck-unread-count-box").removeClass('n-vis').addClass('vis');
                    $applozic("." + clientGroupIdExpr + " .mck-unread-count-box").removeClass('n-vis').addClass('vis');
                }
                if (unreadCount === 0) {
                    $applozic(".li-" + contHtmlExpr + " .mck-unread-count-box").removeClass('vis').addClass('n-vis');
                    $applozic("." + clientGroupIdExpr + " .mck-unread-count-box").removeClass('vis').addClass('n-vis');
                }
                var $textMessage = $applozic("#li-" + contHtmlExpr + " .msgTextExpr");
                (typeof emoji_template === 'object') ? $textMessage.append(emoji_template): $textMessage.html(emoji_template);
            };
            _this.addContactsToContactSearchList = function(contactList) {
                var contactsArray = [],
                    userIdArray = [];
                $mck_no_search_contacts.removeClass('vis').addClass('n-vis');
                $mck_no_search_groups.removeClass('vis').addClass('n-vis');
                if (!$mck_contact_search_tab.hasClass('active')) {
                    $mck_search_tab_link.removeClass('active');
                    $mck_contact_search_tab.addClass('active');
                }
                $mck_group_search_list.removeClass('vis').addClass('n-vis');
                $mck_contact_search_list.removeClass('n-vis').addClass('vis');
                $mck_group_search_input_box.removeClass('vis').addClass('n-vis');
                $mck_contact_search_input_box.removeClass('n-vis').addClass('vis');
                $mck_contact_search_list.html('');
                $mck_contacts_content.removeClass('vis').addClass('n-vis');
                $mck_sidebox_content.removeClass('vis').addClass('n-vis');
                $mck_group_info_tab.removeClass('vis').addClass('n-vis');
                $mck_group_create_tab.removeClass('vis').addClass('n-vis');
                $mck_sidebox_search.removeClass('n-vis').addClass('vis');
                $mck_search_loading.removeClass('n-vis').addClass('vis');
                var friendListGroup = ALStorage.getFriendListGroupName();
               if (MCK_CONTACT_ARRAY.length !== 0 ||friendListGroup) {
                   mckMessageLayout.addContactsToSearchList(false,contactList);
               } else if (!IS_MCK_OWN_CONTACTS) {
                    mckContactService.loadContacts();
                } else {
                    $mck_search_loading.removeClass('vis').addClass('n-vis');
                    $mck_no_search_contacts.removeClass('n-vis').addClass('vis');
                }
                $mck_contact_search_input.focus();
            };
            _this.addGroupsToGroupSearchList = function() {
                var groupsArray = [],
                    groupIdArray = [];
                $mck_no_search_contacts.removeClass('vis').addClass('n-vis');
                $mck_no_search_groups.removeClass('vis').addClass('n-vis');
                if (!$mck_group_search_tab.hasClass('active')) {
                    $mck_search_tab_link.removeClass('active');
                    $mck_group_search_tab.addClass('active');
                }
                $mck_contact_search_list.removeClass('vis').addClass('n-vis');
                $mck_group_search_list.removeClass('n-vis').addClass('vis');
                $mck_contact_search_input_box.removeClass('vis').addClass('n-vis');
                $mck_group_search_input_box.removeClass('n-vis').addClass('vis');
                $mck_group_search_list.html('');
                $mck_contacts_content.removeClass('vis').addClass('n-vis');
                $mck_sidebox_content.removeClass('vis').addClass('n-vis');
                $mck_group_info_tab.removeClass('vis').addClass('n-vis');
                $mck_group_create_tab.removeClass('vis').addClass('n-vis');
                $mck_sidebox_search.removeClass('n-vis').addClass('vis');
                $mck_search_loading.removeClass('n-vis').addClass('vis');
                if (MCK_GROUP_ARRAY.length > 0) {
                    $applozic.each(MCK_GROUP_ARRAY, function(i, group) {
                        groupIdArray.push(group.contactId);
                    });
                    var uniqueGroupIdArray = groupIdArray.filter(function(item, pos) {
                        return groupIdArray.indexOf(item) === pos;
                    });
                    uniqueGroupIdArray.sort();
                    $applozic.each(uniqueGroupIdArray, function(i, groupId) {
                        if (groupId) {
                            var group = mckGroupUtils.getGroup('' + groupId);
                            groupsArray.push(group);
                            if ($applozic('#li-gs-group-' + group.htmlId).length === 0) {
                                _this.addContactForSearchList(group, 'mck-group-search-list');
                            }
                        }
                    });
                } else {
                    $mck_no_search_groups.removeClass('n-vis').addClass('vis');
                }
                _this.initAutoSuggest({
                    'contactsArray': groupsArray,
                    '$searchId': $mck_group_search_input,
                    'isContactSearch': true
                });
                $mck_search_loading.removeClass('vis').addClass('n-vis');
            };
            _this.addConversationMenu = function(tabId, isGroup) {
                var currTabId = $mck_msg_inner.data('mck-id');
                $mck_conversation_list.html('');
                if (tabId !== currTabId) {
                    return;
                }
                var tabConvArray = MCK_TAB_CONVERSATION_MAP[tabId];
                if (typeof tabConvArray === 'undefined' || tabConvArray.length === 0 || tabConvArray.length === 1) {
                    $product_box_caret.addClass('n-vis');
                    $mck_product_box.addClass('mck-product-box-wc');
                    $mck_conversation_list.addClass('n-vis');
                    return;
                }
                $mck_conversation_list.removeClass('n-vis');
                $product_box_caret.removeClass('n-vis');
                $mck_product_box.removeClass('mck-product-box-wc');
                $applozic.each(tabConvArray, function(i, convPxy) {
                    if ($applozic("#mck-conversation-list #li-" + convPxy.id).length === 0) {
                        var title = '';
                        if (convPxy.topicDetail) {
                            var topicDetail = $applozic.parseJSON(convPxy.topicDetail);
                            title = (typeof topicDetail === 'object') ? topicDetail.title : convPxy.topicDetail;
                        }
                        if (!title) {
                            title = convPxy.topicId;
                        }
                        var convList = [{
                            convIdExpr: convPxy.id,
                            tabIdExpr: tabId,
                            isGroupExpr: isGroup,
                            topicIdExpr: convPxy.topicId,
                            convTitleExpr: title,
                            mckLauncherExpr: MCK_LAUNCHER
                        }];
                        $applozic.tmpl("convTemplate", convList).appendTo($mck_conversation_list);
                    }
                });
                if ($applozic("#mck-conversation-list li").length < 2) {
                    $product_box_caret.addClass('n-vis');
                    $mck_product_box.addClass('mck-product-box-wc');
                    $mck_conversation_list.addClass('n-vis');
                }
            };
            _this.loadContacts = function(data) {
                if (data + '' === "null" || typeof data === "undefined" || typeof data.contacts === "undefined" || data.contacts.length === 0) {
                    return;
                }
                MCK_CONTACT_ARRAY.length = 0;
                MCK_GROUP_MEMBER_SEARCH_ARRAY.length = 0;
                $applozic.each(data.contacts, function(i, data) {
                    if ((typeof data.userId !== "undefined")) {
                        var contact = _this.getContact('' + data.userId);
                        contact = (typeof contact === 'undefined') ? _this.createContactWithDetail(data) : _this.updateContactDetail(contact, data);
												MCK_CONTACT_ARRAY.push(contact);
                        MCK_GROUP_MEMBER_SEARCH_ARRAY.push(contact.contactId);
                    }
                });
            };

						_this.loadContactsForContactList = function (data) {
								var startIndex =data.startIndex?data.startIndex:'0';
								var pageSize = data.pageSize?data.pageSize:'50';
								var url = MCK_BASE_URL + '/rest/ws/user/filter?startIndex='+startIndex+'&pageSize='+pageSize+'&orderBy=1';
								mckUtils.ajax({
											url: url,
											type: 'get',
											global: false,
											success: function (data) {
											console.log(data);
											if (data.success) {
													data.success(response);
											}
											},
											error: function () {
													w.console.log('Unable to load contacts. Please reload page.');
											}
									});
						};

            _this.getStatusIcon = function(msg) {
                return '<span class="' + _this.getStatusIconName(msg) + ' move-right ' + msg.key + '_status status-icon"></span>';
            };
            _this.getStatusIconName = function(msg) {
                if (msg.type === 7 || msg.type === 6 || msg.type === 4 || msg.type === 0) {
                    return '';
                }
                if (msg.status === 5) {
                    return 'mck-icon-read';
                }
                if (msg.status === 4) {
                    return 'mck-icon-delivered';
                }
                if (msg.type === 3 || msg.type === 5 || (msg.type === 1 && (msg.source === 0 || msg.source === 1))) {
                    return 'mck-icon-sent';
                }
                return '';
            };
            _this.clearMessageField = function(keyboard) {
                $mck_text_box.html('');
                $mck_msg_sbmt.attr('disabled', false);
                $mck_file_box.removeClass('vis').removeClass('mck-text-req').addClass('n-vis').attr('required', '').html('');
                if (keyboard) {
                    $mck_text_box.focus().select();
                } else {
                    $mck_search.blur();
                    $mck_text_box.blur();
                }
            };
            _this.addDraftMessage = function(tabId) {
                FILE_META = [];
                if (tabId && typeof TAB_MESSAGE_DRAFT[tabId] === 'object') {
                    var draftMessage = TAB_MESSAGE_DRAFT[tabId];
                    $mck_text_box.html(draftMessage.text);
                    if (draftMessage.files.length > 0) {
                        $applozic.each(draftMessage.files, function(i, file) {
                            mckFileService.addFileBox(file);
                        });
                        $file_name.html(draftMessage.filelb);
                        $file_size.html(draftMessage.filesize);
                        $mck_file_box.removeClass('n-vis').removeClass('mck-text-req').addClass('vis').removeAttr('required');
                    }
                } else {
                    FILE_META = [];
                }
            };
            _this.showOfflineMessage = function() {
                if (typeof MCK_OFFLINE_MESSAGE_DETAIL === 'object' && MCK_OFFLINE_MESSAGE_DETAIL.innerHTML) {
                    $mck_offline_message_box.html(MCK_OFFLINE_MESSAGE_DETAIL.innerHTML);
                    $mck_offline_message_box.removeClass('n-vis').addClass('vis');
                } else {
                    w.console.log('Offline message innerHTML required.');
                }
            };
            _this.hideOfflineMessage = function() {
                mckInit.stopOfflineMessageCounter();
                $mck_offline_message_box.removeClass('vis').addClass('n-vis');
            };
            _this.removeConversationThread = function(tabId, isGroup) {
                ALStorage.clearMckMessageArray();
                var contact = (isGroup) ? mckGroupUtils.getGroup(tabId) : mckMessageLayout.getContact(tabId);
                var currentTabId = $mck_msg_inner.data('mck-id');
                var isCurrGroupTab = $mck_msg_inner.data('isgroup');
                if (typeof currentTabId === 'undefined' || currentTabId === '') {
                    var htmlId = (typeof contact !== 'undefined') ? contact.htmlId : mckContactUtils.formatContactId(tabId);
                    var contactIdExpr = (isGroup) ? 'group-' + htmlId : 'user-' + htmlId;
                    $applozic('#li-' + contactIdExpr).remove();
                } else if (currentTabId === tabId && isCurrGroupTab === isGroup) {
                    $mck_tab_option_panel.data('datetime', '');
                    $mck_no_messages.removeClass('n-vis').addClass('vis');
                    //   $mck_msg_inner.html('<div class="mck-no-data-text mck-text-muted">No messages yet!</div>');
                    $mck_msg_cell.removeClass('n-vis').addClass('vis');
                    $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                }
            };
            _this.removedDeletedMessage = function(key, tabId, isGroup) {
                ALStorage.clearMckMessageArray();
                var $divMessage = $applozic("." + key);
                if ($divMessage.length > 0) {
                    $divMessage.remove();
                    if ($mck_msg_inner.is(":empty")) {
                        $mck_msg_cell.removeClass('n-vis').addClass('vis');
                        $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                    }
                } else if (typeof tabId !== "undefined") {
                    var mckContactListLength = $applozic("#mck-contact-list").length;
                    if (mckContactListLength > 0) {
                        alMessageService.updateContactList(tabId, isGroup);
                    }
                }
            };
            _this.getMessageTextForContactPreview = function(message, contact, size) {
                var emoji_template = '';
                if (typeof message !== 'undefined') {
                    if (message.message) {
                        if (message.contentType === 2) {
                            emoji_template = '<span class="mck-icon-marker"></span>';
                        } else {
                            var msg = message.message;
                            if (mckUtils.startsWith(msg, "<img")) {
                                return '<span class="mck-icon-camera"></span>&nbsp;<span>image</span>';
                            } else {
                               if (w.emoji !== null && typeof w.emoji !== 'undefined') {
                                emoji_template = w.emoji.replace_unified(msg);
                                emoji_template = w.emoji.replace_colons(emoji_template);
                                emoji_template = (emoji_template.indexOf('</span>') !== -1) ? emoji_template.substring(0, emoji_template.lastIndexOf('</span>')) : emoji_template.substring(0, size);
                              }else {
                                	emoji_template = msg;
                                     }
                                	}
                            if (!contact.isGroup) {
                                if (emoji_template.indexOf('emoji-inner') === -1 && message.contentType === 0) {
                                    var x = d.createElement('p');
                                    x.appendChild(d.createTextNode(emoji_template));
                                    emoji_template = x;
                                }
                            }
                        }
                    } else if (message.fileMetaKey && typeof message.fileMeta === "object") {
                        emoji_template = alFileService.getFileIcon(message);
                    }
                    if (contact.isGroup && contact.type !== 3 && contact.type !== 7) {
                        var msgFrom = (message.to.split(",")[0] === MCK_USER_ID) ? "Me" : mckMessageLayout.getTabDisplayName(message.to.split(",")[0], false);
                        if (message.contentType !== 10) {
                            emoji_template = msgFrom + ": " + emoji_template;
                        }
                        if (emoji_template.indexOf('emoji-inner') === -1 && message && message.message && message.contentType === 0) {
                            var x = d.createElement('p');
                            x.appendChild(d.createTextNode(emoji_template));
                            emoji_template = x;
                        }
                    }
                }
                return emoji_template;
            };
            _this.getTextForMessagePreview = function(message, contact) {
                var emoji_template = '';
                if (typeof message !== 'undefined') {
                    if (message.contentType === 2) {
                        emoji_template = 'Shared location';
                    } else if (message.message) {
                        var msg = message.message;
                        if (mckUtils.startsWith(msg, "<img")) {
                            emoji_template = 'Image attachment';
                        } else {
                            var x = d.createElement('div');
                            x.innerHTML = msg;
                            msg = $applozic.trim(mckUtils.textVal(x));
                            emoji_template = msg.substring(0, 50);
                        }
                    } else if (message.fileMetaKey && typeof message.fileMeta === "object") {
                        emoji_template = (message.fileMeta.contentType.indexOf("image") !== -1) ? 'Image attachment' : 'File attachment';
                    }
                    if (contact.isGroup && contact.type !== 3 && contact.type !== 7) {
                        var msgFrom = (message.to.split(",")[0] === MCK_USER_ID) ? "Me" : mckMessageLayout.getTabDisplayName(message.to.split(",")[0], false);
                        emoji_template = msgFrom + ": " + emoji_template;
                    }
                }
                return emoji_template;
            };
            _this.getUserIdFromMessage = function(message) {
                var tos = message.to;
                if (tos.lastIndexOf(",") === tos.length - 1) {
                    tos = tos.substring(0, tos.length - 1);
                }
                return tos.split(",");
            };
            _this.getUserIdArrayFromMessageList = function(messages) {
                var userIdArray = new Array();
                if (typeof messages.length === "undefined") {
                    userIdArray.concat(_this.getUserIdFromMessage(messages));
                } else {
                    $applozic.each(messages, function(i, message) {
                        if (!(typeof message.to === "undefined")) {
                            userIdArray = userIdArray.concat(_this.getUserIdFromMessage(message));
                        }
                    });
                }
                return userIdArray;
            };
            _this.messageContextMenu = function(messageKey) {
                var $messageBox = $applozic("." + messageKey + " .mck-msg-box");
                if ($messageBox.addEventListener) {
                    $messageBox.addEventListener('contextmenu', function(e) {
                        e.preventDefault();
                    }, false);
                } else {
                    $messageBox.bind('contextmenu', function(e) {
                        e.preventDefault();
                        $applozic(".mck-context-menu").removeClass("vis").addClass("n-vis");
                        $applozic("." + messageKey + " .mck-context-menu").removeClass("n-vis").addClass("vis");
                        w.event.returnValue = false;
                    });
                }
            };
            _this.isValidMetaData = function(message) {
                if (!message.metadata) {
                    return true;
                } else if (message.metadata.category === 'HIDDEN' || message.metadata.category === 'ARCHIVE') {
                    return false;
                } else {
                    return true;
                }
            }
            _this.updateDraftMessage = function(tabId, fileMeta) {
                if (typeof fileMeta === 'object') {
                    var tab_draft = {
                        'text': '',
                        files: []
                    };
                    var file = {
                        fileMeta: fileMeta,
                        filelb: alFileService.getFilePreviewPath(fileMeta),
                        filesize: alFileService.getFilePreviewSize(fileMeta.size)
                    };
                    if ((typeof tabId !== 'undefined') && (typeof TAB_MESSAGE_DRAFT[tabId] === 'object')) {
                        tab_draft = TAB_MESSAGE_DRAFT[tabId];
                        $applozic.each(tab_draft.files, function(i, oldFile) {
                            if (oldFile.filelb === file.filelb) {
                                tab_draft.files.splice(i, 1);
                            }
                        });
                    }
                    tab_draft.files.push(file);
                }
                TAB_MESSAGE_DRAFT[tabId] = tab_draft;
            };
            _this.updateUnreadCount = function(tabId, count, isTotalUpdate, calledFrom) {
                var previousCount = _this.getUnreadCount(tabId);
                MCK_UNREAD_COUNT_MAP[tabId] = count;
                if (calledFrom !== 'loadMessageList' && (isTotalUpdate || $mckChatLauncherIcon.length > 0)) {
                    MCK_TOTAL_UNREAD_COUNT += count - previousCount;
                    if (MCK_TOTAL_UNREAD_COUNT < 0) {
                        MCK_TOTAL_UNREAD_COUNT = 0;
                    }
                    (MCK_TOTAL_UNREAD_COUNT > 0) ? $mckChatLauncherIcon.html(MCK_TOTAL_UNREAD_COUNT): $mckChatLauncherIcon.html('');
                }
								if(isTotalUpdate){
                     mckUtils.badgeCountOnLaucher(MCK_ENABLE_BADGE_COUNT,MCK_TOTAL_UNREAD_COUNT);
                }
            };
            _this.incrementUnreadCount = function(tabId) {
                MCK_TOTAL_UNREAD_COUNT += 1;
                MCK_UNREAD_COUNT_MAP[tabId] = (typeof(MCK_UNREAD_COUNT_MAP[tabId]) === 'undefined') ? 1 : MCK_UNREAD_COUNT_MAP[tabId] + 1;
                if ($mckChatLauncherIcon.length > 0) {
                    $mckChatLauncherIcon.html(MCK_TOTAL_UNREAD_COUNT);
                }
								mckUtils.badgeCountOnLaucher(MCK_ENABLE_BADGE_COUNT,MCK_TOTAL_UNREAD_COUNT);
            };
            _this.getUnreadCount = function(tabId) {
                if (typeof(MCK_UNREAD_COUNT_MAP[tabId]) === 'undefined') {
                    MCK_UNREAD_COUNT_MAP[tabId] = 0;
                    return 0;
                } else {
                    return MCK_UNREAD_COUNT_MAP[tabId];
                }
            };
            _this.isGroupDeleted = function(tabId, isGroup) {
                if (isGroup) {
                    var deletedAtTime = mckGroupLayout.getDeletedAtTime(tabId);
                    return (typeof deletedAtTime !== 'undefined' && deletedAtTime > 0);
                }
                return false;
            };
            _this.getTabDisplayName = function(tabId, isGroup, userName) {
                var displayName = '';
                if (isGroup) {
                    return mckGroupService.getGroupDisplayName(tabId);
                } else {
                    if (typeof(MCK_GETUSERNAME) === 'function') {
                        displayName = MCK_GETUSERNAME(tabId);
                    }
                    if (typeof userName !== 'undefined' && userName) {
                        displayName = userName;
                        MCK_CONTACT_NAME_MAP[tabId] = userName;
                    }
                    if (!displayName) {
                        displayName = _this.getContactDisplayName(tabId);
                    }
                    var contact = _this.fetchContact('' + tabId);
                    if (!displayName) {
                        if (typeof contact.displayName !== 'undefined') {
                            displayName = contact.displayName;
                        }
                    } else {
                        contact.displayName = displayName;
                        MCK_CONTACT_MAP[contact.contactId] = contact;
                    }
                    if (!displayName) {
                        displayName = tabId;
                    }
                    return displayName;
                }
            };
            _this.populateMessage = function(messageType, message, notifyUser) {
                var callDuration = mckDateUtils.convertMilisIntoTime(message.metadata.CALL_DURATION);
                alUserService.loadUserProfile(message.to);

                if (message.contentType == 103) {
                    if (message.type == 4 && message.metadata.MSG_TYPE == "CALL_REJECTED") {
                        message.message = "you rejected a Video call from " + message.to;
                    } else if (message.type == 5 && message.metadata.MSG_TYPE == "CALL_REJECTED") {
                        message.message = message.to + "rejected a Video call from you";
                    } else if (message.type == 4 && message.metadata.MSG_TYPE == "CALL_END") {
                        //alert("call ended: duration is:"+message.metadata.CALL_DURATION);
                        message.message = "you were in a call with " + message.to + "\n call duration : " + callDuration;
                    } else if (message.type == 5 && message.metadata.MSG_TYPE == "CALL_END") {
                        //alert("call ended: duration is:"+message.metadata.CALL_DURATION);
                        message.message = "you were in a call with " + message.to + "\n call duration : " + callDuration;
                    } else if (message.type == 4 && message.metadata.MSG_TYPE == "CALL_MISSED") {
                        message.message = "you missed a Video call from " + message.to;
                    } else if (message.type == 5 && message.metadata.MSG_TYPE == "CALL_MISSED") {
                        message.message = message.to + "missed a Video call from you";
                    }
                }

                var tabId = $mck_msg_inner.data('mck-id');
                var isValidMeta = mckMessageLayout.isValidMetaData(message);
                var contact = (message.groupId) ? mckGroupUtils.getGroup(message.groupId) : mckMessageLayout.getContact(message.to);
                if ((typeof tabId === 'undefined') || tabId === '') {
                    var mckContactListLength = $applozic("#mck-contact-list").length;
                    if (mckContactListLength > 0 && isValidMeta) {
                        (message.groupId) ? mckGroupService.addGroupFromMessage(message, true, function(group, message, update){
													_this.updateRecentConversationList(group, message, update);
												}): mckMessageLayout.addContactsFromMessage(message, true);
                    }
										else {
                        mckMessageLayout.addContactsFromMessageList({message: [message]}, '');
                    }
                    if (messageType === "APPLOZIC_01" || messageType === "MESSAGE_RECEIVED") {
                        if (typeof contact === 'undefined') {
                            contact = (message.groupId) ? mckGroupUtils.createGroup(message.groupId) : mckMessageLayout.createContact(message.to);
                        }
                        if (IS_LAUNCH_TAB_ON_NEW_MESSAGE) {
                            mckMessageLayout.loadTab({
                                'tabId': contact.contactId,
                                'isGroup': contact.isGroup,
                                'conversationId': message.conversationId
                            });
                            return;
                        }
                        var ucTabId = (message.groupId) ? 'group_' + contact.contactId : 'user_' + contact.contactId;
                        if (isValidMeta) {
                            if (message.contentType !== 10 && message.contentType !== 102) {
                                mckMessageLayout.incrementUnreadCount(ucTabId);
                            }
														mckNotificationService.notifyUser(message);
                        }
                        var contactHtmlExpr = (message.groupId) ? 'group-' + contact.htmlId : 'user-' + contact.htmlId;
                        var clientGroupIdHtmlExpr = mckContactUtils.formatContactId('' + contact.clientGroupId);
                        if (message.groupId && contact.clientGroupId) {
                            $applozic(".li-clientgroupid-" + clientGroupIdHtmlExpr + " .mck-unread-count-text").html(mckMessageLayout.getUnreadCount(ucTabId));
                        }
                        $applozic(".li-" + contactHtmlExpr + " .mck-unread-count-text").html(mckMessageLayout.getUnreadCount(ucTabId));
                        if (mckMessageLayout.getUnreadCount(ucTabId) > 0) {
                            $applozic(".li-" + contactHtmlExpr + " .mck-unread-count-box").removeClass("n-vis").addClass("vis");
                        }
                        if (message.groupId && contact.clientGroupId) {
                            $applozic(".li-clientgroupid-" + clientGroupIdHtmlExpr + " .mck-unread-count-text").removeClass("n-vis").addClass("vis");
                        }
                        alMessageService.sendDeliveryUpdate(message);
                    }
                } else {
                    if (typeof contact === 'undefined') {
                        contact = (message.groupId) ? mckGroupUtils.createGroup(message.groupId) : mckMessageLayout.createContact(message.to);
                    }
                    if (messageType === 'APPLOZIC_01' || messageType === 'MESSAGE_RECEIVED') {
                        if (typeof contact !== 'undefined') {
                            var isGroupTab = $mck_msg_inner.data('isgroup');
                            if (((typeof message.oldKey === 'undefined' || $applozic("." + message.oldKey).length === 0) && $applozic("." + message.key).length === 0) || message.contentType === 10) {
                                if (typeof tabId !== 'undefined' && tabId === contact.contactId && isGroupTab === contact.isGroup && !$mck_group_info_tab.hasClass('vis')) {
                                    var validated = true;
                                    if (isGroupTab && contact.type === 6) {
                                        validated = mckGroupService.isAppendOpenGroupContextMenu(contact);
                                    }
                                    if (message.conversationId && (IS_MCK_TOPIC_HEADER || IS_MCK_TOPIC_BOX)) {
                                        var currConvId = $mck_msg_inner.data('mck-conversationid');
                                        if (currConvId && currConvId.toString() === message.conversationId.toString()) {
                                            if (!message.metadata || message.metadata.category !== 'HIDDEN') {
                                                mckMessageLayout.addMessage(message, contact, true, true, validated);
                                            }
                                            alMessageService.sendReadUpdate(message.pairedMessageKey);
                                        } else if (IS_LAUNCH_TAB_ON_NEW_MESSAGE) {
                                            mckMessageLayout.loadTab({
                                                'tabId': contact.contactId,
                                                'isGroup': contact.isGroup,
                                                'conversationId': message.conversationId
                                            });
                                            return;
                                        }
                                    } else {
																				var contacts;
                                        if (contact.type === 7) {
                                            var group = mckGroupUtils.getGroup(message.groupId);
                                            mckGroupService.getContactFromGroupOfTwo(group, function(user){
																						contacts = mckMessageLayout.fetchContact(user);
																						});
                                            mckUserUtils.lastSeenOfGroupOfTwo(contacts.contactId);
                                            mckMessageLayout.addMessage(message, contact, true, true, validated);
                                        }
                                        if (!message.metadata || message.metadata.category !== 'HIDDEN' && contact.type !== 7) {
                                            mckMessageLayout.addMessage(message, contact, true, true, validated);
                                        }
                                        alMessageService.sendReadUpdate(message.pairedMessageKey);
                                    }
                                    if (!message.groupId) {
                                        $applozic('#mck-tab-status').html(MCK_LABELS['online']);
                                        alUserService.updateUserStatus({
                                            'userId': message.to,
                                            'status': 1
                                        },function(userIdArray){
																					mckContactService.getUsersDetail(userIdArray, {});
																				});
                                    }
                                    // Todo: use contactNumber instead of contactId
                                    // for Google Contacts API.
                                } else {
                                    if (IS_LAUNCH_TAB_ON_NEW_MESSAGE) {
                                        mckMessageLayout.loadTab({
                                            'tabId': contact.contactId,
                                            'isGroup': contact.isGroup,
                                            'conversationId': message.conversationId
                                        });
                                        return;
                                    }
                                    if ((isValidMeta && message.contentType !== 10) || message.contentType !== 102) {
                                        var ucTabId = (message.groupId) ? 'group_' + contact.contactId : 'user_' + contact.contactId;
                                        mckMessageLayout.incrementUnreadCount(ucTabId);
                                    }
                                    alMessageService.sendDeliveryUpdate(message);
                                }
                                if (notifyUser && contact.type!== 6) {
																	mckNotificationService.notifyUser(message);
                                }
                            }
                        }
                    } else if (messageType === "APPLOZIC_02" && message.contentType != 102) {
                        if (((typeof message.oldKey === 'undefined' || $applozic("." + message.oldKey).length === 0) && $applozic("." + message.key).length === 0) || message.contentType === 10) {
                            if (mckContactListLength > 0) {
                                mckMessageLayout.addContactsFromMessage(message, true);
                            } else {
                                if (typeof contact !== 'undefined') {
                                    var isGroupTab = $mck_msg_inner.data('isgroup');
                                    if (typeof tabId !== 'undefined' && tabId === contact.contactId && isGroupTab === contact.isGroup) {
                                        var validated = true;
                                        if (isGroupTab && contact.type === 6) {
                                            validated = mckGroupService.isAppendOpenGroupContextMenu(contact);
                                        }
                                        if (!message.metadata || message.metadata.category !== 'HIDDEN') {
                                            mckMessageLayout.addMessage(message, contact, true, true, validated);
                                        }
                                        if (message.type === 3) {
                                            $applozic("." + message.key + " .mck-message-status").removeClass('mck-icon-time').addClass('mck-icon-sent');
                                            mckMessageLayout.addTooltip(message.key);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                $mck_loading.removeClass('vis').addClass('n-vis');
            };

            _this.updateUnreadCountonChatIcon = function(userDetails) {
                if (IS_LAUNCH_ON_UNREAD_MESSAGE_ENABLED && userDetails.length > 0) {
                    var contactIdWithUnreadMessage = null;
                    var unreadCountForUser = 0;
                    if (userDetails.length > 0) {
                        $applozic.each(userDetails, function(i, userDetail) {
                            if (userDetail.unreadCount > 0 && contactIdWithUnreadMessage !== null) {
                                return;
                            }
                            if (userDetail.unreadCount > 0) {
                                contactIdWithUnreadMessage = userDetail.userId;
                                unreadCountForUser = userDetail.unreadCount;
                            }
                        });
                        if (MCK_TOTAL_UNREAD_COUNT > 0 && ($mck_sidebox.css('display') === 'none')) {
                            if (contactIdWithUnreadMessage !== null && unreadCountForUser === MCK_TOTAL_UNREAD_COUNT) {
                                mckMessageLayout.loadTab({
                                    tabId: contactIdWithUnreadMessage,
                                    'isGroup': false
                                });
                            } else {
                                mckMessageLayout.loadTab({
                                    'tabId': '',
                                    'isGroup': false
                                });
                            }
                        }
                    }
                }
            };
            _this.loadMessageListOnUserDetailFetch = function(params) {
                $mck_loading.removeClass('vis').addClass('n-vis');
                var currTabId = $mck_msg_inner.data('mck-id');
                var isGroupTab = $mck_msg_inner.data('isgroup');
                if (typeof currTabId === "undefined" || (params.tabId === currTabId && ('' + isGroupTab === '' + params.isGroup))) {
                    var group = mckGroupUtils.getGroup(params.tabId);
                    mckGroupLayout.addGroupStatus(group);
                    var validated = (group.type === 6) ? false : true;
                    var validated = true;
                    if (group.type === 6) {
                        mckGroupLayout.validateOpenGroupUser(group);
                        validated = mckGroupService.isAppendOpenGroupContextMenu(group);
                    }
                    if (params.isMessages) {
                        $mck_no_messages.removeClass('vis').addClass('n-vis');
                        mckMessageLayout.processMessageList(params.messageData, true, validated);
                        if (group.type !== 6) {
                            $mck_tab_message_option.removeClass('n-vis').addClass('vis');
                        }
                        if (typeof(MCK_CALLBACK) === 'function') {
                            MCK_CALLBACK(params.tabId);
                        }
                    } else if ($applozic("#mck-message-cell .mck-message-inner div[name='message']").length === 0) {
                        $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                        $mck_no_messages.removeClass('n-vis').addClass('vis');
                        //   $mck_msg_inner.html('<div class="mck-no-data-text mck-text-muted">No messages yet!</div>');
                    }
                }
            };
        }

        function MckUserUtils() {
            var _this = this;

            var $mck_msg_form = $applozic("#mck-msg-form");
            var $mck_msg_error = $applozic("#mck-msg-error");
            var $mck_tab_title = $applozic("#mck-tab-title");
            var $mck_tab_status = $applozic("#mck-tab-status");
            var $mck_typing_box = $applozic('.mck-typing-box');
            var $mck_block_button = $applozic("#mck-block-button");
            var $mck_message_inner = $applozic("#mck-message-cell .mck-message-inner");

						_this.updateUserConnectedStatus = function() {
								$applozic('.mck-user-ol-status').each(function() {
										var $this = $applozic(this);
										var tabId = $this.data('mck-id');
										if (tabId) {
												var userDetail = alUserService.MCK_USER_DETAIL_MAP[tabId];
												if (typeof alUserService.MCK_USER_DETAIL_MAP[tabId] !== 'undefined' && userDetail.connected) {
														$this.removeClass('n-vis').addClass('vis');
														$this.next().html('(' + MCK_LABELS['online'] + ')');
												} else {
														$this.removeClass('vis').addClass('n-vis');
														$this.next().html('(Offline)');
												}
										}
								});
						};
            _this.lastSeenOfGroupOfTwo = function(tabId) {
                if (w.MCK_OL_MAP[tabId]) {
                    $mck_tab_status.attr('title', MCK_LABELS['online']).html(MCK_LABELS['online']);
                    $mck_tab_status.removeClass('n-vis').addClass('vis');
                } else if (MCK_LAST_SEEN_AT_MAP[tabId]) {
                    var lastSeenAt = mckDateUtils.getLastSeenAtStatus(MCK_LAST_SEEN_AT_MAP[tabId]);
                    $mck_tab_status.html(lastSeenAt);
                    $mck_tab_status.attr('title', lastSeenAt);
                    $mck_tab_title.addClass('mck-tab-title-w-status');
                    $mck_tab_status.removeClass('n-vis').addClass('vis');
                }
            };
            _this.toggleBlockUser = function(tabId, isBlocked) {
                if (isBlocked) {
                    $mck_msg_error.html(MCK_LABELS['blocked']);
                    $mck_msg_error.removeClass('n-vis').addClass('vis').addClass('mck-no-mb');
                    $mck_msg_form.removeClass('vis').addClass('n-vis');
                    $mck_tab_title.removeClass('mck-tab-title-w-status');
                    $mck_tab_status.removeClass('vis').addClass('n-vis');
                    $mck_typing_box.removeClass('vis').addClass('n-vis');
                    $mck_message_inner.data('blocked', true);
                    $mck_block_button.html(MCK_LABELS['unblock.user']).attr('title', MCK_LABELS['unblock.user']);
                } else {
                    $mck_msg_error.html('');
                    $mck_msg_error.removeClass('vis').addClass('n-vis').removeClass('mck-no-mb');
                    $mck_msg_form.removeClass('n-vis').addClass('vis');
                    $mck_message_inner.data('blocked', false);
                    $mck_block_button.html(MCK_LABELS['block.user']).attr('title', MCK_LABELS['block.user']);
                    if (!MCK_BLOCKED_BY_MAP[tabId] && (w.MCK_OL_MAP[tabId] || MCK_LAST_SEEN_AT_MAP[tabId])) {
                        if (w.MCK_OL_MAP[tabId]) {
                            $mck_tab_status.attr('title', MCK_LABELS['online']).html(MCK_LABELS['online']);
                        } else if (MCK_LAST_SEEN_AT_MAP[tabId]) {
                            var lastSeenAt = mckDateUtils.getLastSeenAtStatus(MCK_LAST_SEEN_AT_MAP[tabId]);
                            $mck_tab_status.html(lastSeenAt);
                            $mck_tab_status.attr('title', lastSeenAt);
                        }
                        $mck_tab_title.addClass('mck-tab-title-w-status');
                        $mck_tab_status.removeClass('n-vis').addClass('vis');
                    }
                }
            };
        }

        function MckContactService() {
            var _this = this;

            var $mck_search_List = $applozic("#mck-search-list");
            var $mck_sidebox_search = $applozic("#mck-sidebox-search");
            var $mck_search_loading = $applozic("#mck-search-loading");
            var $mck_search_inner = $applozic("#mck-search-cell .mck-message-inner");
            var $mck_msg_inner = $applozic("#mck-message-cell .mck-message-inner");
            var $mck_tab_message_option = $applozic(".mck-tab-message-option");
            var $mck_loading = $applozic("#mck-contact-loading");
           	var USER_BLOCK_URL = "/rest/ws/user/block";
            var CONTACT_NAME_URL = "/rest/ws/user/info";
            var USER_DETAIL_URL = "/rest/ws/user/v2/detail";
            var CONTACT_LIST_URL = "/rest/ws/user/filter";
						var USER_DISPLAY_NAME_UPDATE = "/rest/ws/user/name";
            var FRIEND_LIST_URL ="/rest/ws/group/";
            _this.getContactDisplayName = function (userIdArray) {
                var mckContactNameArray = [];
                window.Applozic.ALApiService.getContactDisplayName({
                    data: { "userIdArray": userIdArray },
                    success: function (data) {
                        for (var userId in data) {
                            if (data.hasOwnProperty(userId)) {
                                mckContactNameArray.push([userId, data[userId]]);
                                MCK_CONTACT_NAME_MAP[userId] = data[userId];
                                var contact = mckMessageLayout.fetchContact(userId);
                                contact.displayName = data[userId];
                            }
                        }
                        ALStorage.updateMckContactNameArray(mckContactNameArray);
                    }, error: function () { }
                });
        };

				_this.loadContacts = function() {
					 var url = CONTACT_LIST_URL + '?startIndex=0&pageSize=50&orderBy=1';
					 mckContactService.ajaxcallForContacts(url,false,  mckMessageService.loadMessageList({}));
				 };

				_this.ajaxcallForContacts =  function (url,append,callback) {
					var mckContactNameArray = [];
					var $mck_gms_loading = $applozic("#mck-gms-loading");
					$mck_gms_loading.removeClass('n-vis').addClass('vis');
					window.Applozic.ALApiService.getContactList({
						url:url,
						baseUrl: MCK_BASE_URL,
					success: function(data) {
							if ($mck_sidebox_search.hasClass('vis') || $mck_gms_loading.hasClass('vis')) {
									if (typeof data === 'object' && data.users && data.users.length > 0) {
                                                                            lastFetchTime = data.lastFetchTime ? data.lastFetchTime : lastFetchTime;
                                                                            latestSeenContactTime = data.users[0] ? data.users[0].lastSeenAtTime : latestSeenContactTime;
											$applozic.each(data.users, function(i, user) {
													if (typeof user.userId !== 'undefined') {
															var contact = mckMessageLayout.getContact('' + user.userId);
															contact = (typeof contact === 'undefined') ? mckMessageLayout.createContactWithDetail(user) : mckMessageLayout.updateContactDetail(contact, user);
															if(!IS_MCK_OWN_CONTACTS){
																MCK_CONTACT_ARRAY.push(contact);
																MCK_GROUP_MEMBER_SEARCH_ARRAY.push(contact.contactId);
																mckContactNameArray.push([user.userId, contact.displayName]);
														  }

															if (user.connected) {
																	w.MCK_OL_MAP[user.userId] = true;
															} else {
																	w.MCK_OL_MAP[user.userId] = false;
																	if (typeof user.lastSeenAtTime !== 'undefined') {
																			MCK_LAST_SEEN_AT_MAP[user.userId] = user.lastSeenAtTime;
																	}
															}
													}
											});
											if (mckContactNameArray.length > 0) {
													ALStorage.updateMckContactNameArray(mckContactNameArray);
											}
									}
									mckMessageLayout.addContactsToSearchList(append);
                  mckGroupLayout.addMembersToGroupSearchList();
									if(callback){
									  callback();
									}
									return;
							}
					},
					error: function() {
							$mck_search_loading.removeClass('vis').addClass('n-vis');
							w.console.log('Unable to load contacts. Please reload page.');
					} });
                 }

						_this.getUsersDetail = function(userIdArray, params) {
				        if (typeof userIdArray === 'undefined' || userIdArray.length < 1) {
				            return;
				        }
				        var cached = (typeof params.cached !== 'undefined') ? params.cached : true;
				        var userIdList = [];
				        var uniqueUserIdArray = userIdArray.filter(function(item, pos) {
				            return userIdArray.indexOf(item) === pos;
				        });

				        for (var i = 0; i < uniqueUserIdArray.length; i++) {
				            var userId = uniqueUserIdArray[i];
				            if (!cached || typeof alUserService.MCK_USER_DETAIL_MAP[userId] === 'undefined') {
				                userIdList.push(userId);
				            }
				        }

				        if (userIdList.length === 0) {
				            if (params.setStatus) {
				                mckUserUtils.updateUserConnectedStatus();
				            } else if (params.message) {
				                mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
				            } else if (params.isLoadMessageList) {
				                mckMessageLayout.loadMessageListOnUserDetailFetch(params);
				            }
				            return;
				        }

				        var response = new Object();
				        window.Applozic.ALApiService.getUserDetail({data:userIdList,
				        success: function(data) {
				            if (data.status === 'success') {
				                if (data.response.length > 0) {
				                    $applozic.each(data.response, function(i, userDetail) {
				                        alUserService.MCK_USER_DETAIL_MAP[userDetail.userId] = userDetail;
				                        w.MCK_OL_MAP[userDetail.userId] = (userDetail.connected);
				                        var contact = mckMessageLayout.getContact('' + userDetail.userId);
				                        contact = (typeof contact === 'undefined') ? mckMessageLayout.createContactWithDetail(userDetail) : mckMessageLayout.updateContactDetail(contact, userDetail);
				                    });
				                }
				            }
				            if (params.setStatus) {
				                mckUserUtils.updateUserConnectedStatus();
				            } else if (params.message) {
				                mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
				            } else if (params.isLoadMessageList) {
				                mckMessageLayout.loadMessageListOnUserDetailFetch(params);
				            }

				            response.status = "success";
				            response.data = data;
				            if (params.callback) {
				                params.callback(response);
				            }
				        },
				        error: function() {
				            if (params.setStatus) {
				                mckUserUtils.updateUserConnectedStatus();
				            } else if (params.message) {
				                mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
				            } else if (params.isLoadMessageList) {
				                mckMessageLayout.loadMessageListOnUserDetailFetch(params);
				            }

				            response.status = "error";
				            if (params.callback) {
				                params.callback(response);
				            }
				        }
				     });
				    };

            _this.createFriendList = function(params) {
            	var group={};
                group.groupMemberList=params.groupMemberList;
                group.groupName=params.groupName;
            	if(params.type){
                    group.type=params.type;
                    window.Applozic.ALApiService.createOpenFriendList({data:group,
                        success: function(response) {
                            if(response.status==='success'){
                            ALStorage.setFriendListGroupName(params.groupName);
                            var friendListGroupType;
                            if (typeof params.type !== 'undefined') {
                              ALStorage.setFriendListGroupType(params.type);
                            };
                            if(params.callback){
                              params.callback();
                            }

                                }
                            }, error: function() {}});
            	} else {
            		var groupMembersArray =[];
            		for(var i = 0, size = (params.groupMemberList).length; i < size ; i++){
            			groupMembersArray.push((params.groupMemberList)[i]);
                       }
                       window.Applozic.ALApiService.createUserFriendList({data:group,
                        success: function(response) {
                                        ALStorage.setFriendListGroupName(params.groupName);
                                        if(typeof friendListGroupType !=='undefined') {
                                          ALStorage.setFriendListGroupType(friendListGroupType);
                                          }
                                        }, error: function() {}});

                }
                 };

           _this.getFriendList = function(friendListGroupName,friendListGroupType) {
        	    var groupmemberdetail=[];
                var getFriendListUrl = (friendListGroupType && friendListGroupType!=="null")?"/get?groupType=9":"/get";
                window.Applozic.ALApiService.getFriendList({data:{groupName:friendListGroupName,url: getFriendListUrl,async:false},
                success: function(response) {
                    console.log("response",response);
                    if (typeof friendListGroupType !== 'undefined') {
                        ALStorage.setFriendListGroupType(friendListGroupType);
                    }
                    for (var i = 0, size = (response.response.membersId).length; i < size; i++) {
                        groupmemberdetail.push((response.response.membersId)[i]);
                    }
                }, error: function () {
                    console.log(response);
                } });

                       return groupmemberdetail;
                  };
           _this.removeUserFromFriendList = function (group) {
               window.Applozic.ALApiService.removeUserFromFriendList({
                   data:  group,
                   success: function (response) { console.log(response); },
                   error: function () { }
               });
           };

           _this.deleteFriendList = function (params) {
               window.Applozic.ALApiService.deleteFriendList({
                   data: params,
                   success: function (response) {
                       ALStorage.setFriendListGroupName('');
                       ALStorage.setFriendListGroupType('');
                   }, error: function () { }
               });
           };
				}
        function MckGroupLayout() {
            var _this = this;

						var ROLE_MAP = {
                0: MCK_LABELS['user'],
                1: MCK_LABELS['admin'],
                2: MCK_LABELS['moderator'],
                3: MCK_LABELS['member']
            };

						var select = document.getElementById( 'mck-group-create-type' );
                                                select.options[select.options.length] = new Option( MCK_LABELS['public'], '2');
						select.options[select.options.length] = new Option( MCK_LABELS['private'], '1');
						select.options[select.options.length] = new Option( MCK_LABELS['open'], '6');
                                                

            var $mck_msg_form = $applozic("#mck-msg-form");
            var $mck_msg_error = $applozic("#mck-msg-error");
            var $mck_tab_title = $applozic("#mck-tab-title");
            var $mck_tab_status = $applozic("#mck-tab-status");
            var $mck_no_gsm_text = $applozic("#mck-no-gsm-text");
            var $mck_gms_loading = $applozic("#mck-gms-loading");
            var $mck_loading = $applozic("#mck-contact-loading");
            var $mck_tab_menu_box = $applozic("#mck-tab-menu-box");
            var $mck_search_loading = $applozic("#mck-search-loading");
            var $mck_group_info_tab = $applozic("#mck-group-info-tab");
            var $mck_sidebox_search = $applozic("#mck-sidebox-search");
            var $mck_group_name_box = $applozic("#mck-group-name-box");
            var $mck_group_back_link = $applozic("#mck-group-back-link");
            var $mck_group_name_edit = $applozic("#mck-group-name-edit");
            var $mck_group_name_save = $applozic("#mck-group-name-save");
            var $mck_sidebox_content = $applozic("#mck-sidebox-content");
            var $mck_tab_option_panel = $applozic("#mck-tab-option-panel");
            var $mck_btn_group_create = $applozic("#mck-btn-group-create");
            var $mck_group_create_tab = $applozic("#mck-group-create-tab");
            var $mck_contacts_content = $applozic("#mck-contacts-content");
            var $mck_btn_group_update = $applozic("#mck-btn-group-update");
            var $mck_group_create_type = $applozic("#mck-group-create-type");
            var $mck_group_icon_upload = $applozic("#mck-group-icon-upload");
            var $mck_group_icon_change = $applozic("#mck-group-icon-change");
            var $mck_group_member_List = $applozic("#mck-group-member-list");
            var $mck_group_update_panel = $applozic("#mck-group-update-panel");
            var $mck_tab_message_option = $applozic(".mck-tab-message-option");
            var $mck_group_create_title = $applozic("#mck-group-create-title");
            var $mck_group_menu_options = $applozic(".mck-group-menu-options");
            var $mck_group_member_search = $applozic("#mck-group-member-search");
            var $mck_btn_group_icon_save = $applozic("#mck-btn-group-icon-save");
            var $mck_group_info_icon_box = $applozic("#mck-group-info-icon-box");
            var $mck_group_admin_options = $applozic(".mck-group-admin-options");
            var $mck_group_add_member_box = $applozic("#mck-group-add-member-box");
            var $mck_msg_inner = $applozic("#mck-message-cell .mck-message-inner");
            var $mck_group_title = $applozic("#mck-group-name-sec .mck-group-title");
            var $mck_group_create_icon_box = $applozic("#mck-group-create-icon-box");
            var $mck_group_info_icon_loading = $applozic("#mck-group-info-icon-loading");
            var $mck_gm_search_box = $applozic("#mck-gm-search-box");
            var $mck_group_member_search_list = $applozic("#mck-group-member-search-list");
            var $mck_group_create_icon_loading = $applozic("#mck-group-create-icon-loading");
            var $mck_group_info_icon = $applozic("#mck-group-info-icon-box .mck-group-icon");
            var $mck_group_create_icon = $applozic("#mck-group-create-icon-box .mck-group-icon");
            var $mck_group_create_overlay_box = $applozic("#mck-group-create-icon-box .mck-overlay-box");
            var $mck_gc_overlay_label = $applozic("#mck-gc-overlay-label");
            var groupContactbox = '<li id="li-gm-${contHtmlExpr}" class="${contIdExpr} mck-li-group-member" data-mck-id="${contIdExpr}" data-role="${roleVal}" data-alpha="${contFirstAlphaExpr}">' +
                '<div class="mck-row mck-group-member-info" title="${contNameExpr}">' +
                '<div class="blk-lg-3">{{html contImgExpr}}</div>' + '<div class="blk-lg-9">' +
                '<div class="mck-row">' +
                '<div class="blk-lg-8 mck-cont-name mck-truncate"><strong>${contNameExpr}</strong></div>' +
                '<div class="blk-lg-4 mck-group-admin-text move-right vis"><span id="${contHtmlExpr}-role">${roleExpr}</span></div></div>' +
                '<div class="mck-row">' +
                '<div class="blk-lg-8 mck-truncate mck-last-seen-status" title="${contLastSeenExpr}">${contLastSeenExpr}</div>' +
                '<div class="blk-lg-4 mck-group-admin-options move-right ${enableAdminMenuExpr}">' +
                '<div class="mck-menu-box n-vis"><div class="mck-dropdown-toggle mck-group-admin-menu-toggle mck-text-center" data-toggle="mckdropdown" aria-expanded="true">' +
                '<span class="mck-caret"></span></div>' +
                '<ul id="mck-group-admin-menu" class="mck-dropdown-menu mck-group-admin-menu mck-tab-menu-box menu-right" role="menu">' +
                '<li>' +
                '<a href="#" target="_self" class="mck-btn-remove-member menu-item" title="${removeMemberLabel}">${removeMemberLabel}</a>' +
                '</li>' +
                '<li>' +
                '<a href="#" target="_self" class="mck-btn-change-role menu-item" title="${changeRoleLabel}">${changeRoleLabel}</a>' +
                '</li>' + '</ul></div></div>' +
                '</div>' +
                '<div id="mck-group-change-role-box" class="mck-row mck-group-change-role-box n-vis">' +
                '<div class="blk-lg-4"><div class="mck-label">Select role </div></div>' +
                '<div class="blk-lg-8 move-right">' +
                '<select id="mck-change-role-type" class="mck-select">' +
                '<option value="0">User</option>' +
                '<option value="1">Admin</option>' +
                '<option value="2">Moderator</option>' +
                '<option value="3" selected>Member</option>' +
                '</select>' +
                '</div></div></div></div></li>';
            var groupMemberSearchContact = '<li id="li-${contHtmlExpr}" class="${contIdExpr} mck-li-group-member" data-mck-id="${contIdExpr}">' + '<a class="mck-add-to-group" href="#" target="_self" data-mck-id="${contIdExpr}">' + '<div class="mck-row" title="${contNameExpr}">' + '<div class="blk-lg-3">{{html contImgExpr}}</div>' + '<div class="blk-lg-9">' + '<div class="mck-row"><div class="blk-lg-12 mck-cont-name mck-truncate"><strong>${contNameExpr}</strong></div></div>' + '<div class="mck-row"><div class="blk-lg-12 mck-truncate mck-last-seen-status" title="${contLastSeenExpr}">${contLastSeenExpr}</div></div>' + '</div></div></a></li>';
            $applozic.template("groupMemberTemplate", groupContactbox);
            $applozic.template("groupMemberSearchTemplate", groupMemberSearchContact);
            var MAX_GROUP_NAME_SIZE = 30;
            $applozic('.mck-group-name-box div[contenteditable]').keypress(function(e) {
                if (e.which === 8 || e.keyCode === 37 || e.keyCode === 38 || e.keyCode === 39 || e.keyCode === 40 || (e.ctrlKey && e.which === 97)) {
                    return true;
                } else if (e.keyCode === 13 && !(e.shiftKey || e.ctrlKey)) {
                    if ($applozic(e.target).hasClass('mck-group-create-title')) {
                        _this.submitCreateGroup();
                        return false;
                    } else {
                        return false;
                    }
                } else {
                    return MAX_GROUP_NAME_SIZE > this.innerHTML.length;
                }
            }).on('paste', function(e) {
                var $this = this;
                setTimeout(function() {
                    var len = $this.innerText.length;
                    if (len > MAX_GROUP_NAME_SIZE) {
                        $this.innerHTML = $this.innerText.substring(0, MAX_GROUP_NAME_SIZE);
                        mckUtils.setEndOfContenteditable($this);
                    }
                    return false;
                }, 'fast');
            }).on('drop', function(e) {
                e.preventDefault();
                e.stopPropagation();
            });
            $applozic(d).on('click', '.mck-btn-change-role', function(e) {
                e.preventDefault();
                var $changeRoleBox = $applozic(this).parents('.mck-li-group-member').find('.mck-group-change-role-box');
                var role = $applozic(this).parents('.mck-li-group-member').data('role');
                $changeRoleBox.find('select').val(role);
                $changeRoleBox.removeClass('n-vis').addClass('vis');
                $mck_group_update_panel.removeClass('n-vis').addClass('vis');

            });
            $mck_btn_group_update.on('click', function() {
                var users = [];
                $applozic(".mck-group-change-role-box.vis").each(function(i, elm) {
                    var $this = $applozic(this);
                    var newRole = parseInt($this.find('select').val());
                    var role = $this.parents('.mck-li-group-member').data('role');
                    if (newRole !== role) {
                        var user = {
                            userId: $this.parents('.mck-li-group-member').data('mck-id'),
                            role: newRole
                        }
                        users.push(user);
                    }
                });
                if (users.length > 0) {
                    var currTabId = $mck_msg_inner.data('mck-id');
                    var isGroupTab = $mck_msg_inner.data('isgroup');
                    if (currTabId && isGroupTab) {
                        $mck_btn_group_update.attr('disabled', true).html(MCK_LABELS['group.info.updating']);
                        var params = {
                            groupId: currTabId,
                            users: users,
                            apzCallback: mckGroupLayout.onUpdateGroupInfo
                        }
                        mckGroupService.updateGroupInfo(params);
                    }
                }
								var $mck_group_change_role_box = $applozic("#mck-group-change-role-box");
                $mck_group_change_role_box.removeClass('vis').addClass('n-vis');
            });
            $applozic("#mck-group-info-icon-box .mck-overlay").on('click', function(e) {
                $mck_group_icon_change.trigger('click');
            });
            $applozic('#mck-group-create-icon-box .mck-overlay').on('click', function(e) {
                $mck_group_icon_upload.trigger('click');
            });
            $applozic(d).on('mouseenter', '.mck-group-create-icon-box.mck-hover-on', function() {
                $applozic(this).find('.mck-overlay-box').removeClass('n-vis');
            }).on('mouseleave', '.mck-group-create-icon-box.mck-hover-on', function() {
                var $this = $applozic(this);
                if ($this.find('.mck-group-icon-default').length === 0) {
                    $this.find('.mck-overlay-box').addClass('n-vis');
                }
            });
            $applozic(d).on('mouseenter', '.mck-group-info-icon-box.mck-hover-on', function() {
                $applozic(this).find('.mck-overlay-box').removeClass('n-vis');
            }).on('mouseleave', '.mck-group-info-icon-box.mck-hover-on', function() {
                $applozic(this).find('.mck-overlay-box').addClass('n-vis');
            });
            $mck_group_name_edit.on('click', function() {
                $mck_group_title.attr('contenteditable', true).focus();
                mckUtils.setEndOfContenteditable($mck_group_title[0]);
                $mck_group_name_save.removeClass('n-vis').addClass('vis');
                $mck_group_name_edit.removeClass('vis').addClass('n-vis');
            });
            $mck_group_name_save.on('click', function() {
                var groupName = $applozic.trim($mck_group_title.text());
                if (groupName.length > 0) {
                    var currTabId = $mck_msg_inner.data('mck-id');
                    var isGroupTab = $mck_msg_inner.data('isgroup');
                    if (currTabId && isGroupTab) {
                        $mck_group_name_edit.removeClass('n-vis').addClass('vis');
                        $mck_group_name_save.removeClass('vis').addClass('n-vis');
                        $mck_group_title.attr('contenteditable', false);
                        var params = {
                            groupId: currTabId,
                            name: groupName,
                            apzCallback: mckGroupLayout.onUpdateGroupInfo
                        }
                        mckGroupService.updateGroupInfo(params);
                    }
                } else {
                    $mck_group_title.addClass('mck-req-border');
                }
            });
            $mck_btn_group_icon_save.on('click', function() {
                var iconUrl = $mck_group_info_icon.data('iconurl');
                if (iconUrl) {
                    var currTabId = $mck_msg_inner.data('mck-id');
                    var isGroupTab = $mck_msg_inner.data('isgroup');
                    if (currTabId && isGroupTab) {
                        setTimeout(function() {
                            $mck_btn_group_icon_save.removeClass('vis').addClass('n-vis');
                        }, 1000);
                        $mck_group_info_icon.data('iconurl', '');
                        var params = {
                            groupId: currTabId,
                            imageUrl: iconUrl,
                            apzCallback: mckGroupLayout.onUpdateGroupInfo
                        }
                        mckGroupService.updateGroupInfo(params);
                    }
                } else {
                    $mck_group_title.addClass('mck-req-border');
                }
            });
            $mck_btn_group_create.on('click', function() {
                _this.submitCreateGroup();
            });
            _this.submitCreateGroup = function() {
                var groupName = $applozic.trim($mck_group_create_title.text());
                var groupType = $mck_group_create_type.val();
                var iconUrl = $mck_group_create_icon.data('iconurl');
                if (groupName.length > 0) {
                    var params = {
                        groupName: groupName
                    }
                    if (groupType) {
                        groupType = parseInt(groupType);
                        if (GROUP_TYPE_MAP.indexOf(groupType) !== -1) {
                            params.type = groupType;
                        }
                    }
                    if (iconUrl) {
                        params.groupIcon = iconUrl;
                    }
                    $mck_group_create_icon.data('iconurl', '');
                    params.isInternal = true;
                    $mck_btn_group_create.attr('disabled', true).html(MCK_LABELS['group.create.submit']);
                    mckMessageService.getGroup(params);
                } else {
                    $mck_group_create_title.addClass('mck-req-border');
                }
            };
   _this.loadGroups = function(response) {
                var groups = response.data;
                MCK_GROUP_ARRAY.length = 0;
                $applozic.each(groups, function(i, group) {
                    if ((typeof group.id !== 'undefined')) {
                        var group = mckGroupUtils.addGroup(group);
                        MCK_GROUP_ARRAY.push(group);
                    }
                });
            };


            _this.getDeletedAtTime = function(groupId) {
                if (typeof MCK_GROUP_MAP[groupId] === 'object') {
                    var group = MCK_GROUP_MAP[groupId];
                    return group['deletedAtTime'];
                }
            };

            _this.validateOpenGroupUser = function(group) {
                if (group.type === 6) {
                    var isGroupMember = mckGroupService.authenticateGroupUser(group);
                    if (!isGroupMember) {
                        if (MCK_OPEN_GROUP_SETTINGS.disableChatForNonGroupMember) {
                            var text = MCK_OPEN_GROUP_SETTINGS.defaultChatDisabledMessage;
                            if (!text) {
                                text = 'Chat disabled';
                            }
                            $mck_msg_error.html(text);
                            $mck_msg_error.removeClass('n-vis').addClass('vis').addClass('mck-no-mb');
                            $mck_msg_form.removeClass('vis').addClass('n-vis');
                            $mck_tab_title.removeClass('mck-tab-title-w-status');
                            $mck_tab_status.removeClass('vis').addClass('n-vis');
                        }
                        $mck_group_menu_options.removeClass('vis').addClass('n-vis');
                        $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                        $mck_tab_option_panel.removeClass('vis').addClass('n-vis');
                        if (typeof OPEN_GROUP_SUBSCRIBER_MAP[group.contactId] === 'undefined') {
                            window.Applozic.ALSocket.subscribeToOpenGroup(group);
                        }
                    }
                    if (group.adminName === MCK_USER_ID) {
                        if (MCK_OPEN_GROUP_SETTINGS.deleteChatAccess === 0) {
                            $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                        }
                    } else {
                        if (!MCK_OPEN_GROUP_SETTINGS.allowInfoAccessGroupMembers) {
                            $mck_group_menu_options.removeClass('vis').addClass('n-vis');
                        }
                        if (MCK_OPEN_GROUP_SETTINGS.deleteChatAccess !== 2) {
                            $mck_tab_message_option.removeClass('vis').addClass('n-vis');
                        }
                        if (!MCK_OPEN_GROUP_SETTINGS.allowInfoAccessGroupMembers && MCK_OPEN_GROUP_SETTINGS.deleteChatAccess !== 2) {
                            $mck_tab_option_panel.removeClass('vis').addClass('n-vis');
                        }
                    }
                    return false;
                }
                return true;
            };
            _this.addGroupStatus = function(group) {
                var isGroupLeft = _this.isGroupLeft(group);
                if (group.type !== 6 && (isGroupLeft || IS_GROUP_SUBTITLE_HIDDEN)) {
                    if (isGroupLeft) {
                        mckGroupLayout.onGroupLeft('', {
                            groupId: group.contactId
                        });
                    }
                    $mck_tab_title.removeClass('mck-tab-title-w-status');
                    $mck_tab_status.removeClass('vis').addClass('n-vis');
                } else if (group.members.length > 0) {
                    var groupMembers = '';
                    var isGroupMember = false;
                    var subtitleLength = (group.members.length <= 30) ? group.members.length : 25;
                    for (var i = 0; i < subtitleLength; i++) {
                        if (MCK_USER_ID === '' + group.members[i] || (group.removedMembersId.indexOf(group.members[i]) !== -1)) {
                            isGroupMember = true;
                            continue;
                        }
                        var contact = mckMessageLayout.fetchContact('' + group.members[i]);
                        var name = mckMessageLayout.getTabDisplayName(contact.contactId, false);
                        groupMembers += ' ' + name + ',';
                    }
                    if (group.type !== 5 && group.type !== 6 || (isGroupMember && group.type !== 5)) {
                        groupMembers += MCK_LABELS['you'];
                    }
                    if (group.members.length > 30) {
                        groupMembers += ' and ' + (group.members.length - 25) + ' more';
                    }
                    groupMembers = groupMembers.replace(/,\s*$/, '');
                    $mck_tab_status.html(groupMembers);
                    $mck_tab_status.attr('title', groupMembers);
                    $mck_tab_status.removeClass('n-vis').addClass('vis');
                    $mck_tab_title.addClass('mck-tab-title-w-status');
                    $mck_group_menu_options.removeClass('n-vis').addClass('vis');
                } else {
                    $mck_tab_title.removeClass('mck-tab-title-w-status');
                    $mck_tab_status.removeClass('vis').addClass('n-vis');
                }
                if (group.type === 7) {
                    $mck_tab_status.html('');
                    $mck_group_menu_options.removeClass('vis').addClass('n-vis');
                }
            };
            _this.disableGroupTab = function() {
                $mck_msg_error.html(MCK_LABELS['group.chat.disabled']);
                $mck_msg_error.removeClass('n-vis').addClass('vis').addClass('mck-no-mb');
                $mck_msg_form.removeClass('vis').addClass('n-vis');
                $mck_tab_title.removeClass('mck-tab-title-w-status');
                $mck_tab_status.removeClass('vis').addClass('n-vis');
            };
            _this.isGroupLeft = function(group) {
                var isGroupLeft = false;
                if (group.removedMembersId && group.removedMembersId.length > 0) {
                    $applozic.each(group.removedMembersId, function(i, removedMemberId) {
                        if (removedMemberId === MCK_USER_ID) {
                            isGroupLeft = true;
                        }
                    });
                }
                return isGroupLeft;
            };
            _this.onGroupLeft = function(response, params) {
                $mck_loading.removeClass('vis').addClass('n-vis');
                if (typeof response === 'object') {
                    if (response.status === 'error') {
                        alert('Unable to process your request. ' + response.errorMessage);
                        return;
                    }
                }
                var groupId = params.groupId;
                if ($mck_group_info_tab.hasClass('vis')) {
                    var currGroupId = $mck_group_info_tab.data('mck-id');
                    if (groupId === currGroupId) {
                        $mck_group_back_link.trigger('click');
                    }
                } else if ($mck_sidebox_content.hasClass('vis')) {
                    var currTabId = $mck_msg_inner.data('mck-id');
                    var isGroupTab = $mck_msg_inner.data('isgroup');
                    if (currTabId === groupId.toString() && isGroupTab) {
                        $mck_group_menu_options.removeClass('vis').addClass('n-vis');
                        _this.disableGroupTab();
                    }
                }
            };
            _this.onAddedGroupMember = function(response, params) {
                $mck_loading.removeClass('vis').addClass('n-vis');
                if (typeof response === 'object') {
                    if (response.status === 'error') {
                        alert('Unable to process your request. ' + response.errorMessage);
                        return;
                    }
                }
                var groupId = params.groupId;
                var userId = params.userId;
                var group = '';
                if (groupId) {
                    group = mckGroupUtils.getGroup(groupId)
                } else if (params.clientGroupId) {
                    group = mckGroupUtils.getGroupByClientGroupId(params.clientGroupId);
                }
                if (typeof group === 'object') {
                    group =mckGroupService.addMemberToGroup(group, userId);
                    if ($mck_group_info_tab.hasClass('vis')) {
                        var currGroupId = $mck_group_info_tab.data('mck-id');
                        if (groupId === currGroupId) {
                            var contact = mckMessageLayout.fetchContact('' + userId);
                            if ($applozic('#li-gm-' + contact.htmlId).length === 0) {
                                _this.addGroupMember(group, contact);
                            }
                            _this.sortGroupMemberHtmlList();
                            _this.enableGroupAdminMenuToggle();
                        }
                    } else if ($mck_sidebox_content.hasClass('vis')) {
                        var currTabId = $mck_msg_inner.data('mck-id');
                        var isGroupTab = $mck_msg_inner.data('isgroup');
                        if (currTabId === groupId.toString() && isGroupTab) {
                            _this.addGroupStatus(group);
                        }
                    }
                } else {
                    mckGroupService.getGroupFeed({
                        'groupId': groupId,
                        'clientGroupId': params.clientGroupId,
                        'apzCallback': mckGroupLayout.onGroupFeed
                    });
                }
            };
            _this.onRemovedGroupMember = function(response, params) {
                $mck_loading.removeClass('vis').addClass('n-vis');
                if (typeof response === 'object') {
                    if (response.status === 'error') {
                        alert('Unable to process your request. ' + response.errorMessage);
                        return;
                    }
                }
                var groupId = params.groupId;
                var userId = params.userId;
                var group = '';
                if (groupId) {
                    group = mckGroupUtils.getGroup(groupId)
                } else if (params.clientGroupId) {
                    group = mckGroupUtils.getGroupByClientGroupId(params.clientGroupId);
                }
                if (typeof group === 'object') {
                    group = mckGroupService.removeMemberFromGroup(group, userId);
                    if ($mck_group_info_tab.hasClass('vis')) {
                        var currGroupId = $mck_group_info_tab.data('mck-id');
                        if (groupId === currGroupId) {
                            var contact = mckMessageLayout.fetchContact('' + userId);
                            var $liRemovedMember = $applozic('#li-gm-' + contact.htmlId);
                            if ($liRemovedMember.length > 0) {
                                $liRemovedMember.remove();
                            }
                        }
                    } else if ($mck_sidebox_content.hasClass('vis')) {
                        var currTabId = $mck_msg_inner.data('mck-id');
                        var isGroupTab = $mck_msg_inner.data('isgroup');
                        if (currTabId === groupId.toString() && isGroupTab) {
                            _this.addGroupStatus(group);
                        }
                    }
                } else {
                    mckGroupService.getGroupFeed({
                        'groupId': groupId,
                        'clientGroupId': params.clientGroupId,
                        'apzCallback': mckGroupLayout.onGroupFeed
                    });
                }
            };
            _this.onGroupFeed = function(response, params) {
                $mck_loading.removeClass('vis').addClass('n-vis');
                if (response.status === 'success') {
                    var groupFeed = response.data;
                    var conversationPxy = groupFeed.conversationPxy;
                    var group = mckGroupUtils.getGroup(groupFeed.id);
                    if (groupFeed.deletedAtTime) {
                        $mck_msg_error.html(MCK_LABELS['group.deleted']);
                        $mck_msg_error.removeClass('n-vis').addClass('vis').addClass('mck-no-mb');
                        $mck_msg_form.removeClass('vis').addClass('n-vis');
                    }
                    var tabConvArray = new Array();
                    if (typeof conversationPxy === "object") {
                        MCK_CONVERSATION_MAP[conversationPxy.id] = conversationPxy;
                        MCK_TOPIC_CONVERSATION_MAP[conversationPxy.topicId] = [conversationPxy.id];
                        if (conversationPxy.topicDetail) {
                            MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId] = $applozic.parseJSON(conversationPxy.topicDetail);
                        }
                        tabConvArray.push(conversationPxy);
                    }
                    if (tabConvArray.length > 0) {
                        MCK_TAB_CONVERSATION_MAP[params.groupId] = tabConvArray;
                    }

                    alUserService.loadUserProfiles(groupFeed.membersId, function(userIds, userIdArray){
											$applozic.each(userIds, function(i, userId) {
								        if (typeof mckMessageLayout.getContact(userId) === 'undefined') {
															userIdArray.push(userId);
													}
											});
											mckContactService.getUsersDetail(userIdArray, { 'async': false });
										});

                    if (params.isMessage && typeof params.message === 'object') {
                        mckMessageLayout.populateMessage(params.messageType, params.message, params.notifyUser);
                    }
                    if (params.isReloadTab) {
                        _this.reloadGroupTab(group);
                    }
                }
            };
            _this.onUpdateGroupInfo = function(response, params) {
                $mck_loading.removeClass('vis').addClass('n-vis');
                $mck_btn_group_update.attr('disabled', false).html('Update');
                $mck_group_update_panel.removeClass('vis').addClass('n-vis');
                if (typeof response === 'object') {
                    if (response.status === 'error') {
                        alert('Unable to process your request. ' + response.errorMessage);
                        return;
                    }
                }
                var groupId = params.groupId;
                var groupInfo = params.groupInfo;
                var group = mckGroupUtils.getGroup(groupId);
                if (params.users) {
                    for (var index in params.users) {
                        document.getElementById(params.users[index].userId+'-role').innerHTML=ROLE_MAP[params.users[index].role];
                        if (params.users[index].userId) {
                            group.users[params.users[index].userId] = params.users[index];
                        }
                    }
                }
                if (typeof group === 'object' && groupInfo) {
                    if (groupInfo.imageUrl) {
                        group.imageUrl = groupInfo.imageUrl;
                    }
                    if (groupInfo.newName) {
                        group.displayName = groupInfo.newName;
                    }
										if (groupInfo.metadata) {
					   						group.metadata = groupInfo.metadata;
										}
                    if (groupInfo.users && groupInfo.users.length > 0) {
                        $applozic.each(groupInfo.users, function(i, user) {
                            if (user.userId) {
                                group.users[user.userId] = user;
                            }
                        });
                    }
                    if ($mck_group_info_tab.hasClass('vis')) {
                        if (groupInfo.imageUrl) {
                            $mck_group_info_icon.html(mckGroupService.getGroupImage(group.imageUrl));
                        }
                        $mck_group_title.html(group.displayName);
                        if (groupInfo.users && groupInfo.users.length > 0) {
                            $mck_group_member_List.html('');
                            _this.addMembersToGroupInfoList(group);
                            (group.adminName === MCK_USER_ID) ? $mck_group_add_member_box.removeClass('n-vis').addClass('vis'): $mck_group_add_member_box.removeClass('vis').addClass('n-vis');
                        }
                    } else if ($mck_sidebox_content.hasClass('vis')) {
                        var currTabId = $mck_msg_inner.data('mck-id');
                        var isGroupTab = $mck_msg_inner.data('isgroup');
                        if (currTabId === groupId.toString() && isGroupTab) {
                            $mck_tab_title.html(group.displayName);
                        } else {
                            if ($applozic("#li-group-" + group.htmlId).length > 0) {
                                $applozic("#li-group-" + group.htmlId + " .mck-cont-name strong").html(group.displayName);
                                if (groupInfo.imageUrl) {
                                    $applozic("#li-group-" + group.htmlId + " .blk-lg-3").html("<img src=' " + group.imageUrl + "'>");
                                }
                            }
                        }
                    }
                    MCK_GROUP_MAP[group.contactId] = group;
                }
            };
            _this.getGroupFeedFromMessage = function(params) {
                var message = params.message;
                if (message) {
                    params.groupId = message.groupId;
                    params.isMessage = true;
                    if (message.conversationId) {
                        var conversationPxy = MCK_CONVERSATION_MAP[message.conversationId];
                        if ((typeof conversationPxy !== 'object') || (typeof MCK_TOPIC_DETAIL_MAP[conversationPxy.topicId] !== 'object')) {
                            params.conversationId = message.conversationId;
                        }
                    }
                    params.apzCallback = mckGroupLayout.onGroupFeed;
                    mckGroupService.getGroupFeed(params);
                }
            };
            _this.reloadGroupTab = function(group) {
                var currTabId = $mck_msg_inner.data('mck-id');
                var isGroupTab = $mck_msg_inner.data('isgroup');
                if (currTabId === group.contactId.toString() && isGroupTab) {
                    _this.addGroupStatus(group);
                }
            };
            _this.loadGroupTab = function(response) {
                if (response.status === 'error') {
                    alert("Unable to process your request. " + response.errorMessage);
                } else {
                    var group = response.data;
                    mckMessageLayout.loadTab({
                        tabId: group.contactId,
                        'isGroup': true
                    });
                    $applozic("#mck-search").val('');
                }
            };
            _this.addMembersToGroupInfoList = function(group) {
                var userIdArray = group.members;
                userIdArray.sort();
                $mck_group_member_List.html('');
                $applozic.each(userIdArray, function(i, userId) {
                    if (userId) {
                        var contact = mckMessageLayout.fetchContact('' + userId);
                        if ($applozic('#li-gm-' + contact.htmlId).length === 0) {
                          _this.addGroupMember(group, contact);
                        }
                    }
                });
                _this.sortGroupMemberHtmlList();
                _this.enableGroupAdminMenuToggle();
            };
            _this.isAdminUser = function(group) {
                if (typeof group === 'object') {
                    for (var index in group.users) {
                        var user = group.users[index];
                        if (user.userId == MCK_USER_ID) {
                            return (user.role == 1);
                        }
                    }
                }
                return false;
            };
            _this.enableGroupAdminMenuToggle = function() {
                $applozic('.mck-group-member-info').bind("mouseenter", function() {
                    $applozic(this).find('.mck-menu-box').removeClass('n-vis');
                }).bind("mouseleave", function() {
                    $applozic(this).find('.mck-menu-box').removeClass('open').addClass('n-vis');
                });
            };
          	_this.addGroupMember = function(group, contact) {
                var isGroupAdminExpr = 'n-vis';
                var enableAdminMenuExpr = 'n-vis';
                var groupUser = group.users[contact.contactId];
                var roleExpr = MCK_LABELS['member'];
                var roleValue = 3;
                if (groupUser && typeof groupUser.role !== 'undefined') {
                    roleValue = groupUser.role;
                    roleExpr = ROLE_MAP[groupUser.role];
                }
                var displayName = mckMessageLayout.getTabDisplayName(contact.contactId, false);
                if (contact.contactId === group.adminName) {
                    isGroupAdminExpr = "vis";
                }
                if (group.adminName === MCK_USER_ID) {
                    enableAdminMenuExpr = "vis";
                }
                if (contact.contactId === MCK_USER_ID) {
                    displayName = MCK_LABELS['you'];
                    enableAdminMenuExpr = 'n-vis';
                }
                var imgsrctag = mckMessageLayout.getContactImageLink(contact, displayName);
                var lastSeenStatus = '';
                if (!alUserService.MCK_BLOCKED_TO_MAP[contact.contactId]) {
                    if (w.MCK_OL_MAP[contact.contactId]) {
                        lastSeenStatus = MCK_LABELS['online'];
                    } else if (MCK_LAST_SEEN_AT_MAP[contact.contactId]) {
                        lastSeenStatus = mckDateUtils.getLastSeenAtStatus(MCK_LAST_SEEN_AT_MAP[contact.contactId]);
                    }
                }
                var contactList = [{
                    roleExpr: roleExpr,
                    roleVal: roleValue,
                    removeMemberLabel: MCK_LABELS['remove.member'],
                    changeRoleLabel: MCK_LABELS['change.role'],
                    contHtmlExpr: contact.htmlId,
                    contIdExpr: contact.contactId,
                    contImgExpr: imgsrctag,
                    contLastSeenExpr: lastSeenStatus,
                    contNameExpr: displayName,
                    contFirstAlphaExpr: displayName.charAt(0).toUpperCase(),
                    isAdminExpr: isGroupAdminExpr,
                    enableAdminMenuExpr: enableAdminMenuExpr
                }];
                $applozic.tmpl('groupMemberTemplate', contactList).appendTo('#mck-group-member-list');
            };

            _this.addMembersToGroupSearchList = function() {
                var groupId = $mck_msg_inner.data('mck-id');
                var isGroup = $mck_msg_inner.data('isgroup');
                if (isGroup) {
                    var group = mckGroupUtils.getGroup(groupId);
                    var contactArray = MCK_GROUP_MEMBER_SEARCH_ARRAY;
                    var searchArray = [];
                    var friendListGroupName= ALStorage.getFriendListGroupName();
                    var friendListGroupType = ALStorage.getFriendListGroupType();

                        if(friendListGroupName && friendListGroupType){
                        contactArray= mckContactService.getFriendList(friendListGroupName,friendListGroupType);
                       }
                        if(friendListGroupName && (!friendListGroupType)){
                     contactArray= mckContactService.getFriendList(friendListGroupName);
                    }
                    contactArray = contactArray.filter(function(item, pos) {
                        return contactArray.indexOf(item) === pos;
                    });
                    contactArray.sort();
                    var groupMemberArray = group.members;
                    $applozic.each(contactArray, function(i, userId) {
                        if (userId) {
                            var contact = mckMessageLayout.fetchContact('' + userId);
                            if (groupMemberArray.indexOf(contact.contactId) === -1 || (groupMemberArray.indexOf(contact.contactId) !== -1 && group.removedMembersId.indexOf(contact.contactId) !== -1)) {
													//		mckGroupService.addGroupSearchMember(contact);
													if ($applozic('#li-user-' + contact.htmlId).length === 0) {
															mckGroupLayout.addGroupSearchMember(contact);
													}
												searchArray.push(contact);
                            }
                        }
                    });
                    _this.enableGroupAdminMenuToggle();
                    (searchArray.length > 0) ? $mck_no_gsm_text.removeClass('vis').addClass('n-vis'): $mck_no_gsm_text.removeClass('n-vis').addClass('vis');
                    mckMessageLayout.initAutoSuggest({
                        'contactsArray': searchArray,
                        '$searchId': $mck_group_member_search,
                        'isContactSearch': false
                    });
                }
                $mck_gms_loading.removeClass('vis').addClass('n-vis');
            };
           			_this.addGroupSearchMember = function(contact) {
                var displayName = mckMessageLayout.getTabDisplayName(contact.contactId, false);
                var imgsrctag = mckMessageLayout.getContactImageLink(contact, displayName);
                var contHtmlExpr = 'user-' + contact.htmlId;
                var lastSeenStatus = '';
                if (!alUserService.MCK_BLOCKED_TO_MAP[contact.contactId]) {
                    if (w.MCK_OL_MAP[contact.contactId]) {
                        lastSeenStatus = MCK_LABELS['online'];
                    } else if (MCK_LAST_SEEN_AT_MAP[contact.contactId]) {
                        lastSeenStatus = mckDateUtils.getLastSeenAtStatus(MCK_LAST_SEEN_AT_MAP[contact.contactId]);
                    }
                }
                var contactList = [{
                    contHtmlExpr: contHtmlExpr,
                    contIdExpr: contact.contactId,
                    contImgExpr: imgsrctag,
                    contLastSeenExpr: lastSeenStatus,
                    contNameExpr: displayName
                }];
                $applozic.tmpl('groupMemberSearchTemplate', contactList).appendTo('#mck-group-member-search-list');
            };

            _this.loadCreateGroupTab = function() {
                $mck_contacts_content.removeClass('vis').addClass('n-vis');
                $mck_sidebox_content.removeClass('vis').addClass('n-vis');
                $mck_sidebox_search.removeClass('vis').addClass('n-vis');
                $mck_group_info_tab.removeClass('vis').addClass('n-vis');
                $mck_group_create_icon_loading.removeClass('vis').addClass('n-vis');
                $mck_group_create_icon.data('iconurl', '');
                $mck_group_create_title.html('')
                $mck_group_create_overlay_box.removeClass('n-vis');
                $mck_gc_overlay_label.html(MCK_LABELS['add.group.icon']);
                $mck_group_create_icon.html(mckGroupService.getGroupDefaultIcon());
                $mck_group_create_tab.removeClass('n-vis').addClass('vis');
            };
            _this.loadGroupInfo = function(params) {
                if (params.groupId) {
                    $mck_group_title.attr('contenteditable', false);
                    $mck_group_name_save.removeClass('vis').addClass('n-vis');
                    $mck_group_name_edit.removeClass('n-vis').addClass('vis');
                    $mck_contacts_content.removeClass('vis').addClass('n-vis');
                    $mck_sidebox_content.removeClass('vis').addClass('n-vis');
                    $mck_sidebox_search.removeClass('vis').addClass('n-vis');
                    $mck_group_update_panel.removeClass('vis').addClass('n-vis');
                    $mck_group_create_tab.removeClass('vis').addClass('n-vis');
                    $mck_btn_group_icon_save.removeClass('vis').addClass('n-vis');
                    $mck_group_info_icon_loading.removeClass('vis').addClass('n-vis');
                    $mck_group_info_tab.removeClass('n-vis').addClass('vis');
                    $mck_group_info_tab.data('mck-id', params.groupId);
                    $mck_group_info_icon.data('iconurl', '');
                    if (params.conversationId) {
                        $mck_group_info_tab.data('mck-conversation-id', params.conversationId);
                    }
                    $mck_group_member_List.html('');
                    var group = mckGroupUtils.getGroup(params.groupId);
                    if (typeof group === 'object') {
                        $mck_group_info_icon.html(mckGroupService.getGroupImage(group.imageUrl));
                        $mck_group_title.html(group.displayName);
                        group.adminName = _this.isAdminUser(group) ? MCK_USER_ID : group.adminName;
                        _this.addMembersToGroupInfoList(group);
                        (group.adminName === MCK_USER_ID) ? $mck_group_add_member_box.removeClass('n-vis').addClass('vis'): $mck_group_add_member_box.removeClass('vis').addClass('n-vis');
                    } else {
                        mckGroupService.getGroupFeed({
                            'groupId': params.groupId,
                            'apzCallback': mckGroupLayout.onGroupFeed
                        });
                    }
                }
            };
            _this.sortGroupMemberHtmlList = function() {
                $applozic('#mck-group-member-list .mck-li-group-member').sort(function(a, b) {
                    return a.dataset.alpha > b.dataset.alpha;
                }).appendTo('#mck-group-member-list');
            };
            _this.addGroupMemberFromSearch = function(userId) {
                var groupId = $mck_group_info_tab.data('mck-id');
                if (typeof groupId !== 'undefined' && typeof userId !== 'undefined') {
                    var group = mckGroupUtils.getGroup(groupId);
                    if (typeof group === 'object' && MCK_USER_ID === group.adminName) {
                        alUserService.loadUserProfile(userId);

                        mckGroupService.addGroupMember({
                            'groupId': groupId,
                            'userId': userId,
                            'apzCallback': mckGroupLayout.onAddedGroupMember
                        });
                    } else {
                        $mck_group_admin_options.removeClass('vis').addClass('n-vis');
                    }
                }
                $mck_gm_search_box.mckModal('hide');
            };
        }

        function MckMapLayout() {
            var _this = this;

            var GEOCODER = '';
            var CURR_LOC_ADDRESS = '';
            var IS_LOC_SHARE_INIT = false;
            var $mck_my_loc = $applozic("#mck-my-loc");
            var $mck_loc_box = $applozic("#mck-loc-box");
            var $mck_loc_lat = $applozic("#mck-loc-lat");
            var $mck_loc_lon = $applozic("#mck-loc-lon");
            var $mck_btn_loc = $applozic("#mck-btn-loc");
            var $mck_footer = $applozic("#mck-sidebox-ft");
            var $mck_file_menu = $applozic("#mck-file-menu");
            var $mck_btn_attach = $applozic("#mck-btn-attach");
            var $mckMapContent = $applozic("#mck-map-content");
            var $mck_loc_address = $applozic("#mck-loc-address");
            _this.init = function() {
                if (IS_MCK_LOCSHARE && w.google && typeof(w.google.maps) === 'object') {
                    GEOCODER = new w.google.maps.Geocoder;
                    $mck_btn_attach.on('click', function() {
                        _this.fileMenuToggle();
                    });
                    $mck_btn_loc.on('click', function() {
                        if (IS_LOC_SHARE_INIT) {
                            $mck_loc_box.mckModal();
                        } else {
                            mckMapUtils.getCurrentLocation(_this.onGetCurrLocation, _this.onErrorCurrLocation);
                            IS_LOC_SHARE_INIT = true;
                        }

                    });
                }
                $mck_my_loc.on('click', function() {
                    mckMapUtils.getCurrentLocation(_this.onGetMyCurrLocation, _this.onErrorMyCurrLocation);
                });
            };
            _this.fileMenuReposition = function() {
                var offset = $mck_footer.offset();
                offset.bottom = w.innerHeight - (offset.top);
                $mck_file_menu.css({
                    bottom: (offset.bottom > 51) ? offset.bottom : 51,
                    right: 0
                });
            };
            _this.fileMenuToggle = function() {
                if ($mck_btn_attach.hasClass('on')) {
                    $mck_btn_attach.removeClass('on');
                    $mck_file_menu.hide();
                } else {
                    _this.fileMenuReposition();
                    $mck_btn_attach.addClass('on');
                    $mck_file_menu.show();
                }
            };
            _this.onGetCurrLocation = function(loc) {
                MCK_CURR_LATITIUDE = loc.coords.latitude;
                MCK_CURR_LONGITUDE = loc.coords.longitude;
                _this.openMapBox();
            };
            _this.onErrorCurrLocation = function() {
                MCK_CURR_LATITIUDE = 46.15242437752303;
                MCK_CURR_LONGITUDE = 2.7470703125;
                _this.openMapBox();
            };
            _this.onErrorMyCurrLocation = function(err) {
                alert("Unable to retrieve your location. ERROR(" + err.code + "): " + err.message);
            };
            _this.onGetMyCurrLocation = function(loc) {
                MCK_CURR_LATITIUDE = loc.coords.latitude;
                MCK_CURR_LONGITUDE = loc.coords.longitude;
                $mck_loc_lat.val(MCK_CURR_LATITIUDE);
                $mck_loc_lon.val(MCK_CURR_LONGITUDE);
                $mck_loc_lat.trigger('change');
                $mck_loc_lon.trigger('change');
                if (CURR_LOC_ADDRESS) {
                    $mck_loc_address.val(CURR_LOC_ADDRESS);
                } else if (GEOCODER) {
                    var latlng = {
                        lat: MCK_CURR_LATITIUDE,
                        lng: MCK_CURR_LONGITUDE
                    };
                    GEOCODER.geocode({
                        'location': latlng
                    }, function(results, status) {
                        if (status === "OK") {
                            if (results[1]) {
                                CURR_LOC_ADDRESS = results[1].formatted_address;
                            }
                        }
                    });
                }
            };
            _this.openMapBox = function() {
                $mckMapContent.locationpicker({
                    location: {
                        latitude: MCK_CURR_LATITIUDE,
                        longitude: MCK_CURR_LONGITUDE
                    },
                    radius: 0,
                    scrollwheel: true,
                    inputBinding: {
                        latitudeInput: $mck_loc_lat,
                        longitudeInput: $mck_loc_lon,
                        locationNameInput: $mck_loc_address
                    },
                    enableAutocomplete: true,
                    enableReverseGeocode: true,
                    onchanged: function(currentLocation) {
                        MCK_CURR_LATITIUDE = currentLocation.latitude;
                        MCK_CURR_LONGITUDE = currentLocation.longitude;
                    }
                });
                $mck_loc_box.on('shown.bs.mck-box', function() {
                    $mckMapContent.locationpicker('autosize');
                });
                $mck_loc_box.mckModal();
            };
        }

        function MckMapService() {
            var _this = this;

            var $mck_msg_to = $applozic("#mck-msg-to");
            var $mck_btn_loc = $applozic("#mck-btn-loc");
            var $mck_loc_box = $applozic('#mck-loc-box');
            var $mck_msg_sbmt = $applozic("#mck-msg-sbmt");
            var $mck_msg_error = $applozic("#mck-msg-error");
            var $mck_loc_submit = $applozic("#mck-loc-submit");
            var $mck_msg_response = $applozic("#mck-msg-response");
            var $mck_response_text = $applozic("#mck_response_text");
            var $mck_msg_inner = $applozic("#mck-message-cell .mck-message-inner");
            $mck_loc_submit.on("click", function() {
                var messagePxy = {
                    "type": 5,
                    "contentType": 2,
                    "message": w.JSON.stringify(mckMapUtils.getSelectedLocation())
                };
                var conversationId = $mck_msg_inner.data('mck-conversationid');
                var topicId = $mck_msg_inner.data('mck-topicid');
                if (conversationId) {
                    messagePxy.conversationId = conversationId;
                } else if (topicId) {
                    var conversationPxy = {
                        'topicId': topicId
                    };
                    var topicDetail = MCK_TOPIC_DETAIL_MAP[topicId];
                    if (typeof topicDetail === "object") {
                        conversationPxy.topicDetail = w.JSON.stringify(topicDetail);
                    }
                    messagePxy.conversationPxy = conversationPxy;
                }
                if ($mck_msg_inner.data("isgroup") === true) {
                    messagePxy.groupId = $mck_msg_to.val();
                } else {
                    messagePxy.to = $mck_msg_to.val();
                }
                $mck_msg_sbmt.attr('disabled', true);
                $mck_msg_error.removeClass('vis').addClass('n-vis');
                $mck_msg_error.html('');
                $mck_response_text.html('');
                $mck_msg_response.removeClass('vis').addClass('n-vis');
                mckMessageService.sendMessage(messagePxy);
                $mck_loc_box.mckModal('hide');
            });
        }

        function MckFileService() {
            var _this = this;

            var ONE_KB = 1024;
            var ONE_MB = 1048576;
            var UPLOAD_VIA = ['CREATE', 'UPDATE'];
            var $file_box = $applozic("#mck-file-box");
            var $mck_overlay = $applozic(".mck-overlay");
            var $mck_msg_sbmt = $applozic("#mck-msg-sbmt");
            var $mck_text_box = $applozic("#mck-text-box");
            var $mck_file_input = $applozic("#mck-file-input");
            var $mck_overlay_box = $applozic(".mck-overlay-box");
            var $mck_file_upload = $applozic(".mck-file-upload");
            var $mck_group_icon_upload = $applozic("#mck-group-icon-upload");
            var $mck_group_icon_change = $applozic("#mck-group-icon-change");
            var $mck_group_info_icon_box = $applozic("#mck-group-info-icon-box");
            var $mck_btn_group_icon_save = $applozic("#mck-btn-group-icon-save");
            var $mck_msg_inner = $applozic("#mck-message-cell .mck-message-inner");
            var $mck_group_create_icon_box = $applozic("#mck-group-create-icon-box");
            var $mck_group_info_icon_loading = $applozic("#mck-group-info-icon-loading");
            var $mck_group_create_icon_loading = $applozic("#mck-group-create-icon-loading");
            var $mck_group_info_icon = $applozic("#mck-group-info-icon-box .mck-group-icon");
            var $mck_group_create_icon = $applozic("#mck-group-create-icon-box .mck-group-icon");
            var $mck_gc_overlay_label = $applozic("#mck-gc-overlay-label");
            var FILE_PREVIEW_URL = "/rest/ws/aws/file/";
            var FILE_UPLOAD_URL = "/rest/ws/aws/file/url";
						var ATTACHMENT_UPLOAD_URL = "/rest/ws/upload/image";
            var FILE_AWS_UPLOAD_URL = "/rest/ws/upload/file";
            var FILE_DELETE_URL = "/rest/ws/aws/file/delete";
						var CUSTOM_FILE_UPLOAD_URL = '/files/upload/';
            var mck_filebox_tmpl = '<div id="mck-filebox-${fileIdExpr}" class="mck-file-box ${fileIdExpr}">' + '<div class="mck-file-expr">' + '<span class="mck-file-content blk-lg-8"><span class="mck-file-lb">{{html fileNameExpr}}</span>&nbsp;<span class="mck-file-sz">${fileSizeExpr}</span></span>' + '<span class="progress progress-striped active blk-lg-3" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"><span class="progress-bar progress-bar-success bar" stye></span></span>' + '<span class="move-right">' + '<button type="button" class="mck-box-close mck-remove-file" data-dismiss="div" aria-hidden="true">x</button>' + '</span></div></div>';
            $applozic.template("fileboxTemplate", mck_filebox_tmpl);
            _this.init = function() {
                $mck_file_upload.on('click', function() {
                    $mck_file_input.trigger('click');
                });
                $mck_group_icon_upload.on('change', function() {
                    var file = $applozic(this)[0].files[0];
                    _this.uplaodFileToAWS(file, UPLOAD_VIA[0]);
                    return false;
                });
                $mck_group_icon_change.on('change', function() {
                    var file = $applozic(this)[0].files[0];
                    _this.uplaodFileToAWS(file, UPLOAD_VIA[1]);
                    return false;
                });
								$mck_file_input.on('change', function () {
										var file = $applozic(this)[0].files[0];
										var params = {};
										params.file = file;
										params.name = file.name;
										if(MCK_CUSTOM_UPLOAD_SETTINGS === "awsS3Server"){
										_this.uploadAttachment2AWS(params);
										}
										else if (MCK_CUSTOM_UPLOAD_SETTINGS ===	"googleCloud") {
										_this.customFileUpload(params);
										}
										else if (MCK_CUSTOM_UPLOAD_SETTINGS ===	"customStorage"){
										_this.customStorageFileUpload(params);
										}
										else {
										_this.uploadFile(params);
										}
								});
                $applozic(d).on("click", '.mck-remove-file', function() {
                    var $currFileBox = $applozic(this).parents('.mck-file-box');
                    var currFileMeta = $currFileBox.data('mckfile');
                    $currFileBox.remove();
                    $mck_msg_sbmt.attr('disabled', false);
                    if ($file_box.find('.mck-file-box').length === 0) {
                        $file_box.removeClass('vis').addClass('n-vis');
                        $mck_text_box.attr("required", '');
                    }
                    if (typeof currFileMeta === 'object') {
                    alFileService.deleteFileMeta(currFileMeta.blobKey);
                        $applozic.each(FILE_META, function(i, fileMeta) {
                            if (typeof fileMeta !== 'undefined' && fileMeta.blobKey === currFileMeta.blobKey) {
                                FILE_META.splice(i, 1);
                            }
                        });
                    }
                });
            };

	          _this.audioRecoder = function(params) {
							if(MCK_CUSTOM_UPLOAD_SETTINGS === "awsS3Server"){
							_this.uploadAttachment2AWS(params);
							}
							else if (MCK_CUSTOM_UPLOAD_SETTINGS ===	"googleCloud") {
							_this.customFileUpload(params);
							}
							else if (MCK_CUSTOM_UPLOAD_SETTINGS ===	"customStorage"){
							_this.customStorageFileUpload(params);
							}
							else {
							_this.uploadFile(params);
							}
	            };

						_this.customFileUpload = function (params) {
							var file = params.file;
							var data = new FormData();

								var uploadErrors = [];
								if (typeof file === 'undefined') {
										return;
								}
								if ($applozic(".mck-file-box").length > 4) {
										uploadErrors.push("Can't upload more than 5 files at a time");
								}
								if (file['size'] > (MCK_FILEMAXSIZE * ONE_MB)) {
										uploadErrors.push("file size can not be more than " + MCK_FILEMAXSIZE + " MB");
								}
								if (uploadErrors.length > 0) {
										alert(uploadErrors.toString());
								} else {
										var randomId = mckUtils.randomId();
										var fileboxList = [{
														fileIdExpr: randomId,
														fileName: params.name,
														fileNameExpr: '<a href="#" target="_self" >' + params.name + '</a>',
														fileSizeExpr: alFileService.getFilePreviewSize(file.size)
												}];
										$applozic.tmpl("fileboxTemplate", fileboxList).appendTo('#mck-file-box');
										var $fileContainer = $applozic(".mck-file-box." + randomId);
										var $file_name = $applozic(".mck-file-box." + randomId + " .mck-file-lb");
										var $file_progressbar = $applozic(".mck-file-box." + randomId + " .progress .bar");
										var $file_progress = $applozic(".mck-file-box." + randomId + " .progress");
										var $file_remove = $applozic(".mck-file-box." + randomId + " .mck-remove-file");
										$file_progressbar.css('width', '0%');
										$file_progress.removeClass('n-vis').addClass('vis');
										$file_remove.attr("disabled", true);
										$mck_file_upload.attr("disabled", true);
										$file_box.removeClass('n-vis').addClass('vis');
										if (params.name === $applozic(".mck-file-box." + randomId + " .mck-file-lb a").html()) {
												var currTab = $mck_msg_inner.data('mck-id');
												var uniqueId = params.name + file.size;
												TAB_FILE_DRAFT[uniqueId] = currTab;
												$mck_msg_sbmt.attr('disabled', true);
												data.append('files[]', file);
												var xhr = new XMLHttpRequest();
												(xhr.upload || xhr).addEventListener('progress', function (e) {
														var progress = parseInt(e.loaded / e.total * 100, 10);
														$file_progressbar.css('width', progress + '%');
												});
												xhr.addEventListener('load', function (e) {
														var responseJson = $applozic.parseJSON(this.responseText);
														if (typeof responseJson === "object") {
																var file_meta = responseJson.fileMeta;
																var fileExpr = (typeof file_meta === "object") ? '<a href="' + file_meta.url + '" target="_blank">' + file_meta.name + '</a>' : '';
																var name = file_meta.name;
																var size = file_meta.size;
																var currTabId = $mck_msg_inner.data('mck-id');
																var uniqueId = name + size;
																var fileTabId = TAB_FILE_DRAFT[uniqueId];
																if (currTab !== currTabId) {
																		mckMessageLayout.updateDraftMessage(fileTabId, file_meta);
																		delete TAB_FILE_DRAFT[uniqueId];
																		return;
																}
																$file_remove.attr('disabled', false);
																$mck_file_upload.attr('disabled', false);
																$mck_msg_sbmt.attr('disabled', false);
																delete TAB_FILE_DRAFT[uniqueId];
																$file_name.html(fileExpr);
																$file_progress.removeClass('vis').addClass('n-vis');
																$applozic(".mck-file-box .progress").removeClass('vis').addClass('n-vis');
																$mck_text_box.removeAttr('required');
																FILE_META.push(file_meta);
																$fileContainer.data('mckfile', file_meta);
																$mck_file_upload.children('input').val('');
																return false;
														} else {
																$file_remove.attr("disabled", false);
																$mck_msg_sbmt.attr('disabled', false);
																// FILE_META
																// = '';
																$file_remove.trigger('click');
														}
												});
												var url = MCK_CUSTOM_URL + CUSTOM_FILE_UPLOAD_URL;

												xhr.open('post', url , true);
												xhr.setRequestHeader("UserId-Enabled", true);
                                                xhr.setRequestHeader("Authorization", "Basic " + AUTH_CODE);
                                                xhr.setRequestHeader("Application-User", "Basic " + AUTH_CODE);
												xhr.setRequestHeader("Application-Key", MCK_APP_ID);
												xhr.setRequestHeader("Device-Key", window.Applozic.ALSocket.USER_DEVICE_KEY);

												if (MCK_ACCESS_TOKEN) {
														xhr.setRequestHeader("Access-Token", MCK_ACCESS_TOKEN);
												}
												xhr.send(data);

										}
										return false;
								}
						};

						_this.customStorageFileUpload = function (params) {
							var file = params.file;
							var data = new FormData();

								var uploadErrors = [];
								if (typeof file === 'undefined') {
										return;
								}
								if ($applozic(".mck-file-box").length > 4) {
										uploadErrors.push("Can't upload more than 5 files at a time");
								}
								if (file['size'] > (MCK_FILEMAXSIZE * ONE_MB)) {
										uploadErrors.push("file size can not be more than " + MCK_FILEMAXSIZE + " MB");
								}
								if (uploadErrors.length > 0) {
										alert(uploadErrors.toString());
								} else {
										var randomId = mckUtils.randomId();
										var fileboxList = [{
														fileIdExpr: randomId,
														fileName: params.name,
														fileNameExpr: '<a href="#" target="_self" >' + params.name + '</a>',
														fileSizeExpr: alFileService.getFilePreviewSize(file.size)
												}];
										$applozic.tmpl("fileboxTemplate", fileboxList).appendTo('#mck-file-box');
										var $fileContainer = $applozic(".mck-file-box." + randomId);
										var $file_name = $applozic(".mck-file-box." + randomId + " .mck-file-lb");
										var $file_progressbar = $applozic(".mck-file-box." + randomId + " .progress .bar");
										var $file_progress = $applozic(".mck-file-box." + randomId + " .progress");
										var $file_remove = $applozic(".mck-file-box." + randomId + " .mck-remove-file");
										$file_progressbar.css('width', '0%');
										$file_progress.removeClass('n-vis').addClass('vis');
										$file_remove.attr("disabled", true);
										$mck_file_upload.attr("disabled", true);
										$file_box.removeClass('n-vis').addClass('vis');
										if (params.name === $applozic(".mck-file-box." + randomId + " .mck-file-lb a").html()) {
												var currTab = $mck_msg_inner.data('mck-id');
												var uniqueId = params.name + file.size;
												TAB_FILE_DRAFT[uniqueId] = currTab;
												$mck_msg_sbmt.attr('disabled', true);
												data.append('files[]', file);
												var xhr = new XMLHttpRequest();
												(xhr.upload || xhr).addEventListener('progress', function (e) {
														var progress = parseInt(e.loaded / e.total * 100, 10);
														$file_progressbar.css('width', progress + '%');
												});
												xhr.addEventListener('load', function (e) {
														var responseJson = $applozic.parseJSON(this.responseText);
														if (typeof responseJson === "object") {
																var file_meta = responseJson.fileMeta;
																var fileExpr = (typeof file_meta === "object") ? '<a href="' + file_meta.url + '" target="_blank">' + file_meta.name + '</a>' : '';
																var name = file_meta.name;
																var size = file_meta.size;
																var currTabId = $mck_msg_inner.data('mck-id');
																var uniqueId = name + size;
																var fileTabId = TAB_FILE_DRAFT[uniqueId];
																if (currTab !== currTabId) {
																		mckMessageLayout.updateDraftMessage(fileTabId, file_meta);
																		delete TAB_FILE_DRAFT[uniqueId];
																		return;
																}
																$file_remove.attr('disabled', false);
																$mck_file_upload.attr('disabled', false);
																$mck_msg_sbmt.attr('disabled', false);
																delete TAB_FILE_DRAFT[uniqueId];
																$file_name.html(fileExpr);
																$file_progress.removeClass('vis').addClass('n-vis');
																$applozic(".mck-file-box .progress").removeClass('vis').addClass('n-vis');
																$mck_text_box.removeAttr('required');
																FILE_META.push(file_meta);
																$fileContainer.data('mckfile', file_meta);
																$mck_file_upload.children('input').val('');
																return false;
														} else {
																$file_remove.attr("disabled", false);
																$mck_msg_sbmt.attr('disabled', false);
																// FILE_META
																// = '';
																$file_remove.trigger('click');
														}
												});
												var url = MCK_STORAGE_URL + CUSTOM_FILE_UPLOAD_URL;

												xhr.open('post', url , true);
												xhr.setRequestHeader("UserId-Enabled", true);
                                                xhr.setRequestHeader("Authorization", "Basic " + AUTH_CODE);
                                                xhr.setRequestHeader("Application-User", "Basic " + AUTH_CODE);
												xhr.setRequestHeader("Application-Key", MCK_APP_ID);
												xhr.setRequestHeader("Device-Key", window.Applozic.ALSocket.USER_DEVICE_KEY);

												if (MCK_ACCESS_TOKEN) {
														xhr.setRequestHeader("Access-Token", MCK_ACCESS_TOKEN);
												}
												xhr.send(data);

										}
										return false;
								}
						};

					  _this.uploadFile = function(params) {
                var file = params.file;
                var data = new Object();
                var uploadErrors = [];
                if (typeof file === 'undefined') {
                    return;
                }
                if ($applozic(".mck-file-box").length > 4) {
                    uploadErrors.push("Can't upload more than 5 files at a time");
                }
                if (file['size'] > (MCK_FILEMAXSIZE * ONE_MB)) {
                    uploadErrors.push("file size can not be more than " + MCK_FILEMAXSIZE + " MB");
                }
                if (uploadErrors.length > 0) {
                    alert(uploadErrors.toString());
                } else {
                    var randomId = mckUtils.randomId();
                    var fileboxList = [{
                        fileIdExpr: randomId,
                        fileName: params.name,
                        fileNameExpr: '<a href="#" target="_self">' + params.name + '</a>',
                        fileSizeExpr: alFileService.getFilePreviewSize(file.size)
                    }];
                    $applozic.tmpl("fileboxTemplate", fileboxList).appendTo('#mck-file-box');
                    var $fileContainer = $applozic(".mck-file-box." + randomId);
                    var $file_name = $applozic(".mck-file-box." + randomId + " .mck-file-lb");
                    var $file_progressbar = $applozic(".mck-file-box." + randomId + " .progress .bar");
                    var $file_progress = $applozic(".mck-file-box." + randomId + " .progress");
                    var $file_remove = $applozic(".mck-file-box." + randomId + " .mck-remove-file");
                    $file_progressbar.css('width', '0%');
                    $file_progress.removeClass('n-vis').addClass('vis');
                    $file_remove.attr("disabled", true);
                    $mck_file_upload.attr("disabled", true);
                    $file_box.removeClass('n-vis').addClass('vis');
                    if (params.name === $applozic(".mck-file-box." + randomId + " .mck-file-lb a").html()) {
                        var currTab = $mck_msg_inner.data('mck-id');
                        var uniqueId = params.name + file.size;
                        TAB_FILE_DRAFT[uniqueId] = currTab;
                        $mck_msg_sbmt.attr('disabled', true);
                        data.files = [];
                        data.files.push(file);
                        var xhr = new XMLHttpRequest();
                        (xhr.upload || xhr).addEventListener('progress', function(e) {
                            var progress = parseInt(e.loaded / e.total * 100, 10);
                            $file_progressbar.css('width', progress + '%');
                        });
                        xhr.addEventListener('load', function(e) {
                            var responseJson = $applozic.parseJSON(this.responseText);
                            if (typeof responseJson.fileMeta === "object") {
                                var file_meta = responseJson.fileMeta;
                                var fileExpr = alFileService.getFilePreviewPath(file_meta);
                                var name = file_meta.name;
                                var size = file_meta.size;
                                var currTabId = $mck_msg_inner.data('mck-id');
                                var uniqueId = name + size;
                                var fileTabId = TAB_FILE_DRAFT[uniqueId];
                                if (currTab !== currTabId) {
                                    mckMessageLayout.updateDraftMessage(fileTabId, file_meta);
                                    delete TAB_FILE_DRAFT[uniqueId];
                                    return;
                                }
                                $file_remove.attr('disabled', false);
                                $mck_file_upload.attr('disabled', false);
                                $mck_msg_sbmt.attr('disabled', false);
                                delete TAB_FILE_DRAFT[uniqueId];
                                $file_name.html(fileExpr);
                                $file_progress.removeClass('vis').addClass('n-vis');
                                $applozic(".mck-file-box .progress").removeClass('vis').addClass('n-vis');
                                $mck_text_box.removeAttr('required');
                                FILE_META.push(file_meta);
                                $fileContainer.data('mckfile', file_meta);
                                $mck_file_upload.children('input').val('');
                                return false;
                            } else {
                                $file_remove.attr("disabled", false);
                                $mck_msg_sbmt.attr('disabled', false);
                                // FILE_META
                                // = '';
                                $file_remove.trigger('click');
                            }
                        });
                        var url = MCK_FILE_URL + FILE_UPLOAD_URL;

					     window.Applozic.ALApiService.fileUpload({
                            data: { url: url },
                            success: function (result) {
                                var fd = new FormData();
                                fd.append('files[]', file);
                                xhr.open("POST", result, true);
                                xhr.setRequestHeader("UserId-Enabled", true);
                                xhr.setRequestHeader("Authorization", "Basic " + AUTH_CODE);
                                xhr.setRequestHeader("Application-User", "Basic " + AUTH_CODE);
                                xhr.setRequestHeader("Application-Key", MCK_APP_ID);
                                xhr.setRequestHeader("Device-Key", USER_DEVICE_KEY);
                                xhr.setRequestHeader("Access-Token", MCK_ACCESS_TOKEN);
                                xhr.send(fd);
                            },
                            error: function () { }
                        }
                        );
                    }
                    return false;
                }
            };

			   		_this.uploadAttachment2AWS = function (params) {
                var file = params.file;
                var data = new FormData();
                var uploadErrors = [];
                if (typeof file === 'undefined') {
                    return;
                }
                if ($applozic(".mck-file-box").length > 4) {
                    uploadErrors.push("Can't upload more than 5 files at a time");
                }
                if (file['size'] > (MCK_FILEMAXSIZE * ONE_MB)) {
                    uploadErrors.push("file size can not be more than " + MCK_FILEMAXSIZE + " MB");
                }
                if (uploadErrors.length > 0) {
                    alert(uploadErrors.toString());
                } else {
                    var randomId = mckUtils.randomId();
                    var fileboxList = [{
                            fileIdExpr: randomId,
                            fileName: params.name,
                            fileNameExpr: '<a href="#" target="_self" >' + params.name + '</a>',
                            fileSizeExpr: alFileService.getFilePreviewSize(file.size)
                        }];
                    $applozic.tmpl("fileboxTemplate", fileboxList).appendTo('#mck-file-box');
                    var $fileContainer = $applozic(".mck-file-box." + randomId);
                    var $file_name = $applozic(".mck-file-box." + randomId + " .mck-file-lb");
                    var $file_progressbar = $applozic(".mck-file-box." + randomId + " .progress .bar");
                    var $file_progress = $applozic(".mck-file-box." + randomId + " .progress");
                    var $file_remove = $applozic(".mck-file-box." + randomId + " .mck-remove-file");
                    $file_progressbar.css('width', '0%');
                    $file_progress.removeClass('n-vis').addClass('vis');
                    $file_remove.attr("disabled", true);
                    $mck_file_upload.attr("disabled", true);
                    $file_box.removeClass('n-vis').addClass('vis');
                    if (params.name === $applozic(".mck-file-box." + randomId + " .mck-file-lb a").html()) {
                        var currTab = $mck_msg_inner.data('mck-id');
                        var uniqueId = params.name + file.size;
                        TAB_FILE_DRAFT[uniqueId] = currTab;
                        $mck_msg_sbmt.attr('disabled', true);
                        data.append('file', file);
                        var xhr = new XMLHttpRequest();
                        (xhr.upload || xhr).addEventListener('progress', function (e) {
                            var progress = parseInt(e.loaded / e.total * 100, 10);
                            $file_progressbar.css('width', progress + '%');
                        });
                        xhr.addEventListener('load', function (e) {
                            var responseJson = $applozic.parseJSON(this.responseText);
                            if (typeof responseJson === "object") {
                                var file_meta = responseJson;
                                var fileExpr = (typeof file_meta === "object") ? '<a href="' + file_meta.url + '" target="_blank">' + file_meta.name + '</a>' : '';
                                var name = file_meta.name;
                                var size = file_meta.size;
                                var currTabId = $mck_msg_inner.data('mck-id');
                                var uniqueId = name + size;
                                var fileTabId = TAB_FILE_DRAFT[uniqueId];
                                if (currTab !== currTabId) {
                                    mckMessageLayout.updateDraftMessage(fileTabId, file_meta);
                                    delete TAB_FILE_DRAFT[uniqueId];
                                    return;
                                }
                                $file_remove.attr('disabled', false);
                                $mck_file_upload.attr('disabled', false);
                                $mck_msg_sbmt.attr('disabled', false);
                                delete TAB_FILE_DRAFT[uniqueId];
                                $file_name.html(fileExpr);
                                $file_progress.removeClass('vis').addClass('n-vis');
                                $applozic(".mck-file-box .progress").removeClass('vis').addClass('n-vis');
                                $mck_text_box.removeAttr('required');
                                FILE_META.push(file_meta);
                                $fileContainer.data('mckfile', file_meta);
                                $mck_file_upload.children('input').val('');
                                return false;
                            } else {
                                $file_remove.attr("disabled", false);
                                $mck_msg_sbmt.attr('disabled', false);
                                // FILE_META
                                // = '';
                                $file_remove.trigger('click');
                            }
                        });
												var url = MCK_BASE_URL + ATTACHMENT_UPLOAD_URL

                        xhr.open('post', url , true);
                        xhr.setRequestHeader("UserId-Enabled", true);
                        xhr.setRequestHeader("Authorization", "Basic " + AUTH_CODE);
                        xhr.setRequestHeader("Application-User", "Basic " + AUTH_CODE);
                        xhr.setRequestHeader("Application-Key", MCK_APP_ID);
                        xhr.setRequestHeader("Device-Key", window.Applozic.ALSocket.USER_DEVICE_KEY);
                        if (MCK_ACCESS_TOKEN) {
                            xhr.setRequestHeader("Access-Token", MCK_ACCESS_TOKEN);
                        }
                        xhr.send(data);
                    }
                    return false;
                }
            };

            _this.uplaodFileToAWS = function(file, medium) {
                var data = new FormData();
                var uploadErrors = [];
                if (typeof file === 'undefined') {
                    return;
                }
                if (file['type'].indexOf("image") === -1) {
                    uploadErrors.push("Please upload image file.");
                }
                if (uploadErrors.length > 0) {
                    alert(uploadErrors.toString());
                } else {
                    $mck_overlay.attr('disabled', true);
                    if (UPLOAD_VIA[0] === medium) {
                        $mck_group_create_icon_box.find('.mck-overlay-box').removeClass('n-vis');
                        $mck_group_create_icon_box.removeClass('mck-hover-on');
                        $mck_group_create_icon_loading.removeClass('n-vis').addClass('vis');
                    } else {
                        $mck_group_info_icon_box.find('.mck-overlay-box').removeClass('n-vis');
                        $mck_group_info_icon_box.removeClass('mck-hover-on');
                        $mck_group_info_icon_loading.removeClass('n-vis').addClass('vis');
                    }
                    var xhr = new XMLHttpRequest();
                    xhr.addEventListener('load', function(e) {
                        var fileUrl = this.responseText;
                        if (fileUrl) {
                            if (UPLOAD_VIA[0] === medium) {
                                $mck_group_create_icon.html('<img src="' + fileUrl + '"/>');
                                $mck_group_create_icon.data('iconurl', fileUrl);
                                $mck_gc_overlay_label.html(MCK_LABELS['change.group.icon']);
                                $mck_group_create_icon_loading.removeClass('vis').addClass('n-vis');
                                $mck_group_create_icon_box.addClass('mck-hover-on');
                            } else {
                                $mck_group_info_icon.html('<img src="' + fileUrl + '"/>');
                                $mck_group_info_icon.data('iconurl', fileUrl);
                                $mck_group_info_icon_loading.removeClass('vis').addClass('n-vis')
                                $mck_group_info_icon_box.addClass('mck-hover-on');
                                setTimeout(function() {
                                    $mck_btn_group_icon_save.removeClass('n-vis').addClass('vis');
                                }, 1500);
                            }
                            setTimeout(function() {
                                $mck_overlay_box.addClass('n-vis');
                            }, 1500);
                        }
                        $mck_overlay.attr("disabled", false);
                        (UPLOAD_VIA[0] === medium) ? $mck_group_icon_upload.val(''): $mck_group_icon_change.val('');
                        return false;
                    });
                    data.append("file", file);
                    xhr.open('post', MCK_BASE_URL + FILE_AWS_UPLOAD_URL, true);
                    xhr.setRequestHeader("UserId-Enabled", true);
                    xhr.setRequestHeader("Authorization", "Basic " + AUTH_CODE);
                    xhr.setRequestHeader("Application-User", "Basic " + AUTH_CODE);
                    xhr.setRequestHeader("Application-Key", MCK_APP_ID);
                    xhr.setRequestHeader("Device-Key", window.Applozic.ALSocket.USER_DEVICE_KEY);
                    if (MCK_ACCESS_TOKEN) {
                        xhr.setRequestHeader("Access-Token", MCK_ACCESS_TOKEN);
                    }
                    xhr.send(data);
                }
            };

            _this.addFileBox = function(file) {
                var fileboxId = mckUtils.randomId();
                var fileName = '';
                if (typeof file.fileMeta === 'object') {
                    fileboxId = file.fileMeta.createdAtTime;
                    fileName = file.fileMeta.name;
                }
                var fileboxList = [{
                    fileNameExpr: file.filelb,
                    fileSizeExpr: file.filesize,
                    fileIdExpr: fileboxId,
                    fileName: fileName
                }];
                $applozic.tmpl("fileboxTemplate", fileboxList).appendTo('#mck-file-box');
                var $fileContainer = $applozic(".mck-file-box." + fileboxId);
                var $file_remove = $fileContainer.find(".mck-remove-file");
                var $file_progress = $fileContainer.find(".progress");
                if (typeof file.fileMeta === 'object') {
                    $fileContainer.data('mckblob', file.fileMeta.blobKey);
                    $mck_text_box.removeAttr('required');
                    $mck_msg_sbmt.attr('disabled', false);
                    $file_remove.attr('disabled', false);
                    $file_progress.removeClass('vis').addClass('n-vis');
                    FILE_META.push(file.fileMeta);
                } else {
                    $mck_msg_sbmt.attr('disabled', true);
                    $file_remove.attr('disabled', true);
                    $file_progress.removeClass('n-vis').addClass('vis');
                }
            };
			  }

        function MckNotificationService() {
            var _this = this;

            var $mck_sidebox;
            var $mck_msg_inner;
            var $mck_msg_preview;
            var $mck_preview_icon;
            var $mck_preview_name;
            var $mck_group_info_tab;
            var MCK_SW_SUBSCRIPTION;
            var $mck_sidebox_launcher;
            var $mck_preview_msg_content;
            var $mck_preview_file_content;
            var MCK_SW_REGISTER_URL = "/rest/ws/plugin/update/sw/id";
            _this.init = function() {
                $mck_sidebox = $applozic("#mck-sidebox");
                $mck_msg_preview = $applozic("#mck-msg-preview");
                $mck_group_info_tab = $applozic('#mck-group-info-tab');
                $mck_sidebox_launcher = $applozic("#mck-sidebox-launcher");
                $mck_msg_inner = $applozic("#mck-message-cell .mck-message-inner");
                $mck_preview_icon = $applozic("#mck-msg-preview .mck-preview-icon");
                $mck_preview_name = $applozic("#mck-msg-preview .mck-preview-cont-name");
                $mck_preview_msg_content = $applozic("#mck-msg-preview .mck-preview-msg-content");
                $mck_preview_file_content = $applozic("#mck-msg-preview .mck-preview-file-content");
            };

						_this.notifyUser = function(message) {
                if (message.type === 7) {
                    return;
                }
                var contact = (message.groupId) ? mckGroupUtils.getGroup('' + message.groupId) : mckMessageLayout.fetchContact('' + message.to.split(",")[0]);
                var isGroup = false;
                if (message.groupId) {
                    isGroup = true;
                }

                alUserService.loadUserProfile(message.to);

                var displayName = mckMessageLayout.getTabDisplayName(contact.contactId, isGroup);
               // var notificationsound = mckNotificationTone;
                _this.showNewMessageNotification(message, contact, displayName);
                if (IS_MCK_NOTIFICATION && !IS_MCK_TAB_FOCUSED) {
                    var iconLink = MCK_NOTIFICATION_ICON_LINK;
                    var msg = mckMessageLayout.getTextForMessagePreview(message, contact);
                    if (typeof(MCK_GETUSERIMAGE) === "function" && !contact.isGroup) {
                        var imgsrc = MCK_GETUSERIMAGE(contact.contactId);
                        if (imgsrc && typeof imgsrc !== 'undefined') {
                            iconLink = imgsrc;
                        }
                    }
                    mckNotificationUtils.sendDesktopNotification(displayName, iconLink, msg);
                }
            };

            _this.showNewMessageNotification = function(message, contact, displayName) {
                if (!IS_NOTIFICATION_ENABLED || message.contentType === 102) {
                    return;
                }
                var currTabId = $mck_msg_inner.data('mck-id');
                var isGroupTab = $mck_msg_inner.data('isgroup');
                if (currTabId === contact.contactId && isGroupTab === contact.isGroup && !$mck_group_info_tab.hasClass('vis')) {
                    if (message.conversationId && (IS_MCK_TOPIC_HEADER || IS_MCK_TOPIC_BOX)) {
                        var currConvId = $mck_msg_inner.data('mck-conversationid');
                        currConvId = (typeof currConvId !== "undefined" && currConvId !== '') ? currConvId.toString() : '';
                        if (currConvId === message.conversationId.toString()) {
                            return;
                        }
                    } else {
                        return;
                    }
                }
                $mck_msg_preview.data('isgroup', contact.isGroup);
                var conversationId = (message.conversationId) ? message.conversationId : '';
                $mck_msg_preview.data('mck-conversationid', conversationId);
                var imgsrctag = mckMessageLayout.getContactImageLink(contact, displayName);
                if (message.message) {
                    var msg = mckMessageLayout.getMessageTextForContactPreview(message, contact, 50);
                    $mck_preview_msg_content.html('');
                    (typeof msg === 'object') ? $mck_preview_msg_content.append(msg): $mck_preview_msg_content.html(msg);
                    $mck_preview_msg_content.removeClass('n-vis').addClass('vis');
                } else {
                    $mck_preview_msg_content.html('');
                }
                if (message.fileMetaKey) {
                    $mck_preview_file_content.html(alFileService.getFileIcon(message));
                    $mck_preview_file_content.removeClass('n-vis').addClass('vis');
                    if ($mck_preview_msg_content.html() === '') {
                        $mck_preview_msg_content.removeClass('vis').addClass('n-vis');
                    }
                } else {
                    $mck_preview_file_content.html('');
                    $mck_preview_file_content.removeClass('vis').addClass('n-vis');
                }
                $mck_preview_name.html(displayName);
                $mck_preview_icon.html(imgsrctag);
                $mck_msg_preview.data('mck-id', contact.contactId);
                $mck_msg_preview.show();
                setTimeout(function() {
                    $mck_msg_preview.fadeOut(3000);
                }, 10000);
            };
        }

        function MckCallService() {
            var _this = this;
						var error_message;
            _this.token = null;
            _this.Identity = null;
            _this.outgoingCallServices = null;
            _this.incomingCallServices = null;
						var $mck_msg_to = $applozic("#mck-msg-to");
            var $mck_videocall_btn = $applozic(".mck-videocall-btn");
            var $mck_vid_box = $applozic(".applozic-vid-container");
            var $mck_side_box = $applozic("#mck-sidebox");
            var $mck_video_call_indicator = $applozic("#mck-video-call-indicator");
            //$mck_msg_preview_btns=$applozic("#mck-msg-preview-btns");
            //$mck_call_accept_btn = $applozic("#mck-vid-call-accept");
            //$mck_call_eject_btn=$applozic("mck-vid-call-reject");
            _this.hideVideoBox = function() {
                $mck_vid_box.addClass('n-vis').removeClass('vis');
                $mck_side_box.addClass('vis').removeClass('n-vis');
                $mck_video_call_indicator.addClass("n-vis").removeClass("vis");
            };
            _this.init = function() {
            	notificationtoneoption.loop = true;
                _this.token = ALStorage.getAppHeaders() !== null ? ALStorage.getAppHeaders().videoToken : undefined;
                _this.ringToneForHost = ringToneService.loadRingTone(MCK_BASE_URL + "/resources/sidebox/audio/applozic_video_call_ring_tone.mp3",notificationtoneoption);
                //start videocall button in menu
                $applozic("#mck-btn-video-call").on('click', function(e) {
                    if (_this.token) {
												var toUser = $mck_msg_to.val();
                        var callId = MCK_USER_ID + new Date().getTime().toString() + Math.random().toString(36).slice(2);
                        //call Id is room name
                        //
                        //when user send the vediocall message connect the user to the room.
                        //when user acceept the call, connect that user to same room.
                        var message = alMessageService.sendVideoCallMessage(callId, "CALL_DIALED", 102, false, toUser, function(messagePxy){
													mckMessageService.sendMessage(messagePxy);
												});
                        var contact = mckMessageLayout.fetchContact(message.to);
                        var displayName = mckMessageLayout.getTabDisplayName(contact.contactId, false);
                        var imgSource = mckMessageLayout.getContactImageLink(contact, displayName);
                        var isAudioCall = false;
                        var isCallHost = true;
                        var callStartTime = new Date();
                        var userName = MCK_USER_ID;
                        _this.outgoingCallServices = new MckCallingService(userName, mckCallService.token, callId, displayName, isCallHost, callStartTime, mckMessageService, imgSource, isAudioCall, _this.ringToneForHost);
                        _this.outgoingCallServices.startVideoCall();
                        $applozic("#mck-btn-video-call").data("isCallHost", true);
                        $applozic("#mck-btn-video-call").data("callStartTime", callStartTime);
                    } else {
                      if(error_message === "INSUFFICIENT_FUNDS"){
                        alert("Video calling is not available at the moment. For details, contact support");
                      }
                      else{
                        alert("Calling token is missing, try refreshing page and initiate call again.");
                      }
                    }
                });
                //receive call button
                $applozic("#mck-vid-receive-btn").on('click', function(e) {
                    console.log("call received");
                    $applozic("#mck-video-call-indicator").addClass('n-vis').removeClass('vis');
                    $mck_videocall_btn.removeClass('vis').addClass('n-vis');
                    var callId = $applozic("#mck-video-call-indicator").data("call-id");
                    var isAudioCall = $applozic("#mck-video-call-indicator").data("isAudioCall");
                    $applozic("#mck-video-call-indicator").data("callReceived", true);
                    $applozic("#mck-video-call-indicator").addClass("n-vis");
                    //send message to reciepient
                    mckCallService.callReceived(callId, isAudioCall);
                });


                $applozic("#mck-vid-reject-btn").on('click', function(e) {
                    // receivers is busy
                    console.log("call rejected");
                    var callId = $applozic("#mck-video-call-indicator").data("call-id");
                    var isAudioCall = $applozic("#mck-video-call-indicator").data("isAudioCall");
                    mckCallService.callRejected(callId, isAudioCall);
                    $applozic("#mck-video-call-indicator").addClass("n-vis").removeClass('vis');
                });
            };
            //TODO: rename this method into getTwilioTokenFromServer
            _this.InitilizeVideoClient = function(userId, deviceKey) {
                _this.Identity = userId;
                mckUtils.ajax({
                    url: MCK_BASE_URL + "/twilio/token",
                    type: 'post',
										skipEncryption: true,
                    contentType: 'application/x-www-form-urlencoded',
                    data: { "identity": userId, "device": deviceKey },
                    success: function(result) {
                        if (result != null && result != "") {

                            _this.token = result.token;
                            var data = ALStorage.getAppHeaders();
                            data.videoToken = result.token;
                            ALStorage.setAppHeaders(data);
                        }
												if(result.hasOwnProperty("errorResponse")){
                        error_message= result.errorResponse[0].description;
                      }
                    },
                    error: function(result) {
                        console.log("error while getting token" + result);
                    }
                });
            };

            _this.callReceived = function(callId, isAudioCall) {
								var toUser = $mck_msg_to.val();
                console.log("_this.callReceived");
                if (mckVideoCallringTone) {
                    mckVideoCallringTone.stop();
                }
                //notify Server
                var message = alMessageService.sendVideoCallMessage(callId, "CALL_ANSWERED", 102, isAudioCall, toUser, function(messagePxy){
									mckMessageService.sendMessage(messagePxy);
								});
                //var newWindow=   window.open(MCK_BASE_URL+'/video/call', '_blank');
                var isCallHost = false;
                _this.incomingCallServices = new MckCallingService(_this.Identity, _this.token, callId, null, isCallHost, null, mckMessageService, null, isAudioCall);
                _this.incomingCallServices.startVideoCall();

            };

            _this.callRejected = function(callId, isAudioCall) {
								var toUser = $mck_msg_to.val();
                if (mckVideoCallringTone) {
                    mckVideoCallringTone.stop();
                }
                //notify server content type 102  type REJECT
                var message = alMessageService.sendVideoCallMessage(callId, "CALL_REJECTED", 102, isAudioCall, toUser, function(messagePxy){
									mckMessageService.sendMessage(messagePxy);
								});
            };
          }

    }
}
($applozic, window, document));
 function RingToneService() {
            var _this = this;
            _this.loadRingTone = function (url,notificationtoneoption) {
                return new Howl({
                    src: [url],
                    loop: notificationtoneoption.loop
                });
            };
        }
